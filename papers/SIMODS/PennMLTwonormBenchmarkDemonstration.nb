(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    540795,      10581]
NotebookOptionsPosition[    535425,      10484]
NotebookOutlinePosition[    535858,      10502]
CellTagsIndexPosition[    535815,      10499]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell[TextData[{
 "Algebraic Ground Truth Inference Penn ML Benchmarks  demonstrations: \
twonorm",
 StyleBox[" ",
  FontFamily->"Verdana",
  FontWeight->"Regular"]
}], "Title",
 CellChangeTimes->{{3.8344766119248457`*^9, 3.8344766289607973`*^9}, {
   3.835161016382711*^9, 3.835161032227339*^9}, {3.8354196873655252`*^9, 
   3.835419707390642*^9}, {3.83550999518757*^9, 3.835510009671193*^9}, 
   3.835510785690372*^9, {3.835529403164628*^9, 3.8355294037987213`*^9}, {
   3.835529546606822*^9, 3.835529595750883*^9}, {3.835615526525866*^9, 
   3.8356155280550337`*^9}},ExpressionUUID->"8f25e2ae-8046-4cc1-9a60-\
f05d9b47ba1c"],

Cell["\<\
The Penn ML benchmark `twonorm` is a binary classification dataset. This is \
an artificial or synthetic dataset consisting of 7,400 20-dimensional vectors \
drawn from two Gaussian distributions. For this demonstration we took 1000 \
from each of the two labels as our training set and tested on the 5,400 \
remaining records (2,703 \[OpenCurlyDoubleQuote]0\[CloseCurlyDoubleQuote] + \
2,697 \[OpenCurlyDoubleQuote]1\[CloseCurlyDoubleQuote]).\
\>", "Text",
 CellChangeTimes->{{3.8344766337712727`*^9, 3.8344767069460363`*^9}, {
  3.835161047797011*^9, 3.835161090337428*^9}, {3.835419714908181*^9, 
  3.835419725008353*^9}, {3.835529608031909*^9, 3.835529641884801*^9}, {
  3.835529739343802*^9, 3.835529809643167*^9}, {3.835529846594005*^9, 
  3.835529923093787*^9}, {3.835529976549368*^9, 3.8355299865904493`*^9}, {
  3.8355300237067747`*^9, 3.83553006057865*^9}, {3.835615586676577*^9, 
  3.8356155917010717`*^9}, {3.835683471965446*^9, 3.835683588721036*^9}, {
  3.835683707109255*^9, 
  3.835683727749749*^9}},ExpressionUUID->"93553b76-fab8-4060-ac5b-\
d39c38786d95"],

Cell[CellGroupData[{

Cell["Code", "Section",
 CellChangeTimes->{{3.8345641594920473`*^9, 
  3.834564159841236*^9}},ExpressionUUID->"e1ff1cee-7ca3-408a-a320-\
a5798c722a49"],

Cell[CellGroupData[{

Cell["\<\
Ingesting the data from Github and initializing the mushroom data table\
\>", "Subsection",
 CellChangeTimes->{{3.808209704308536*^9, 3.808209709171122*^9}, {
  3.808253758236438*^9, 3.8082537595919943`*^9}, {3.835081218944955*^9, 
  3.835081224067834*^9}, {3.835530122992977*^9, 
  3.83553015396413*^9}},ExpressionUUID->"c1bcff9c-8b5f-47f9-92a5-\
43a5e009c8e0"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"datasetName", "=", "\"\<twonorm\>\""}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"filename", "=", 
   RowBox[{
   "\"\<https://github.com/EpistasisLab/penn-ml-benchmarks/blob/master/\
datasets/\>\"", "<>", "datasetName", "<>", "\"\</\>\"", "<>", "datasetName", 
    "<>", "\"\<.tsv.gz?raw=true\>\""}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"tsvHeader", "=", 
   RowBox[{
    RowBox[{"Import", "[", 
     RowBox[{"filename", ",", "\"\<TSV\>\""}], "]"}], "//", "First"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"benchmarkData", "=", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"Import", "[", 
       RowBox[{"filename", ",", "\"\<TSV\>\""}], "]"}], "//", "Rest"}], "//", 
     
     RowBox[{
      RowBox[{"GroupBy", "[", 
       RowBox[{"#", ",", "Last"}], "]"}], "&"}]}], "//", 
    RowBox[{
     RowBox[{"Map", "[", 
      RowBox[{"Most", ",", "#", ",", 
       RowBox[{"{", "2", "}"}]}], "]"}], "&"}]}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.8082596806367073`*^9, 3.8082596827615023`*^9}, {
  3.8082608665095778`*^9, 3.808260875107614*^9}, {3.808300260782772*^9, 
  3.80830029683456*^9}, {3.834476840666937*^9, 3.83447684198736*^9}, {
  3.834476872559904*^9, 3.8344768739619226`*^9}, {3.835081229854085*^9, 
  3.835081238690917*^9}, {3.835353823281164*^9, 3.835353827240304*^9}, {
  3.835419773042727*^9, 3.835419777026204*^9}, {3.835530218613064*^9, 
  3.835530285410672*^9}, {3.835615532105321*^9, 3.835615535958583*^9}},
 CellLabel->"In[1]:=",ExpressionUUID->"a9191f5f-35f3-44bd-ad9e-8d889ac4a103"],

Cell[BoxData["\<\"twonorm\"\>"], "Output",
 CellChangeTimes->{3.834477078699051*^9, 3.835081242613099*^9, 
  3.835161096070614*^9, 3.835353837998733*^9, 3.835419778387127*^9, 
  3.835530293144752*^9, 3.83561554326117*^9, 3.835684173082272*^9, 
  3.835850216177987*^9},
 CellLabel->"Out[1]=",ExpressionUUID->"7ee822fd-c9b0-4d5b-86e9-199194689d70"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{"tsvHeader", "\[IndentingNewLine]", 
 RowBox[{"numberOfFeatures", "=", 
  RowBox[{
   RowBox[{"Length", "@", "tsvHeader"}], "-", "1"}]}]}], "Input",
 CellChangeTimes->{{3.8355303179837008`*^9, 3.83553033425272*^9}},
 CellLabel->"In[5]:=",ExpressionUUID->"a794bd5d-67a5-413b-a67b-62f5bef91d93"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"A1\"\>", ",", "\<\"A2\"\>", ",", "\<\"A3\"\>", 
   ",", "\<\"A4\"\>", ",", "\<\"A5\"\>", ",", "\<\"A6\"\>", ",", "\<\"A7\"\>",
    ",", "\<\"A8\"\>", ",", "\<\"A9\"\>", ",", "\<\"A10\"\>", 
   ",", "\<\"A11\"\>", ",", "\<\"A12\"\>", ",", "\<\"A13\"\>", 
   ",", "\<\"A14\"\>", ",", "\<\"A15\"\>", ",", "\<\"A16\"\>", 
   ",", "\<\"A17\"\>", ",", "\<\"A18\"\>", ",", "\<\"A19\"\>", 
   ",", "\<\"A20\"\>", ",", "\<\"target\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.835420112286129*^9, 3.835530335370302*^9, 
  3.835615549402565*^9, 3.835851595973653*^9},
 CellLabel->"Out[5]=",ExpressionUUID->"45242947-27de-404a-8633-48b9e4c7c6fe"],

Cell[BoxData["20"], "Output",
 CellChangeTimes->{3.835420112286129*^9, 3.835530335370302*^9, 
  3.835615549402565*^9, 3.835851595988079*^9},
 CellLabel->"Out[6]=",ExpressionUUID->"d4748886-bc2b-4206-b20c-90bb18f7d45f"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Training/testing code", "Subsection",
 CellChangeTimes->{{3.8356167884130573`*^9, 
  3.835616797237911*^9}},ExpressionUUID->"5d62c9ad-f7ae-4dc6-aaf3-\
526e28ba9463"],

Cell[BoxData[{
 RowBox[{"Clear", "[", "TrainClassifiers", "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"TrainClassifiers", "[", 
   RowBox[{
   "classifiersData_", ",", "classifierTypes_List", ",", 
    "nTrainTotal_Integer", ",", "nEachRandom_Integer"}], "]"}], ":=", 
  RowBox[{"Module", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", " ", 
     RowBox[{"trainingSamples", ",", " ", "classifiers"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"(*", " ", 
     RowBox[{
      RowBox[{
      "All", " ", "this", " ", "code", " ", "is", " ", "standard", " ", 
       "Mathematica", " ", 
       RowBox[{"code", ".", "  ", "The"}], " ", "workhorse", " ", "command", 
       " ", "is"}], " ", "-", " ", 
      RowBox[{
       RowBox[{"Classify", ".", " ", "We"}], " ", "even", " ", "just", " ", 
       "go", " ", "with", " ", "the", " ", "default", " ", "settings", " ", 
       "for", "\[IndentingNewLine]", "the", " ", "algoritms", " ", 
       "Mathematica", " ", "implements", " ", "with", " ", "it"}]}], " ", 
     "*)"}], "\[IndentingNewLine]", 
    RowBox[{"(*", " ", 
     RowBox[{"Picking", " ", "about", " ", 
      RowBox[{"1", "/", "2"}], " ", "chance", " ", "of", " ", "overlap", " ", 
      "seems", " ", "best", " ", "with", " ", "our", " ", "current", " ", 
      "settings"}], " ", "*)"}], "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"trainingSamples", "=", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"RandomSample", "[", 
         RowBox[{
          RowBox[{"Range", "@", "nTrainTotal"}], ",", "nEachRandom"}], "]"}], 
        ",", 
        RowBox[{"{", 
         RowBox[{"Length", "@", "classifiersData"}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"classifiers", "=", 
      RowBox[{
       RowBox[{"Transpose", "@", 
        RowBox[{"{", 
         RowBox[{"classifierTypes", ",", 
          RowBox[{
           RowBox[{"Map", "[", 
            RowBox[{"First", ",", "classifiersData", ",", 
             RowBox[{"{", "2", "}"}]}], "]"}], "//", 
           RowBox[{
            RowBox[{"MapIndexed", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"#1", "[", 
                RowBox[{"[", 
                 RowBox[{"trainingSamples", "[", 
                  RowBox[{"[", 
                   RowBox[{"#2", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "]"}], "]"}], "]"}], 
                "]"}], "&"}], ",", "#", ",", 
              RowBox[{"{", "2", "}"}]}], "]"}], "&"}]}]}], "}"}]}], "//", 
       RowBox[{
        RowBox[{"Map", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Classify", "[", 
            RowBox[{
             RowBox[{"#", "[", 
              RowBox[{"[", "2", "]"}], "]"}], ",", 
             RowBox[{"Method", "\[Rule]", 
              RowBox[{"#", "[", 
               RowBox[{"[", "1", "]"}], "]"}]}], ",", 
             RowBox[{"TrainingProgressReporting", "->", "None"}]}], "]"}], 
           "&"}], ",", "#"}], "]"}], "&"}]}]}], ";", "\[IndentingNewLine]", 
     "classifiers"}]}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.835531556518676*^9, 3.8355317266181192`*^9}, {
   3.835531758291831*^9, 3.8355319081755657`*^9}, {3.8355344642587347`*^9, 
   3.835534465600046*^9}, {3.835615896657681*^9, 3.8356158976969757`*^9}, 
   3.835615960292075*^9, {3.835616815213087*^9, 3.835616889577979*^9}, {
   3.835616933065447*^9, 3.835617094052847*^9}, {3.835617349712934*^9, 
   3.835617357478469*^9}, 3.835619647057646*^9, {3.835619950525539*^9, 
   3.8356199885666943`*^9}, {3.8356200436132393`*^9, 3.835620044813693*^9}, {
   3.83562048903128*^9, 3.835620507339172*^9}, {3.835620543719686*^9, 
   3.835620546626122*^9}, {3.83562070219693*^9, 3.8356207115158052`*^9}, {
   3.835620769205139*^9, 3.835620771795257*^9}, {3.835620875272758*^9, 
   3.835620890275992*^9}, {3.835683838895865*^9, 3.835683862283846*^9}, {
   3.8356839473011503`*^9, 3.8356840517535343`*^9}, {3.835684290311369*^9, 
   3.8356842937463903`*^9}, {3.83568437412328*^9, 3.835684378188745*^9}, {
   3.835684747290403*^9, 3.835684761604094*^9}, {3.8356848746044493`*^9, 
   3.8356848847088833`*^9}, {3.835684931378502*^9, 3.835684975764881*^9}, {
   3.835685042177785*^9, 3.83568504682237*^9}, {3.835685490001293*^9, 
   3.835685504172304*^9}},
 CellLabel->"In[7]:=",ExpressionUUID->"c2fc95d8-0944-46b2-9e82-72dbd9e0bf73"],

Cell[BoxData[{
 RowBox[{"Clear", "[", "LabelRMSE", "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"LabelRMSE", "[", 
    RowBox[{"gtDiff_", ",", "label_"}], "]"}], ":=", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"KeySelect", "[", 
         RowBox[{"gtDiff", ",", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"Length", "@", "#"}], "==", "3"}], ")"}], "&"}]}], "]"}],
         "//", 
        RowBox[{
         RowBox[{"KeySelect", "[", 
          RowBox[{"#", ",", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"Last", "@", "#"}], "==", "label"}], ")"}], "&"}]}], 
          "]"}], "&"}]}], "//", "Values"}], "//", 
      RowBox[{
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"#", "^", "2"}], "&"}], ",", "#"}], "]"}], "&"}]}], "//", 
     "Mean"}], "//", "Sqrt"}]}], " "}], "\[IndentingNewLine]", 
 RowBox[{"Clear", "[", "AlgebraicallyEvaluateClassifiers", 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"AlgebraicallyEvaluateClassifiers", "[", 
   RowBox[{"classifiers_", ",", "classifiersData_"}], "]"}], ":=", 
  RowBox[{"Module", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "nTestAlpha", ",", " ", "nTestBeta", ",", " ", "decisions", ",", " ", 
      "\[IndentingNewLine]", "alphaSamples", ",", " ", "betaSamples", ",", 
      " ", "\[IndentingNewLine]", "byLabelDecisions", ",", " ", 
      "votingPatternCountsByLabel", ",", "\[IndentingNewLine]", "sols", ",", 
      "equationsToSolve", ",", "vars", ",", "\[IndentingNewLine]", "gt", ",", 
      "avgSol", ",", "gtDiff"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"(*", " ", 
     RowBox[{
     "Calculate", " ", "the", " ", "size", " ", "of", " ", "the", " ", "test",
       " ", "sets"}], " ", "*)"}], "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{"nTestAlpha", ",", "nTestBeta"}], "}"}], "=", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"classifiersData", "//", "First"}], "//", 
         RowBox[{
          RowBox[{"Map", "[", 
           RowBox[{"Length", ",", "#", ",", 
            RowBox[{"{", "2", "}"}]}], "]"}], "&"}]}], "//", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"#", "[", "0", "]"}], ",", 
           RowBox[{"#", "[", "1", "]"}]}], "}"}], "&"}]}], "//", 
       RowBox[{
        RowBox[{"Last", "/@", "#"}], "&"}]}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{
       "We", " ", "arbitrarily", " ", "define", " ", "\"\<0\>\"", " ", "as", 
        " ", "the", " ", "alpha", " ", "label"}], ",", " ", 
       RowBox[{
       "and", " ", "\"\<1\>\"", " ", "as", " ", "the", " ", "beta", " ", 
        "label"}]}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"decisions", "=", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"classifiers", "[", 
          RowBox[{"[", "i", "]"}], "]"}], "[", 
         RowBox[{
          RowBox[{
           RowBox[{"classifiersData", "[", 
            RowBox[{"[", "i", "]"}], "]"}], "//", 
           RowBox[{
            RowBox[{"Map", "[", 
             RowBox[{"Last", ",", "#"}], "]"}], "&"}]}], "//", 
          RowBox[{
           RowBox[{"Join", "[", 
            RowBox[{
             RowBox[{"#", "[", "0", "]"}], ",", 
             RowBox[{"#", "[", "1", "]"}]}], "]"}], "&"}]}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"i", ",", 
          RowBox[{"Length", "@", "classifiers"}]}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"alphaSamples", "=", 
      RowBox[{"RandomSample", "[", 
       RowBox[{
        RowBox[{"Range", "@", "nTestAlpha"}], ",", "nTestAlpha"}], "]"}]}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"betaSamples", "=", 
      RowBox[{"RandomSample", "[", 
       RowBox[{
        RowBox[{"Range", "@", "nTestBeta"}], ",", "nTestBeta"}], "]"}]}], ";",
      "\[IndentingNewLine]", 
     RowBox[{"byLabelDecisions", "=", 
      RowBox[{
       RowBox[{"decisions", "//", 
        RowBox[{
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"TakeDrop", "[", 
             RowBox[{"#", ",", "2703"}], "]"}], "&"}], ",", "#"}], "]"}], 
         "&"}]}], "//", 
       RowBox[{
        RowBox[{"Map", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Association", "[", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"0", "\[Rule]", 
               RowBox[{
                RowBox[{"#", "[", 
                 RowBox[{"[", "1", "]"}], "]"}], "[", 
                RowBox[{"[", "alphaSamples", "]"}], "]"}]}], ",", 
              RowBox[{"1", "\[Rule]", 
               RowBox[{
                RowBox[{"#", "[", 
                 RowBox[{"[", "2", "]"}], "]"}], "[", 
                RowBox[{"[", "betaSamples", "]"}], "]"}]}]}], "}"}], "]"}], 
           "&"}], ",", "#"}], "]"}], "&"}]}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"votingPatternCountsByLabel", "=", 
      RowBox[{
       RowBox[{
        RowBox[{"byLabelDecisions", "//", 
         RowBox[{
          RowBox[{"Merge", "[", 
           RowBox[{"#", ",", "Identity"}], "]"}], "&"}]}], "//", 
        RowBox[{
         RowBox[{"Map", "[", 
          RowBox[{"Transpose", ",", "#"}], "]"}], "&"}]}], "//", 
       RowBox[{
        RowBox[{"Map", "[", 
         RowBox[{"Counts", ",", "#"}], "]"}], "&"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Map", "[", 
      RowBox[{"Length", ",", "votingPatternCountsByLabel"}], "]"}], ";", 
     "\[IndentingNewLine]", " ", 
     RowBox[{"sols", "=", 
      RowBox[{"Table", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"equationsToSolve", "=", 
          RowBox[{"MakeIndependentVotingIdeal", "[", "trio", "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"vars", "=", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"Variables", "/@", "equationsToSolve"}], "//", 
              "Flatten"}], "//", "DeleteDuplicates"}], "//", "Sort"}], "//", 
           RowBox[{
            RowBox[{"Cases", "[", 
             RowBox[{"#", ",", 
              RowBox[{"Except", "[", 
               SubscriptBox["f", "__"], "]"}]}], "]"}], "&"}]}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Solve", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Map", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"#", "\[Equal]", "0"}], ")"}], "&"}], ",", 
               "equationsToSolve"}], "]"}], "/.", 
             RowBox[{"VotingFrequenciesData", "[", 
              RowBox[{"votingPatternCountsByLabel", ",", "trio"}], "]"}]}], 
            ",", "vars"}], "]"}], "//", "N"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{"trio", ",", 
          RowBox[{"Subsets", "[", 
           RowBox[{
            RowBox[{"Range", "@", 
             RowBox[{"Length", "@", "classifiers"}]}], ",", 
            RowBox[{"{", "3", "}"}]}], "]"}]}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"gt", "=", 
      RowBox[{
       RowBox[{"Join", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           SubscriptBox["P", "\[Alpha]"], "\[Rule]", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"votingPatternCountsByLabel", "//", 
               RowBox[{
                RowBox[{"Map", "[", 
                 RowBox[{"Values", ",", "#"}], "]"}], "&"}]}], "//", 
              RowBox[{
               RowBox[{"Map", "[", 
                RowBox[{"Total", ",", "#"}], "]"}], "&"}]}], "//", 
             RowBox[{
              RowBox[{
               RowBox[{"#", "[", "0", "]"}], "/", 
               RowBox[{"Total", "@", "#"}]}], "&"}]}], ")"}]}], "}"}], ",", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Subscript", "[", 
             RowBox[{"P", ",", "i", ",", "\[Alpha]"}], "]"}], "->", 
            RowBox[{"DataGroundTruth", "[", 
             RowBox[{"votingPatternCountsByLabel", ",", "0", ",", "i"}], 
             "]"}]}], ",", 
           RowBox[{"{", 
            RowBox[{"i", ",", 
             RowBox[{"Length", "@", "classifiers"}]}], "}"}]}], "]"}], ",", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Subscript", "[", 
             RowBox[{"P", ",", "i", ",", "\[Beta]"}], "]"}], "->", 
            RowBox[{"DataGroundTruth", "[", 
             RowBox[{"votingPatternCountsByLabel", ",", "1", ",", "i"}], 
             "]"}]}], ",", 
           RowBox[{"{", 
            RowBox[{"i", ",", 
             RowBox[{"Length", "@", "classifiers"}]}], "}"}]}], "]"}]}], 
        "]"}], "//", "\[IndentingNewLine]", "Association"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"avgSol", "=", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"Select", "[", 
             RowBox[{"sols", ",", "IsAPhysicalSolutionQ"}], "]"}], "//", 
            RowBox[{
             RowBox[{"Map", "[", 
              RowBox[{"PickHighestAverageAccuracy", ",", "#"}], "]"}], 
             "&"}]}], "//", "Flatten"}], "//", 
          RowBox[{
           RowBox[{"GroupBy", "[", 
            RowBox[{"#", ",", "First"}], "]"}], "&"}]}], "//", 
         RowBox[{
          RowBox[{"Map", "[", 
           RowBox[{"Last", ",", "#", ",", 
            RowBox[{"{", "2", "}"}]}], "]"}], "&"}]}], "//", 
        RowBox[{
         RowBox[{"Map", "[", 
          RowBox[{"Mean", ",", "#"}], "]"}], "&"}]}], "//", 
       RowBox[{
        RowBox[{"KeySortBy", "[", 
         RowBox[{"#", ",", 
          RowBox[{
           RowBox[{"Last", "@", "#"}], "&"}]}], "]"}], "&"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"gtDiff", "=", 
      RowBox[{"Merge", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"gt", "//", "N"}], ",", 
          RowBox[{"-", "avgSol"}]}], "}"}], ",", "Total"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        SubscriptBox["P", "\[Alpha]"], "/.", "gtDiff"}], ",", 
       RowBox[{"LabelRMSE", "[", 
        RowBox[{"gtDiff", ",", "\[Alpha]"}], "]"}], ",", 
       RowBox[{"LabelRMSE", "[", 
        RowBox[{"gtDiff", ",", "\[Beta]"}], "]"}], ",", "gt", ",", "avgSol"}],
       "}"}]}]}], "\[IndentingNewLine]", " ", "]"}]}]}], "Input",
 CellChangeTimes->{{3.835532560937614*^9, 3.835532588094355*^9}, {
   3.835532708315089*^9, 3.835532717196369*^9}, {3.835534130825549*^9, 
   3.835534161873438*^9}, {3.835616069024228*^9, 3.835616115164399*^9}, {
   3.83561752423024*^9, 3.835617617878384*^9}, {3.835617671704151*^9, 
   3.8356176931915207`*^9}, {3.835617724262644*^9, 3.835617785523275*^9}, {
   3.835617828118911*^9, 3.835617902802269*^9}, {3.835621529639284*^9, 
   3.8356215467014713`*^9}, {3.835621963557666*^9, 3.8356221942569313`*^9}, {
   3.8356237283300047`*^9, 3.835623731954996*^9}, 3.8356237992066936`*^9, {
   3.835623955774385*^9, 3.835623997374041*^9}, {3.835685672097506*^9, 
   3.835685677823941*^9}, {3.835685727226098*^9, 3.835685734395135*^9}, {
   3.8356860136211777`*^9, 3.835686093948897*^9}, {3.835851954518854*^9, 
   3.835851958694046*^9}, {3.835852971067347*^9, 3.835853025696657*^9}},
 CellLabel->"In[60]:=",ExpressionUUID->"bf8298b0-e4ac-4a9f-864a-34ea26614016"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Writing out the independent evaluation ideal generator set", \
"Subsection",
 CellChangeTimes->{{3.83553285699489*^9, 
  3.835532877765402*^9}},ExpressionUUID->"d4b58778-bafa-4fc0-8da8-\
c5f0cdc86690"],

Cell[BoxData[{
 RowBox[{"Clear", "[", "MakeIndependentVotingIdeal", 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"MakeIndependentVotingIdeal", "[", 
   RowBox[{"{", 
    RowBox[{"i_", ",", "j_", ",", "k_"}], "}"}], "]"}], ":=", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{
     RowBox[{
      SubscriptBox["P", "\[Alpha]"], " ", 
      SubscriptBox["P", 
       RowBox[{"i", ",", "\[Alpha]"}]], " ", 
      SubscriptBox["P", 
       RowBox[{"j", ",", "\[Alpha]"}]], " ", 
      SubscriptBox["P", 
       RowBox[{"k", ",", "\[Alpha]"}]]}], "+", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"1", "-", 
        SubscriptBox["P", "\[Alpha]"]}], ")"}], " ", 
      RowBox[{"(", 
       RowBox[{"1", "-", 
        SubscriptBox["P", 
         RowBox[{"i", ",", "\[Beta]"}]]}], ")"}], " ", 
      RowBox[{"(", 
       RowBox[{"1", "-", 
        SubscriptBox["P", 
         RowBox[{"j", ",", "\[Beta]"}]]}], ")"}], " ", 
      RowBox[{"(", 
       RowBox[{"1", "-", 
        SubscriptBox["P", 
         RowBox[{"k", ",", "\[Beta]"}]]}], ")"}]}], "-", 
     SubscriptBox["f", 
      RowBox[{"\[Alpha]", ",", "\[Alpha]", ",", "\[Alpha]"}]]}], ",", 
    RowBox[{
     RowBox[{
      SubscriptBox["P", "\[Alpha]"], " ", 
      SubscriptBox["P", 
       RowBox[{"i", ",", "\[Alpha]"}]], " ", 
      SubscriptBox["P", 
       RowBox[{"j", ",", "\[Alpha]"}]], " ", 
      RowBox[{"(", 
       RowBox[{"1", "-", 
        SubscriptBox["P", 
         RowBox[{"k", ",", "\[Alpha]"}]]}], ")"}]}], "+", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"1", "-", 
        SubscriptBox["P", "\[Alpha]"]}], ")"}], " ", 
      RowBox[{"(", 
       RowBox[{"1", "-", 
        SubscriptBox["P", 
         RowBox[{"i", ",", "\[Beta]"}]]}], ")"}], " ", 
      RowBox[{"(", 
       RowBox[{"1", "-", 
        SubscriptBox["P", 
         RowBox[{"j", ",", "\[Beta]"}]]}], ")"}], " ", 
      SubscriptBox["P", 
       RowBox[{"k", ",", "\[Beta]"}]]}], "-", 
     SubscriptBox["f", 
      RowBox[{"\[Alpha]", ",", "\[Alpha]", ",", "\[Beta]"}]]}], ",", 
    RowBox[{
     RowBox[{
      SubscriptBox["P", "\[Alpha]"], " ", 
      SubscriptBox["P", 
       RowBox[{"i", ",", "\[Alpha]"}]], " ", 
      RowBox[{"(", 
       RowBox[{"1", "-", 
        SubscriptBox["P", 
         RowBox[{"j", ",", "\[Alpha]"}]]}], ")"}], " ", 
      SubscriptBox["P", 
       RowBox[{"k", ",", "\[Alpha]"}]]}], "+", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"1", "-", 
        SubscriptBox["P", "\[Alpha]"]}], ")"}], " ", 
      RowBox[{"(", 
       RowBox[{"1", "-", 
        SubscriptBox["P", 
         RowBox[{"i", ",", "\[Beta]"}]]}], ")"}], " ", 
      SubscriptBox["P", 
       RowBox[{"j", ",", "\[Beta]"}]], " ", 
      RowBox[{"(", 
       RowBox[{"1", "-", 
        SubscriptBox["P", 
         RowBox[{"k", ",", "\[Beta]"}]]}], ")"}]}], "-", 
     SubscriptBox["f", 
      RowBox[{"\[Alpha]", ",", "\[Beta]", ",", "\[Alpha]"}]]}], ",", 
    RowBox[{
     RowBox[{
      SubscriptBox["P", "\[Alpha]"], " ", 
      SubscriptBox["P", 
       RowBox[{"i", ",", "\[Alpha]"}]], " ", 
      RowBox[{"(", 
       RowBox[{"1", "-", 
        SubscriptBox["P", 
         RowBox[{"j", ",", "\[Alpha]"}]]}], ")"}], " ", 
      RowBox[{"(", 
       RowBox[{"1", "-", 
        SubscriptBox["P", 
         RowBox[{"k", ",", "\[Alpha]"}]]}], ")"}]}], "+", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"1", "-", 
        SubscriptBox["P", "\[Alpha]"]}], ")"}], " ", 
      RowBox[{"(", 
       RowBox[{"1", "-", 
        SubscriptBox["P", 
         RowBox[{"i", ",", "\[Beta]"}]]}], ")"}], " ", 
      SubscriptBox["P", 
       RowBox[{"j", ",", "\[Beta]"}]], " ", 
      SubscriptBox["P", 
       RowBox[{"k", ",", "\[Beta]"}]]}], "-", 
     SubscriptBox["f", 
      RowBox[{"\[Alpha]", ",", "\[Beta]", ",", "\[Beta]"}]]}], ",", 
    RowBox[{
     RowBox[{
      SubscriptBox["P", "\[Alpha]"], " ", 
      RowBox[{"(", 
       RowBox[{"1", "-", 
        SubscriptBox["P", 
         RowBox[{"i", ",", "\[Alpha]"}]]}], ")"}], " ", 
      SubscriptBox["P", 
       RowBox[{"j", ",", "\[Alpha]"}]], " ", 
      SubscriptBox["P", 
       RowBox[{"k", ",", "\[Alpha]"}]]}], "+", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"1", "-", 
        SubscriptBox["P", "\[Alpha]"]}], ")"}], " ", 
      SubscriptBox["P", 
       RowBox[{"i", ",", "\[Beta]"}]], " ", 
      RowBox[{"(", 
       RowBox[{"1", "-", 
        SubscriptBox["P", 
         RowBox[{"j", ",", "\[Beta]"}]]}], ")"}], " ", 
      RowBox[{"(", 
       RowBox[{"1", "-", 
        SubscriptBox["P", 
         RowBox[{"k", ",", "\[Beta]"}]]}], ")"}]}], "-", 
     SubscriptBox["f", 
      RowBox[{"\[Beta]", ",", "\[Alpha]", ",", "\[Alpha]"}]]}], ",", 
    RowBox[{
     RowBox[{
      SubscriptBox["P", "\[Alpha]"], " ", 
      RowBox[{"(", 
       RowBox[{"1", "-", 
        SubscriptBox["P", 
         RowBox[{"i", ",", "\[Alpha]"}]]}], ")"}], " ", 
      SubscriptBox["P", 
       RowBox[{"j", ",", "\[Alpha]"}]], " ", 
      RowBox[{"(", 
       RowBox[{"1", "-", 
        SubscriptBox["P", 
         RowBox[{"k", ",", "\[Alpha]"}]]}], ")"}]}], "+", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"1", "-", 
        SubscriptBox["P", "\[Alpha]"]}], ")"}], " ", 
      SubscriptBox["P", 
       RowBox[{"i", ",", "\[Beta]"}]], " ", 
      RowBox[{"(", 
       RowBox[{"1", "-", 
        SubscriptBox["P", 
         RowBox[{"j", ",", "\[Beta]"}]]}], ")"}], " ", 
      SubscriptBox["P", 
       RowBox[{"k", ",", "\[Beta]"}]]}], "-", 
     SubscriptBox["f", 
      RowBox[{"\[Beta]", ",", "\[Alpha]", ",", "\[Beta]"}]]}], ",", 
    RowBox[{
     RowBox[{
      SubscriptBox["P", "\[Alpha]"], " ", 
      RowBox[{"(", 
       RowBox[{"1", "-", 
        SubscriptBox["P", 
         RowBox[{"i", ",", "\[Alpha]"}]]}], ")"}], " ", 
      RowBox[{"(", 
       RowBox[{"1", "-", 
        SubscriptBox["P", 
         RowBox[{"j", ",", "\[Alpha]"}]]}], ")"}], " ", 
      SubscriptBox["P", 
       RowBox[{"k", ",", "\[Alpha]"}]]}], "+", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"1", "-", 
        SubscriptBox["P", "\[Alpha]"]}], ")"}], " ", 
      SubscriptBox["P", 
       RowBox[{"i", ",", "\[Beta]"}]], " ", 
      SubscriptBox["P", 
       RowBox[{"j", ",", "\[Beta]"}]], " ", 
      RowBox[{"(", 
       RowBox[{"1", "-", 
        SubscriptBox["P", 
         RowBox[{"k", ",", "\[Beta]"}]]}], ")"}]}], "-", 
     SubscriptBox["f", 
      RowBox[{"\[Beta]", ",", "\[Beta]", ",", "\[Alpha]"}]]}], ",", 
    RowBox[{
     RowBox[{
      SubscriptBox["P", "\[Alpha]"], " ", 
      RowBox[{"(", 
       RowBox[{"1", "-", 
        SubscriptBox["P", 
         RowBox[{"i", ",", "\[Alpha]"}]]}], ")"}], " ", 
      RowBox[{"(", 
       RowBox[{"1", "-", 
        SubscriptBox["P", 
         RowBox[{"j", ",", "\[Alpha]"}]]}], ")"}], " ", 
      RowBox[{"(", 
       RowBox[{"1", "-", 
        SubscriptBox["P", 
         RowBox[{"k", ",", "\[Alpha]"}]]}], ")"}]}], "+", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"1", "-", 
        SubscriptBox["P", "\[Alpha]"]}], ")"}], " ", 
      SubscriptBox["P", 
       RowBox[{"i", ",", "\[Beta]"}]], " ", 
      SubscriptBox["P", 
       RowBox[{"j", ",", "\[Beta]"}]], " ", 
      SubscriptBox["P", 
       RowBox[{"k", ",", "\[Beta]"}]]}], "-", 
     SubscriptBox["f", 
      RowBox[{"\[Beta]", ",", "\[Beta]", ",", "\[Beta]"}]]}]}], 
   "}"}]}]}], "Input",
 CellChangeTimes->{{3.835533876770286*^9, 3.8355339329426117`*^9}, 
   3.835534076654258*^9},
 CellLabel->"In[13]:=",ExpressionUUID->"49bf1480-9166-4295-8b22-148e76e9e606"],

Cell[BoxData[{
 RowBox[{"Clear", "[", "DataGroundTruth", "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"DataGroundTruth", "[", 
   RowBox[{"data_List", ",", "label_", ",", "classifier_Integer"}], "]"}], ":=", 
  RowBox[{"Module", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"withoutHeaderData", "=", 
       RowBox[{"Rest", "@", "data"}]}], ",", "byLabel"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"byLabel", "=", 
      RowBox[{"GroupBy", "[", 
       RowBox[{"withoutHeaderData", ",", 
        RowBox[{
         RowBox[{"#", "[", 
          RowBox[{"[", "5", "]"}], "]"}], "&"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"Map", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"#", "[", 
               RowBox[{"[", 
                RowBox[{"{", 
                 RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "7"}], "}"}],
                 "]"}], "]"}], "&"}], ",", "byLabel", ",", 
             RowBox[{"{", "2", "}"}]}], "]"}], "//", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"#", "[", "label", "]"}], "&"}]}], "//", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Map", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"#", "[", 
               RowBox[{"[", 
                RowBox[{"{", 
                 RowBox[{"classifier", ",", 
                  RowBox[{"-", "1"}]}], "}"}], "]"}], "]"}], "&"}], ",", 
             "#"}], "]"}], "&"}]}], "//", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"GroupBy", "[", 
           RowBox[{"#", ",", "First"}], "]"}], "&"}]}], "//", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Map", "[", 
          RowBox[{"Last", ",", "#", ",", 
           RowBox[{"{", "2", "}"}]}], "]"}], "&"}]}], "//", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Total", "/@", "#"}], "&"}]}], "//", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"#", "[", "label", "]"}], "/", 
        RowBox[{"Total", "@", "#"}]}], "&"}]}]}]}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"DataGroundTruth", "[", 
   RowBox[{"data_Association", ",", "label_", ",", "classifier_Integer"}], 
   "]"}], ":=", 
  RowBox[{"Module", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"data", "[", "label", "]"}], "//", "Normal"}], "//", 
        RowBox[{
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               RowBox[{"#", "[", 
                RowBox[{"[", "1", "]"}], "]"}], "[", 
               RowBox[{"[", "classifier", "]"}], "]"}], "\[Rule]", 
              RowBox[{"#", "[", 
               RowBox[{"[", "2", "]"}], "]"}]}], ")"}], "&"}], ",", "#"}], 
          "]"}], "&"}]}], "//", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Map", "[", 
         RowBox[{"Association", ",", "#"}], "]"}], "&"}]}], "//", 
      RowBox[{
       RowBox[{"Merge", "[", 
        RowBox[{"#", ",", "Total"}], "]"}], "&"}]}], "//", 
     RowBox[{
      RowBox[{
       RowBox[{"#", "[", "label", "]"}], "/", 
       RowBox[{"Total", "@", "#"}]}], "&"}]}]}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.807182845243155*^9, 3.807182901356949*^9}, {
  3.8071829723464813`*^9, 3.807183097031598*^9}, {3.807183210631174*^9, 
  3.807183295919416*^9}, {3.80718336525491*^9, 3.807183385091733*^9}, {
  3.807183441977825*^9, 3.807183628035429*^9}, {3.807183821732211*^9, 
  3.807183822088316*^9}, {3.8082127230780277`*^9, 3.808212768014299*^9}, {
  3.808212799475589*^9, 3.808212910158126*^9}, {3.808213028462883*^9, 
  3.808213046755719*^9}, {3.808213094000353*^9, 3.808213105766705*^9}},
 CellLabel->"In[15]:=",ExpressionUUID->"3c6360e4-e986-4316-8e38-9da08ebf810d"],

Cell[BoxData[{
 RowBox[{"Clear", "[", "VotingFrequenciesData", 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"VotingFrequenciesData", "[", 
   RowBox[{"data_List", ",", 
    RowBox[{"classifiers", ":", 
     RowBox[{"{", 
      RowBox[{"_Integer", ",", "_Integer", ",", "_Integer"}], "}"}]}]}], 
   "]"}], ":=", 
  RowBox[{"Module", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"withoutHeaderData", "=", 
       RowBox[{"Rest", "@", "data"}]}], ",", " ", "eventCounts"}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"eventCounts", "=", 
      RowBox[{
       RowBox[{
        RowBox[{"GroupBy", "[", 
         RowBox[{"withoutHeaderData", ",", 
          RowBox[{
           RowBox[{"#", "[", 
            RowBox[{"[", "classifiers", "]"}], "]"}], "&"}]}], "]"}], "//", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Map", "[", 
          RowBox[{"Last", ",", "#", ",", 
           RowBox[{"{", "2", "}"}]}], "]"}], "&"}]}], "//", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Total", "/@", "#"}], "&"}]}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"KeyMap", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"Subscript", "[", 
            RowBox[{"f", ",", 
             RowBox[{"Sequence", "@@", "#"}]}], "]"}], "/.", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"0", "\[Rule]", "\[Alpha]"}], ",", 
             RowBox[{"1", "\[Rule]", "\[Beta]"}]}], "}"}]}], ")"}], "&"}], 
        ",", "eventCounts"}], "]"}], "//", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"#", "/", 
        RowBox[{"(", 
         RowBox[{"Total", "@", "#"}], ")"}]}], "&"}]}]}]}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"VotingFrequenciesData", "[", 
   RowBox[{"data_Association", ",", 
    RowBox[{"classifiers", ":", 
     RowBox[{"{", 
      RowBox[{"_Integer", ".."}], "}"}]}]}], "]"}], ":=", 
  RowBox[{"Module", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", "eventCounts", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"eventCounts", "=", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"Values", "@", "data"}], "//", 
             RowBox[{
              RowBox[{"Merge", "[", 
               RowBox[{"#", ",", "Identity"}], "]"}], "&"}]}], "//", 
            RowBox[{
             RowBox[{"Map", "[", 
              RowBox[{"Total", ",", "#"}], "]"}], "&"}]}], "//", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"KeyValueMap", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"#1", "[", 
                  RowBox[{"[", "classifiers", "]"}], "]"}], "\[Rule]", "#2"}],
                 ")"}], "&"}], ",", "#"}], "]"}], "&"}]}], "//", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"GroupBy", "[", 
            RowBox[{"#", ",", "First"}], "]"}], "&"}]}], "//", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Map", "[", 
           RowBox[{"Last", ",", "#", ",", 
            RowBox[{"{", "2", "}"}]}], "]"}], "&"}]}], "//", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Map", "[", 
          RowBox[{"Total", ",", "#"}], "]"}], "&"}]}], "//", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"KeyMap", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Subscript", "[", 
            RowBox[{"f", ",", 
             RowBox[{"Sequence", "@@", 
              RowBox[{"Map", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"If", "[", 
                  RowBox[{
                   RowBox[{"#", "\[Equal]", "0"}], ",", "\[Alpha]", ",", 
                   "\[Beta]"}], "]"}], "&"}], ",", "#"}], "]"}]}]}], "]"}], 
           "&"}], ",", "#"}], "]"}], "&"}]}], "//", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"#", "/", 
        RowBox[{"Total", "@", "#"}]}], "&"}]}]}]}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.807181404960108*^9, 3.8071816260254803`*^9}, {
  3.807181775037321*^9, 3.8071819899529867`*^9}, {3.807182480181386*^9, 
  3.807182492594146*^9}, {3.808211945161942*^9, 3.808211998639532*^9}, {
  3.808212029753559*^9, 3.8082120628489857`*^9}, {3.80821213963595*^9, 
  3.808212144590259*^9}, {3.808212207990025*^9, 3.808212224187545*^9}, {
  3.808212278158141*^9, 3.808212302529233*^9}, {3.808212348169942*^9, 
  3.808212373621965*^9}, {3.8082124045594873`*^9, 3.808212489999778*^9}, {
  3.808212523883882*^9, 3.8082125297665253`*^9}, {3.811059790704975*^9, 
  3.811059791036599*^9}},
 CellLabel->"In[18]:=",ExpressionUUID->"3673bd68-42ff-44fd-9bad-a0ef88607cf7"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Queries", "Subsection",
 CellChangeTimes->{{3.8355341922366*^9, 
  3.8355341979967403`*^9}},ExpressionUUID->"4d616c51-7942-4f54-b1e7-\
a4ae50e28988"],

Cell[BoxData[{
 RowBox[{"Clear", "[", "IsARealSolutionQ", "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"IsARealSolutionQ", "[", "sols_", "]"}], ":=", 
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"Length", "@", "sols"}], ">", "0"}], ",", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"First", "@", "sols"}], "//", 
       RowBox[{
        RowBox[{"Map", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"#", "[", 
            RowBox[{"[", "2", "]"}], "]"}], "&"}], ",", "#"}], "]"}], "&"}]}],
       "//", 
      RowBox[{
       RowBox[{"Cases", "[", 
        RowBox[{"#", ",", "_Complex"}], "]"}], "&"}]}], "//", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "@", "#"}], ">", "0"}], ",", "False", ",", 
        "True"}], "]"}], "&"}]}], ",", "\[IndentingNewLine]", "False"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"Clear", "[", "IsAPhysicalSolutionQ", "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"IsAPhysicalSolutionQ", "[", "sols_", "]"}], ":=", 
  RowBox[{"And", "[", 
   RowBox[{
    RowBox[{"IsARealSolutionQ", "[", "sols", "]"}], ",", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"First", "@", "sols"}], "//", 
       RowBox[{
        RowBox[{"Map", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"#", "[", 
            RowBox[{"[", "2", "]"}], "]"}], "&"}], ",", "#"}], "]"}], "&"}]}],
       "//", 
      RowBox[{
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{"0", "<", "#", "<", "1"}], ")"}], "&"}], ",", "#"}], "]"}],
        "&"}]}], "//", 
     RowBox[{
      RowBox[{"And", "@@", "#"}], "&"}]}]}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.8350928121514053`*^9, 3.835092920531033*^9}, {
  3.8350933756245117`*^9, 3.835093450813229*^9}, {3.8350935388282127`*^9, 
  3.835093590744753*^9}, {3.835093751824506*^9, 3.835093767553853*^9}},
 CellLabel->"In[21]:=",ExpressionUUID->"6bda0d5d-444e-4399-884d-14a13bd80a10"],

Cell[BoxData[{
 RowBox[{"Clear", "[", "PickHighestAverageAccuracy", 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"PickHighestAverageAccuracy", "[", "trioSols_", "]"}], ":=", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Cases", "[", 
             RowBox[{"#", ",", 
              RowBox[{"HoldPattern", "[", 
               RowBox[{
                SubscriptBox["P", 
                 RowBox[{"_", ",", "_"}]], "->", "_"}], "]"}]}], "]"}], "&"}],
            ",", "trioSols"}], "]"}], "//", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Values", "/@", "#"}], "&"}]}], " ", "//", 
        RowBox[{
         RowBox[{"Map", "[", 
          RowBox[{"Mean", ",", "#"}], "]"}], "&"}]}], "//", 
       RowBox[{
        RowBox[{"MapIndexed", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"{", 
            RowBox[{"#1", ",", 
             RowBox[{"#2", "[", 
              RowBox[{"[", "1", "]"}], "]"}]}], "}"}], "&"}], ",", "#"}], 
         "]"}], "&"}]}], "//", "Sort"}], "//", "Reverse"}], "//", 
    RowBox[{
     RowBox[{"trioSols", "[", 
      RowBox[{"[", 
       RowBox[{"Last", "@", 
        RowBox[{"First", "@", "#"}]}], "]"}], "]"}], "&"}]}]}], 
  " "}], "\[IndentingNewLine]", 
 RowBox[{"Clear", "[", "PickHighestPrevalence", 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"PickHighestPrevalence", "[", "trioSols_", "]"}], ":=", 
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"Length", "@", "trioSols"}], "==", "2"}], ",", 
    RowBox[{
     RowBox[{
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"(", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"trioSols", "[", 
               RowBox[{"[", "#", "]"}], "]"}], "//", "Association"}], "//", 
             RowBox[{
              RowBox[{"#", "[", 
               SubscriptBox["P", "\[Alpha]"], "]"}], "&"}]}], ",", "#"}], 
           "}"}], ")"}], "&"}], ",", 
        RowBox[{"Range", "@", "2"}]}], "]"}], "//", "\[IndentingNewLine]", 
      "Sort"}], "//", 
     RowBox[{
      RowBox[{"trioSols", "[", 
       RowBox[{"[", 
        RowBox[{"Last", "@", 
         RowBox[{"Last", "@", "#"}]}], "]"}], "]"}], "&"}]}], ",", 
    "Nothing"}], "]"}]}]}], "Input",
 CellLabel->"In[25]:=",ExpressionUUID->"e228aa3d-e6a4-4188-8805-cd74bdf4ca8a"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["A single evaluation", "Section",
 CellChangeTimes->{{3.835530402624702*^9, 
  3.835530433965835*^9}},ExpressionUUID->"b0b902fe-3f39-4ef8-94b3-\
f0c957dc9037"],

Cell["\<\
The first demonstration will evaluate a single test sample. This will \
introduce the reader to the steps necessary to carry out a purely algebraic \
evaluation of noisy binary classifiers when one does not have the ground \
truth. It will also make clear the design choices we make in carrying out an \
experimental demonstration.\
\>", "Text",
 CellChangeTimes->{{3.835530442019196*^9, 
  3.8355306027885523`*^9}},ExpressionUUID->"acb67ab6-9a49-4b13-9a32-\
a83e9ccc5c60"],

Cell[CellGroupData[{

Cell["\<\
1a. Train an ensemble of classifiers trying to make them as error independent \
as possible\
\>", "Subsection",
 CellChangeTimes->{{3.8355306137660007`*^9, 3.835530652990533*^9}, 
   3.835535722167315*^9},ExpressionUUID->"212f373d-9049-4fae-b13d-\
fd2fe9fe68d8"],

Cell["\<\
The algebra we will use in this demonstration is the simplest case possible - \
the case of classifiers that are making errors independently of each other.  \
Perfect independence at all times and for all samples would be nearly \
impossible to accomplish in the wild. The simpler task we want to accomplish \
in this demonstration notebook is to design classifiers that are nearly \
independent as possible.
This is accomplished here by following three design criteria:
1. Use disjoint feature sets for each classifier in the ensemble.
2. Use different algorithms for each classifier.
3. Try to use disjoint training sets for the classifiers.
Criteria 1 and 2 are easy enough to carry out. Implementing criteria 3 is \
harder because of the small dataset sizes. We partially carry it out by \
selecting random records from a common training pool so that the shared \
training records can be minimized.\
\>", "Text",
 CellChangeTimes->{{3.835530659424221*^9, 3.835530978500164*^9}, {
  3.835531013056943*^9, 
  3.8355310521808357`*^9}},ExpressionUUID->"170e6e25-1934-4b8f-8727-\
c0006ec1feaa"],

Cell["\<\
This features 4 way split was found experimentally by scanning for partitions \
that resulted in classifiers that returned sensible algebraic answers. That \
test is discussed below in more detail and is one of the strengths of the \
algebraic approach - it can fail to return sensible answers. For now, take \
this as our preferred candidate for making classifiers that are independent \
enough on this dataset. You, of course, are free to experiment with our \
approach and perhaps find a much better partition of features that will get \
the classifiers closer to error independence.\
\>", "Text",
 CellChangeTimes->{{3.835531187971395*^9, 3.835531289782279*^9}, {
  3.83553146447127*^9, 
  3.8355315406923*^9}},ExpressionUUID->"554d3299-e381-457f-9b81-5f6646dc94fd"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"classifiersFeatures", "=", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"2", ",", "15", ",", "5", ",", "7"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"3", ",", "17", ",", "9", ",", "11"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"20", ",", "4", ",", "1", ",", "8"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"12", ",", "16", ",", "13", ",", "19"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"14", ",", "6", ",", "18", ",", "10"}], "}"}]}], 
   "}"}]}]], "Input",
 CellChangeTimes->{
  3.8356158440258713`*^9, {3.835619791508194*^9, 3.835619798037689*^9}},
 CellLabel->"In[29]:=",ExpressionUUID->"a087c21c-55da-45fd-800b-7497dec11eeb"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"2", ",", "15", ",", "5", ",", "7"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "17", ",", "9", ",", "11"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"20", ",", "4", ",", "1", ",", "8"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"12", ",", "16", ",", "13", ",", "19"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"14", ",", "6", ",", "18", ",", "10"}], "}"}]}], "}"}]], "Output",\

 CellChangeTimes->{3.835531545894711*^9, 3.835615845830676*^9, 
  3.83561988831739*^9, 3.8356844887888107`*^9, 3.835851629151807*^9},
 CellLabel->"Out[29]=",ExpressionUUID->"94cce595-3989-4491-ad46-72dffd8e29bb"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"trainTestSplit", "=", 
    RowBox[{"Map", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"TakeDrop", "[", 
        RowBox[{
         RowBox[{"RandomSample", "@", "#"}], ",", "1000"}], "]"}], "&"}], ",",
       "benchmarkData"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
   "Each", " ", "classifier", " ", "is", " ", "now", " ", "trained", " ", 
    "and", " ", "tested", " ", "only", " ", "using", " ", "its", " ", 
    "specific", " ", "features"}], " ", "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"classifiersData", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"#", "[", 
         RowBox[{"[", "features", "]"}], "]"}], "&"}], ",", "trainTestSplit", 
       ",", 
       RowBox[{"{", "3", "}"}]}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"features", ",", "classifiersFeatures"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"classifierTypes", " ", "=", " ", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\"\<NeuralNetwork\>\"", ",", 
      RowBox[{"\"\<NetworkDepth\>\"", "\[Rule]", "5"}]}], "}"}], ",", 
    "\"\<GradientBoostedTrees\>\"", ",", "\"\<NaiveBayes\>\"", ",", 
    "\"\<LogisticRegression\>\"", ",", "\"\<SupportVectorMachine\>\""}], 
   "}"}]}], "\[IndentingNewLine]", 
 RowBox[{"classifiers", " ", "=", " ", 
  RowBox[{"TrainClassifiers", "[", 
   RowBox[{
   "classifiersData", ",", "classifierTypes", ",", "1000", ",", "800"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "prevError", ",", "alphaRMSE", ",", " ", "betaRMSE", ",", " ", "gt", ",", 
     " ", "avgSol"}], "}"}], "=", 
   RowBox[{"AlgebraicallyEvaluateClassifiers", "[", 
    RowBox[{"classifiers", ",", "classifiersData"}], "]"}]}], ";"}]}], "Input",\

 CellChangeTimes->{{3.835531556518676*^9, 3.8355317266181192`*^9}, {
   3.835531758291831*^9, 3.8355319081755657`*^9}, {3.8355344642587347`*^9, 
   3.835534465600046*^9}, {3.835615896657681*^9, 3.8356158976969757`*^9}, 
   3.835615960292075*^9, {3.8356172301871853`*^9, 3.835617259740654*^9}, {
   3.83561966907199*^9, 3.835619690006781*^9}, {3.835619770004086*^9, 
   3.835619821473947*^9}, {3.835619879642108*^9, 3.8356199198661623`*^9}, {
   3.835620069998719*^9, 3.8356200801578293`*^9}, {3.835620254133431*^9, 
   3.835620255929132*^9}, {3.835683895854878*^9, 3.83568392748489*^9}, {
   3.8356840704952383`*^9, 3.8356840785020638`*^9}, {3.835684129922433*^9, 
   3.835684131489992*^9}, {3.835851674385324*^9, 3.835851675574074*^9}, {
   3.835852076325638*^9, 3.835852107737564*^9}},
 CellLabel->"In[64]:=",ExpressionUUID->"a3c50d19-6fb8-40ee-8910-1e78aa507d9f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\<\"NeuralNetwork\"\>", ",", 
     RowBox[{"\<\"NetworkDepth\"\>", "\[Rule]", "5"}]}], "}"}], 
   ",", "\<\"GradientBoostedTrees\"\>", ",", "\<\"NaiveBayes\"\>", 
   ",", "\<\"LogisticRegression\"\>", ",", "\<\"SupportVectorMachine\"\>"}], 
  "}"}]], "Output",
 CellChangeTimes->{
  3.8355319211471977`*^9, 3.835532766404244*^9, 3.8355344665799093`*^9, 
   3.835615920115744*^9, 3.835615985414844*^9, 3.83561727021421*^9, 
   3.835617466557085*^9, 3.835620124286386*^9, 3.835620285416259*^9, 
   3.8356205718633633`*^9, 3.835620732679596*^9, 3.8356209254137907`*^9, 
   3.8356222391582212`*^9, 3.8356237631850557`*^9, 3.835623829951507*^9, 
   3.835624032183255*^9, {3.8356841134726467`*^9, 3.8356841324644423`*^9}, 
   3.835684302493442*^9, 3.835684391273096*^9, 3.835684492507579*^9, 
   3.8356847729257383`*^9, 3.835684902270586*^9, 3.835684964674376*^9, 
   3.83568505663282*^9, 3.835685517118432*^9, 3.835686104098469*^9, 
   3.835851635191372*^9, 3.835851679794566*^9, 3.835851984200872*^9, 
   3.835852119185182*^9, 3.835853034306705*^9},
 CellLabel->"Out[66]=",ExpressionUUID->"9b7d09af-e7f5-443b-9603-0c8096db15ba"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   InterpretationBox[
    RowBox[{
     TagBox["ClassifierFunction",
      "SummaryHead"], "[", 
     DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
      "Ready"}, 
      TemplateBox[{
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]],
                 ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              GraphicsBox[{{
                 PointSize[0.13], 
                 GrayLevel[0.45], 
                 
                 PointBox[{{0.9821769431797024, -0.440194219686987}, {
                  1.1339776261519132`, 0.8056918676854272}, {
                  0.5279892326667741, 0.6574306661126254}, {
                  0.022147046479890797`, 1.4937877187998898`}}], 
                 GrayLevel[0.7], 
                 
                 PointBox[{{-0.9815166384819979, 
                  0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                 GrayLevel[0.55], 
                 AbsoluteThickness[1.5], 
                 LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
               Axes -> {False, False}, AxesLabel -> {None, None}, 
                AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                  AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                Frame -> {{True, True}, {True, True}}, 
                FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                Directive[
                  Thickness[Tiny], 
                  GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}},
                 GridLines -> {None, None}, 
                LabelStyle -> {FontFamily -> "Arial"}, 
                Method -> {"ScalingFunctions" -> None}, 
                PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
               ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}], Frame -> True, FrameTicks -> None, 
               FrameStyle -> Directive[
                 Opacity[0.5], 
                 Thickness[Tiny], 
                 RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
               GrayLevel[0.94]], 
              GridBox[{{
                 RowBox[{
                   TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    TemplateBox[{"\"NumericalVector\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (length: \"", "4", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    
                    TemplateBox[{",", "\",\"", "0", "1"}, 
                    "RowWithSeparators"], "SummaryItem"]}]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
            AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]],
                 ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              GraphicsBox[{{
                 PointSize[0.13], 
                 GrayLevel[0.45], 
                 
                 PointBox[{{0.9821769431797024, -0.440194219686987}, {
                  1.1339776261519132`, 0.8056918676854272}, {
                  0.5279892326667741, 0.6574306661126254}, {
                  0.022147046479890797`, 1.4937877187998898`}}], 
                 GrayLevel[0.7], 
                 
                 PointBox[{{-0.9815166384819979, 
                  0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                 GrayLevel[0.55], 
                 AbsoluteThickness[1.5], 
                 LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
               Axes -> {False, False}, AxesLabel -> {None, None}, 
                AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                  AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                Frame -> {{True, True}, {True, True}}, 
                FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                Directive[
                  Thickness[Tiny], 
                  GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}},
                 GridLines -> {None, None}, 
                LabelStyle -> {FontFamily -> "Arial"}, 
                Method -> {"ScalingFunctions" -> None}, 
                PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
               ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}], Frame -> True, FrameTicks -> None, 
               FrameStyle -> Directive[
                 Opacity[0.5], 
                 Thickness[Tiny], 
                 RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
               GrayLevel[0.94]], 
              GridBox[{{
                 RowBox[{
                   TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    TemplateBox[{"\"NumericalVector\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (length: \"", "4", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    
                    TemplateBox[{",", "\",\"", "0", "1"}, 
                    "RowWithSeparators"], "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["\"NeuralNetwork\"", "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                   "\"Number of training examples: \"", 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox["1600", "SummaryItem"]}]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
            AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open$$], ImageSize -> Automatic]},
       "SummaryPanel"],
      DynamicModuleValues:>{}], "]"}],
    ClassifierFunction[
     Association[
     "ExampleNumber" -> 1600, "ClassNumber" -> 2, "Input" -> 
      Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
          Association[
          "Input" -> Association[
            "f1" -> Association["Type" -> "NumericalVector", "Length" -> 4]], 
           "Output" -> 
           Association[
            "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]], 
           "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
             Association["Processors" -> {
                MachineLearning`MLProcessor["List"], 
                MachineLearning`MLProcessor["WrapMLDataset", 
                 Association[
                 "FeatureTypes" -> {"NumericalVector"}, 
                  "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                  "ExampleWeights" -> Automatic, "RawExample" -> 
                  Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                  False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
           "Perfect", "StructurePreserving" -> False, "Missing" -> 
           "Allowed"]], "Processor" -> MachineLearning`MLProcessor["Sequence", 
          Association[
          "Input" -> Association[
            "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]], 
           "Output" -> 
           Association[
            "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]], 
           "Processors" -> {
             MachineLearning`MLProcessor["SynthesizeMissingValues", 
              Association[
              "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
               "StructurePreserving" -> True, "Input" -> 
               Association[
                "f1" -> Association[
                  "Type" -> "NumericalVector", "Weight" -> 1]], 
               "Distribution" -> LearnedDistribution[
                 Association[
                 "ExampleNumber" -> 1600, "Preprocessor" -> 
                  MachineLearning`MLProcessor["ToMLDataset", 
                    Association[
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 4]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Preprocessor" -> MachineLearning`MLProcessor["Identity"],
                     "ScalarFeature" -> True, "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"]], 
                  "Processor" -> MachineLearning`MLProcessor["Identity"], 
                  "PerformanceGoal" -> "DirectTraining", "BatchProcessing" -> 
                  Automatic, "Model" -> 
                  Association[
                   "RotationMatrix" -> {{-0.45941726279118955`, \
-0.26997168919644055`, 0.6448514718188652, 
                    0.5479212032536381}, {-0.46857144581397764`, \
-0.10606173116805247`, 
                    0.31669320292132136`, -0.8178613113314932}, \
{-0.505827934379871, -0.5349480119597864, -0.6693039460877974, 
                    0.10000476514931067`}, {-0.5599238159055596, 
                    0.7935343853383598, -0.18948409502589178`, 
                    0.14451393496700274`}}, 
                    "Precisions" -> {0.5613820166638076, 0.9395635125335461, 
                    1.0106223191427646`, 1.081617163335553}, "NoisePrecision" -> 
                    None, "Processor" -> MachineLearning`MLProcessor["Center", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {-0.035138312499999984`, 0.014007500000000004`, 
                    0.0183660625, 0.021674187499999994`}, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Version" -> {12.3, 1}, "ID" -> 2580788735436893886]], 
                    "PostProcessor" -> 
                    MachineLearning`MLProcessor["FirstValues", 
                    Association[
                    "Info" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1], "Key" -> 
                    "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
                    False, "Missing" -> "Allowed"]], "Method" -> 
                    "Multinormal", "Options" -> 
                    Association[
                    "CovarianceType" -> 
                    Association[
                    "Value" -> "Full", "Options" -> Association[]], 
                    "IntrinsicDimension" -> 
                    Association["Value" -> 4, "Options" -> Association[]]]], 
                  "TrainingInformation" -> 
                  Association["Configurations" -> Dataset[
                    Association[
                    Association[
                    "Value" -> "Multinormal", "Options" -> 
                    Association[
                    "CovarianceType" -> Association["Value" -> "Full"], 
                    "IntrinsicDimension" -> 
                    Association["Value" -> "Heuristic"]], "NaiveImputer" -> 
                    MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {-0.03513831249999992, 0.014007500000000039`, 
                    0.018366062499999992`, 0.021674187499999994`}, 
                    "StandardDeviation" -> {1.0689115509659357`, 
                    1.0586505915521653`, 1.101296517089969, 
                    1.1329192695929242`}, "Method" -> "NaiveSampler", 
                    "VectorLength" -> 4, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector", "Version" -> {12.3, 1}, "ID" -> 
                    4747808072524423015]], "EMIterations" -> 1] -> 
                    Association[]], 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], 
                    Association[]], "BestModelInformation" -> Dataset[
                    Association[
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]], 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], 
                    Association[]]], "NaiveImputer" -> 
                  MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {-0.03513831249999992, 0.014007500000000039`, 
                    0.018366062499999992`, 0.021674187499999994`}, 
                    "StandardDeviation" -> {1.0689115509659357`, 
                    1.0586505915521653`, 1.101296517089969, 
                    1.1329192695929242`}, "Method" -> "NaiveSampler", 
                    "VectorLength" -> 4, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector", "Version" -> {12.3, 1}, "ID" -> 
                    4747808072524423015]], "InputDimension" -> 0, 
                  "OutputDimension" -> 4, "Log" -> 
                  Association["Example" -> MachineLearning`MLDataset[
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1, 
                    "Values" -> {{1.0175, -0.6012, 1.1306, 0.3387}}, "ID" -> 
                    3791095496786132862]], 
                    Association[
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False]], 
                    "TrainingTime" -> 0.064204, "MaxTrainingMemory" -> 370120,
                     "DataMemory" -> 58256, "FunctionMemory" -> 29624, 
                    "LanguageVersion" -> {12.3, 1}, "Date" -> 
                    DateObject[{
                    2021, 7, 21, 6, 43, 54.364766`8.487892497487506}, 
                    "Instant", "Gregorian", -4.], "ProcessorCount" -> 8, 
                    "ProcessorType" -> "x86-64", "OperatingSystem" -> 
                    "MacOSX", "SystemWordLength" -> 64, "Evaluations" -> {}], 
                  "LogPDFDistribution" -> 
                  MachineLearning`TailedQuantileDistribution[
                    Association[
                    "Quantiles" -> {-1.7009357368367042`, \
-1.7009357368367042`, -1.5165617211767581`, -1.5105364607300436`, \
-1.4161146423082784`, -1.351388155207761, -1.3019037056336356`, \
-1.2983836911577733`, -1.2932860622999351`, -1.1377053825341852`, \
-1.0970873822577358`}, "LeftBoundary" -> -1.5165617211767581`, "LeftScale" -> 
                    0.09218700782997302, "LeftTailNorm" -> 0.2]], "Entropy" -> 
                  Around[5.449561176057125, 0.22968047255532717`], 
                  "EntropySampleSize" -> 10]], "Output" -> 
               Association[
                "f1" -> Association[
                  "Type" -> "NumericalVector", "Weight" -> 1]], 
               "EvaluationStrategy" -> "ModeFinding", "Version" -> {12.3, 1}, 
               "ID" -> 895810465636885430]], 
             MachineLearning`MLProcessor["Standardize", 
              Association[
              "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
               "StructurePreserving" -> True, "Input" -> 
               Association[
                "f1" -> Association[
                  "Type" -> "NumericalVector", "Weight" -> 1]], 
               "Mean" -> {-0.03513831249999992, 0.014007500000000039`, 
                0.018366062499999992`, 0.021674187499999994`}, 
               "StandardDeviation" -> {1.0689115509659357`, 
                1.0586505915521653`, 1.101296517089969, 1.1329192695929242`}, 
               "Output" -> 
               Association[
                "f1" -> Association[
                  "Type" -> "NumericalVector", "Weight" -> 1]], 
               "Version" -> {12.3, 1}, "ID" -> 7538341723023124350]]}, 
           "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
           "Missing" -> "Imputed"]]], "Output" -> 
      Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
          Association[
          "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
           "Output" -> 
           Association[
            "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
           "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
             Association["Processors" -> {
                MachineLearning`MLProcessor["List"], 
                MachineLearning`MLProcessor["WrapMLDataset", 
                 Association[
                 "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                  "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                  Automatic, "RawExample" -> 
                  Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                  False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
           "Perfect", "StructurePreserving" -> False, "Missing" -> 
           "Allowed"]], "Processor" -> MachineLearning`MLProcessor["Sequence", 
          Association[
          "Input" -> Association[
            "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
           "Output" -> 
           Association[
            "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
           "Processors" -> {
             MachineLearning`MLProcessor["ToVector", 
              Association[
              "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
               "StructurePreserving" -> True, "Input" -> 
               Association[
                "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
               "Output" -> 
               Association[
                "f1" -> Association[
                  "Type" -> "NominalVector", "Weight" -> 1]], 
               "Version" -> {12.3, 1}, "ID" -> 7385217781795203165]], 
             MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
              Association[
              "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
               "StructurePreserving" -> True, "Input" -> 
               Association[
                "f1" -> Association[
                  "Type" -> "NominalVector", "Weight" -> 1]], "Index" -> {
                 Association[0 -> 1, 1 -> 2]}, "MissingCode" -> 0, 
               "Version" -> {12.3, 1}, "ID" -> 9072788647140281776, "Output" -> 
               Association[
                "f1" -> Association[
                  "Type" -> "NominalVector", "Weight" -> 1]]]], 
             MachineLearning`MLProcessor["FromVector", 
              Association[
              "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
               "StructurePreserving" -> True, "Input" -> 
               Association[
                "f1" -> Association[
                  "Type" -> "NominalVector", "Weight" -> 1, 
                   "SetSize" -> {2}]], "Output" -> 
               Association[
                "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
               "Version" -> {12.3, 1}, "ID" -> 8667766357427704565]], 
             MachineLearning`MLProcessor["FirstValues", 
              Association[
              "Info" -> Association[
                "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2], "Key" -> 
               "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
               False, "Missing" -> "Allowed"]]}, "Invertibility" -> "Perfect",
            "StructurePreserving" -> False, "Missing" -> "Allowed"]], 
        "ProbabilityPostprocessor" -> Identity, "Name" -> "class", "Marginal" -> 
        Association[0 -> 0.5, 1 -> 0.5]], "LabelSplitter" -> 
      MachineLearning`MLProcessor["FeatureLabelSplit", 
        Association[
        "Processor" -> MachineLearning`MLProcessor["AssociationSplit"], 
         "PreferLabeled" -> True, "KeepLabelsFormat" -> False]], 
      "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
      "Prior" -> Automatic, "Utility" -> 
      SparseArray[
       Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
      "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
      Automatic, "BatchProcessing" -> Automatic, "Model" -> 
      Association["Method" -> "NeuralNetwork", "Network" -> NetChain[
          Association[
          "Type" -> "Chain", "Nodes" -> 
           Association[
            "1" -> Association[
              "Type" -> "Linear", "Arrays" -> 
               Association["Weights" -> CompressedData["
1:eJwViXtMU3cYQAslFe0wLfGaUmERN5Mp00E7xUjv91kBcZXRUHDAClpkNYA1
pbiyuQXJzNgYKEOGD5jIgKHAAioiqOF+P4PxQcNLcI5sIr7KJhXtdAg+IMM/
zklOTuA2q2G7p0gk2uU9K0PqF9rs7NTdcZI3YU61qFWWN1M1i9cs0vom3r7A
DVlWM+t66o3VH6VBri6aPzAZiKWhHDvn9GFfnRjnaxae0cwYuzRh8+/AtmOH
4MytH+km1w/cMmRt4ZmU71vMKq8E45wpCfo+11CX6DR86fbE3yvXY54+FI4P
rmKXKAaOGhoEWeMIuJ5+jPv+M0KxcZLu55dQb+gIBQ8ndvzkNwTBWxsEUh6E
hOPz0BIgIYM0AucZl4BSHUlLveTCByFvC5sW9VIuXSTFjjIw7E+AjLh7YHqS
CZs3NtHQtbkMfTZgrDYCxHmf8s7GPt52TQ+mqnT6d90lau5R0w+PzVj7yV50
qd4FffaHzG6vINMzX3g1koPvF+cIWwIfwuP0LLD8ncyGk59A9SNPunDjMO1Z
WYcRNgVOnRJIzHtA9HtWSjtRwEcN1TCRrAJCN6XglsBnNParhWQ9n9Of+/2E
iyFWksWrYbN4DS5vTIIJjmDcwyF0m2r56udlgkmxgpllWThddRryWj3Y675c
OtLZTdxrHVV3fosnc35hBb46ZnQP0O4WJ87cPwytdgVzvbUEb8frWN2aHmG7
/HaY4Pwe22YsMJYuw5RECaqiFrPKtnoonSyjo/6FVPKZhM6tnSBZjErT3rec
HSsdhfWx4XjWocX8HRPkb1LiWLIXtrw6CMWtheD+rZya+tUQrdgnRF6ugBhW
RWVr/ZEb7aBdZy/DClsAep9ywp4XDzQD56eEvUofPjwsghV2HoCaeo4WRP3B
rwqaJsc/tbBO/7OgXDYHWzq9SLZUzvojM/jY5hRo0G3lN1qC4Lq0jn0t3cke
JulxMJ8o4bsi5i6xU8/iuawxKYyuJt4krdTJn+zuhRBuQDBz8SR+6YC01XIs
iHORn3UlpE8tQm37HZrvKKKC1a6OQ9+MQvPVFxQuz4CRoHJwlgdg08sNrEjd
z8aHbTAz2AWe02KW+UiKliPlEFAzKbxjO08L/+qgwbvNqH/QLvwPqVyMjg==

                  "], "Biases" -> 
                 RawArray["Real32",{
                   0.00027670920826494694`, -0.013583722524344921`, \
-0.0012959243031218648`, 0.005773549433797598, -0.008277090266346931, 
                   0.002702999860048294, 
                   0.006105493288487196, -0.006226791068911552, \
-0.019593074917793274`, 
                   0.002487197518348694, -0.015126924030482769`, \
-0.0030937695410102606`, -0.00592420157045126, 
                   0.0011274764547124505`, -0.0103036779910326, \
-0.0053265951573848724`, 
                   0.0010741258738562465`, -0.014257396571338177`, \
-0.006764280144125223, 
                   0.010218758136034012`, -0.012857126072049141`, \
-0.00008511909254593775, -0.0018528940854594111`, -0.002524288836866617, \
-0.004228941630572081, 0.012228772044181824`, -0.009154794737696648, 
                   0.007221735082566738, -0.001720984117127955, 
                   0.011592492461204529`, 
                   0.0036843447014689445`, -0.0006209083367139101, 
                   0.008025044575333595, 0.0012903281021863222`, 
                   0.002456661546602845, 
                   0.004378174897283316, -0.0031640268862247467`, \
-0.015606587752699852`, 0.0003056103305425495, 
                   0.005340711213648319, -0.016284219920635223`, \
-0.009871041402220726, -0.009137188084423542, 
                   0.01817464269697666, -0.004498304799199104, 
                   0.0029419800266623497`, -0.00028042541816830635`, 
                   0.0005053668282926083, 
                   0.00040110593545250595`, -0.01238959189504385}]], 
               "Parameters" -> 
               Association[
                "OutputDimensions" -> {50}, "$OutputSize" -> 50, "$InputSize" -> 
                 4, "$InputDimensions" -> {4}], "Inputs" -> 
               Association[
                "Input" -> NeuralNetworks`TensorT[{4}, NeuralNetworks`AtomT]],
                "Outputs" -> 
               Association[
                "Output" -> 
                 NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "2" -> 
             Association[
              "Type" -> "Elementwise", "Arrays" -> Association[], 
               "Parameters" -> 
               Association[
                "Function" -> 
                 NeuralNetworks`ValidatedParameter[
                  "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}], 
               "Inputs" -> 
               Association[
                "Input" -> 
                 NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
               "Outputs" -> 
               Association[
                "Output" -> 
                 NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "3" -> 
             Association[
              "Type" -> "Dropout", "Arrays" -> Association[], "Parameters" -> 
               Association[
                "DropoutProbability" -> 0.01, "Method" -> "AlphaDropout", 
                 "OutputPorts" -> 
                 NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
               Association[
                "Input" -> 
                 NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
               "Outputs" -> 
               Association[
                "Output" -> 
                 NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "4" -> 
             Association[
              "Type" -> "Linear", "Arrays" -> 
               Association["Weights" -> CompressedData["
1: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
1tvq
                  "], "Biases" -> 
                 RawArray["Real32",{0.008813193999230862, 
                   0.0051544588059186935`, 0.0005623851902782917, 
                   0.00414317287504673, -0.005401385482400656, \
-0.001518159988336265, -0.0035244151949882507`, 0.005436218809336424, 
                   0.0016431751428171992`, -0.019488316029310226`, \
-0.007543573621660471, -0.010639908723533154`, -0.010051647201180458`, \
-0.011567792855203152`, -0.0035745801869779825`, 
                   0.0033558623399585485`, -0.009365147911012173, \
-0.0018667487893253565`, -0.0043753357604146, -0.009538856334984303, \
-0.004017172381281853, -0.005421010311692953, -0.0008091777563095093, 
                   0.008722266182303429, -0.008564695715904236, \
-0.010616257786750793`, -0.001606113277375698, 
                   0.0062533277086913586`, -0.006904192268848419, \
-0.007374371401965618, 0.005112138111144304, 
                   0.00014873173495288938`, -0.003809080459177494, \
-0.0010445505613461137`, -0.007829909212887287, -0.005251714959740639, 
                   0.0015372885391116142`, -0.00019874819554388523`, \
-0.004868240561336279, -0.00241088611073792, 0.009775912389159203, 
                   0.0013508673291653395`, 
                   0.003274793503805995, -0.004230445250868797, 
                   0.005130029749125242, 0.000162433396326378, 
                   0.0038989167660474777`, -0.0050894408486783504`, 
                   0.0019714334048330784`, 0.00532150361686945}]], 
               "Parameters" -> 
               Association[
                "OutputDimensions" -> {50}, "$OutputSize" -> 50, "$InputSize" -> 
                 50, "$InputDimensions" -> {50}], "Inputs" -> 
               Association[
                "Input" -> 
                 NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
               "Outputs" -> 
               Association[
                "Output" -> 
                 NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "5" -> 
             Association[
              "Type" -> "Elementwise", "Arrays" -> Association[], 
               "Parameters" -> 
               Association[
                "Function" -> 
                 NeuralNetworks`ValidatedParameter[
                  "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}], 
               "Inputs" -> 
               Association[
                "Input" -> 
                 NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
               "Outputs" -> 
               Association[
                "Output" -> 
                 NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "6" -> 
             Association[
              "Type" -> "Dropout", "Arrays" -> Association[], "Parameters" -> 
               Association[
                "DropoutProbability" -> 0.01, "Method" -> "AlphaDropout", 
                 "OutputPorts" -> 
                 NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
               Association[
                "Input" -> 
                 NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
               "Outputs" -> 
               Association[
                "Output" -> 
                 NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "7" -> 
             Association[
              "Type" -> "Linear", "Arrays" -> 
               Association["Weights" -> CompressedData["
1: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

                  "], "Biases" -> 
                 RawArray["Real32",{0.004737441893666983, 
                   0.005919533781707287, 
                   0.00031234073685482144`, -0.006973971612751484, \
-0.006779193878173828, 0.005144277587532997, 
                   0.0009660960058681667, -0.003702042857185006, 
                   0.007487365044653416, -0.005720038898289204, \
-0.010704528540372849`, -0.0030228951945900917`, -0.0038696264382451773`, \
-0.005122854374349117, 0.000525242299772799, 0.0006193270091898739, 
                   0.0007059519994072616, 0.009775921702384949, 
                   0.003017938695847988, 
                   0.0037862854078412056`, -0.0005974867381155491, 
                   0.005936680361628532, -0.006788804195821285, 
                   0.005173586308956146, 
                   0.004318748600780964, -0.009148250333964825, 
                   0.003606843762099743, 
                   0.005466039292514324, -0.0029969988390803337`, 
                   0.002487015910446644, -0.000526823743712157, \
-0.0006592820282094181, 
                   0.004068407695740461, -0.0006589472759515047, \
-0.006912871729582548, 0.008999831043183804, 
                   0.0008768266416154802, -0.00793122686445713, 
                   0.00043112738057971, -0.0020256098359823227`, \
-0.013834448531270027`, 
                   0.0009890638757497072, -0.004198112525045872, \
-0.00019810156663879752`, 0.002059690188616514, 
                   0.004604464862495661, -0.00779962632805109, \
-0.003946167416870594, -0.006781856529414654, 0.00028902836493216455`}]], 
               "Parameters" -> 
               Association[
                "OutputDimensions" -> {50}, "$OutputSize" -> 50, "$InputSize" -> 
                 50, "$InputDimensions" -> {50}], "Inputs" -> 
               Association[
                "Input" -> 
                 NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
               "Outputs" -> 
               Association[
                "Output" -> 
                 NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "8" -> 
             Association[
              "Type" -> "Elementwise", "Arrays" -> Association[], 
               "Parameters" -> 
               Association[
                "Function" -> 
                 NeuralNetworks`ValidatedParameter[
                  "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}], 
               "Inputs" -> 
               Association[
                "Input" -> 
                 NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
               "Outputs" -> 
               Association[
                "Output" -> 
                 NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "9" -> 
             Association[
              "Type" -> "Dropout", "Arrays" -> Association[], "Parameters" -> 
               Association[
                "DropoutProbability" -> 0.01, "Method" -> "AlphaDropout", 
                 "OutputPorts" -> 
                 NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
               Association[
                "Input" -> 
                 NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
               "Outputs" -> 
               Association[
                "Output" -> 
                 NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "10" -> 
             Association[
              "Type" -> "Linear", "Arrays" -> 
               Association["Weights" -> CompressedData["
1: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
                  "], 
                 "Biases" -> 
                 RawArray[
                   "Real32",{-0.0011646124767139554`, -0.002708918647840619, \
-0.0010797714348882437`, -0.0003752671182155609, -0.0002138391137123108, 
                   0.0031498034950345755`, -0.00248403986915946, 
                   0.001035682624205947, 0.0007710086065344512, 
                   0.009150927886366844, -0.009521075524389744, 
                   0.0019114125752821565`, 
                   0.00006070252857170999, -0.008612027391791344, 
                   0.00455266609787941, -0.003848765278235078, 
                   0.0019346362678334117`, -0.0017615413526073098`, \
-0.007974714040756226, 0.0011791533324867487`, -0.002532700076699257, 
                   0.0009757340303622186, 0.004060425329953432, 
                   0.011295823380351067`, 0.004832427948713303, 
                   0.003064903663471341, 
                   0.0010090706637129188`, -0.0006010418874211609, \
-0.002471114043146372, -0.0004982538521289825, -0.002657759003341198, \
-0.01025314163416624, 
                   0.0004508145502768457, -0.002797938883304596, \
-0.0015434168744832277`, 0.00409714737907052, 0.0036913342773914337`, 
                   0.0029688423965126276`, -0.0038377048913389444`, \
-0.002776514505967498, -0.007229143287986517, -0.0038677260745316744`, 
                   0.0033300919458270073`, -0.0016763946041464806`, \
-0.006030918098986149, 
                   0.006941426079720259, -0.0036990181542932987`, \
-0.0025511840358376503`, -0.0028872520197182894`, 0.0013391338288784027`}]], 
               "Parameters" -> 
               Association[
                "OutputDimensions" -> {50}, "$OutputSize" -> 50, "$InputSize" -> 
                 50, "$InputDimensions" -> {50}], "Inputs" -> 
               Association[
                "Input" -> 
                 NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
               "Outputs" -> 
               Association[
                "Output" -> 
                 NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "11" -> 
             Association[
              "Type" -> "Elementwise", "Arrays" -> Association[], 
               "Parameters" -> 
               Association[
                "Function" -> 
                 NeuralNetworks`ValidatedParameter[
                  "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}], 
               "Inputs" -> 
               Association[
                "Input" -> 
                 NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
               "Outputs" -> 
               Association[
                "Output" -> 
                 NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "12" -> 
             Association[
              "Type" -> "Dropout", "Arrays" -> Association[], "Parameters" -> 
               Association[
                "DropoutProbability" -> 0.01, "Method" -> "AlphaDropout", 
                 "OutputPorts" -> 
                 NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
               Association[
                "Input" -> 
                 NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
               "Outputs" -> 
               Association[
                "Output" -> 
                 NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "13" -> 
             Association[
              "Type" -> "Linear", "Arrays" -> 
               Association["Weights" -> CompressedData["
1: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
BGf3ZqM1/XBwtBc/PaNA76enwfdeSXjkQgp+GlABA7vCGHdZ0/wmZcg/lSjU
uuVXGDgfJC21p6LHgsU8yTWTfHa74sPVLtjNSgvjalT56zWBTZOjYeO9s6JO
0yD2mHkPg0+5w7SSi9KBgU4w4eNB2DPzIjxRHo03vqiJakOGCAEGmhKPrymY
73kTe56djO/fDUPthD0QqyQVN6xsguAd3qyiEUNtDespP0yVz0X15buGUyC5
6wYl/Bkntsy6Co15g/lVQi+0VbdF52s3aO83c3pas4EnyK0FpQQvsWh5BgV8
PcgThvSDe6VpMORHDt25WE5lXxFiIuxA/K3Nn18MwE+1Y9jk3STJM7Uo3Nbj
GARE/aW7VuVodNUSE+dFcJVpKvx0NKXHa4dw39pvogrU0NvzZjTktRTi3Ybi
5vs+nLr5g6T/NS261JaMs/ZdhecaI/nGIS0K3VIuuhbfrZiyPAZWj92P8ioD
2N1pEs3uNovihrWIO0dtg92/F7LC1c/SZxe7S4x6XBdGXFmLsxYMxrCqO2S7
8QAPH6LEMxsceW6QPE55YsTOMpWS5pA2UWvyRig4Kw/euEfwC/hLA3TXYO/N
ItxcmM66D2KF7egK0488Il6syU5RW+CDw1t4d7oRun4mopKDJa4OnQdK8XGi
j30is50qnzyaD6VYD/N/GbCN+XJRZoU/vYzy4vsXrXmd1Qoym/ecPpX58ub2
LWKY2hm4PSWfzjq44tKYw3D32XvS6uyg8Tpp4oJxs2lY5n14v2QTfWqNhlPb
D1JG8l4oziqiewqbuWPsAoyVOczZWyfDhawOuvvJAkY+CYaLpUo0KNqTNq0f
LzYm7aTGcYP5zuFR+Fh2ELf1raT4p3148PYG7ky0E7/PMsCwa23UWurCyatn
wYuc7Zw//hss/pIFraaPqd3LBwsWxYNJswoafjKB/ruDWHI9mqYdqaNFcuqo
s3a6KK0eznWVo9B2ly2M+ToZR9c0Urn/GqHSa6AwqlCR/xo3ie6FI3Dit7eS
VXMn8/tDzih/MBDqHYdKXbb0IIezV0HFvpjGzdlEUyUp3CPSknr52FHtvDOC
Sby2MFyyD5oyDvK18NmweHslLIs4hcoNk6jXXjPM+8eqF47K86Ob6ynkvB5N
cvChA7fV8L3Lf+zzT5dVV6kIJ+b0RKsdHvDEdxAG/pXDRfpfyIpfS4e07BR+
2fSgquS1fEwHaJ63C3pp13D3I9n89H462BnchO8LHXD6HSWMuJ8mHve9ScMb
O8E0uVS640kkr822wzEP6zCzrQmObu6ECf5ZAJ7GeHrzBbG41AOWHl7GV/Ga
2NNsKvWf/JaiBzjje/UsYfY2Vz4U5ICfDL8C1jyjtWe38Ce5LrEm57rkdIs1
rZ1ziA43TMaxLbbYfNmdii2NyF8SjqpTD0OoaSOc/ZYCXi/OQvfeRyRbB9yV
lL2SihPkq2BSYyjlHFahyaaFoCGbigrBWbBi5g/YTRm44EI7aVT86/vdUbhu
xCWY5LVPmPYuVqiYGklyj/79i3YuxARFNeyYMZj05XRo/jUDsUjflt9WG3NM
Vn9w8SinLn0//FD0yvnatFfU2bkE97iNFYbdCaUY1wNQkK+HA0EHt55+KuZ1
uPOta4mkX56FT3MSebTNKvKPCmH5zFE844UFTvDXwfOhD6iw85HQGFEm/tnf
QRKLQqFmpCyE6J9GflciPBcK4XkYClbaTTBp3leaRMtozA8fXm0wi2Y/kKHl
/vZguPggv1MbzC0ZGuyYFSeWyKrjvH3aPCX7u6B+tpQsZHJINLkt7t+xDs3i
CoVD5mfEu/8xiH6eqNdYSHork3D5xlIacsyMbzRF0UbVAqFoThMZbMoETR1Z
Fu9dprFP86TlaYi7cj/TkrMreN/0APIy388rtlVBs1KS8DswS1jnsJlarHzR
tqkJ4s2n48CheriHZnKn+V3apSqFnfq9uLTWWnw3YAmH8Snh+I3XVGJoiTJv
toHRJAOuvZ8qNsVvE6SfM8SYpon8cOkwTNX5LnlvX0OuBVegWCggB6t+3LBF
gHrdZ3BG5y+4HJNBs23XxE9xxyBJ5z4VatbC1/WW4oiUC+J57/5sPewdnV4r
h3019US7rwGizKX9YuDqXvB1tiMO3z8Rxq7zpNNJ6SjXUxn/XJYjwXIN54wz
oFsf2int/R2YlmUPlZkqeCd/HPQdXCw6alSKIzU1ULxUK0rvtkrFZ2Vwfbkh
f1FyxAmft1Ha/CTh2SwHwWLSPri09AzU9gvGMIvZdNx1E3Suu4Afx0+WDJqv
gDPyTSvulSjihJ554i8Xd4ifNo3KX0dBgq4/Be6Yy7KpdrxztRaEnWgT3nb2
4Ze+yI/SY3hZ4ynWvBrEfp13xH1F2RTomIzlDm/JrfIsbf37EM662/NWZXVp
87tcoevgUWFsr1F8abEASvJv6UqeJuen3KF+Vo48JG8kPl7RBzeuHAx5MdP5
zN69cHlzF60LP4cdk9YLkj+9JGpbbNgu/yuVZnQKW76fEoxld1Kl+xR+7xZO
9XiRZn/R40UrHpHDz2Ogrz5Smrl4AYe12qDd5cFouvWdRLtIEabK7BO+t4/G
RWGyvMxeEMf0LKbpPe+I59fVCpE7LYUJKtdB6+w97PZ6Gn9Qv8APN46imZ7P
cPdzCXsevAwTTliTe+lnYW68LvuHHoZOmTIeUPZHuioCuPtsD3B7OwAPziwi
C38HzL7RH9f46aDkWj+cMsWQV/vV0Y1wV+i5Wo6PD6t1jpKZitU36qF+Dgm7
8pQ5LPaBWGv2T7t6AlTLPqD70VHCHVMdweyEGrq/y8MxXR1kcmwSn7/aDiFF
OeJf86/C7jN/pC+mfoD1m2IFw9Pr4FuxnSDXnsN/XoWgyZ02ct/7H8wt1iFb
1XRsnAV4/9cfcKkuhtp4Kz6Sqo6l31+KjepXyU1vP0/5eJ2CXTWkSyICyPVG
tpAUp4aOHn+E/pbzuf+7KNF4yCzaM9SGPcxW/OvZCLafGYkanwcJD2AjJT0r
4VhlFbrUbI/LbrVAP51SWDDiEGgVZtEWO03w+qhCv/8o8YLwOLri9Ih6py+E
ONMYehOoxoFuG7HAVw+7+VUKL678oX63Hoj+cBp2L9kBMno/YdjLBrpyYQjP
DUwmYVQfGCrrAgnLN+L2OXOx8pAqnitMgk6vKroV6SSaf+uOFcle3LEsgw0n
emHINQFzHP1o9seJPNevAepeeXDGb3PR7Zwpc1gayph64rLVAyU6WhZcPdQQ
zV5408TJ8nTct028MrVN8D0xhj+olrNC2Rl4eGMftcZeFn5W3aOhY5Nhor0I
BY/rRO0EU/FuSzX5zLfgOe/W4OwgT1GzfSu11HoJGibvofsFOzQMWy4t1HlA
h7pfhmIteZp3dQEpBa4UF3aqQOWEU2w17Lrg/tQB24yVxB8/yiVOfXvz/Fkn
KM08SWJds4xmxoiw8M5+yFrUAssLo+jpwGxYciSBz+3tAI1VtTw04DRN72qA
1+PeiedtO4RpLxfhpNNDsPm7IjtEAKiv/kujV8jCgdu+koGKscKo0G485fNa
SJOsxbYGP8agelR+tpgs5urz2V0ZtFgnk9Y0ypNfZl9ISU4lm9NK9G50AXjc
+wY7FrRBR1ow+vEvsP6lR523VbgpxoRz+38Wnrp0kKFwVJy25AluGXkJJmoM
w0e+RuLS4IewuiyEUy//Ja+2Z1AxsUNs+maH6saP6MnysazvW0ZxmbqsZV8l
hO9bSLrdOyscAt/SO/m+XKa9VBgywob7LXwLU5TmYP22HOGiTSIOr3YFXTWC
gcc1MH/0Vj70eqLgXbCaTtmrc0nLRaH7RxP+NvwFzTk6BmNc0mnIw1Lo4+oE
92dPwM/tJrC4bACH7WrGnHGRsLs+ir26W6FcXOM/FhrKqzOewYnFO6Bn8xYx
Q1+Ggwx88MQKXWyNaaMWp5n0aoM5a3Z1CJ8nmmGA8wg2q1XhZSMNOH3yGepu
lkCNI3dI5inLo7J3Pgzo05/qojogwY7o5DVv6YwpKXRZeSYlvsqXDn+OonKD
E8iW1pOa4MDn6vzoUUQPsLxUJL0atxhrPOahfogg7qmWof8DJVbktw==
                  "],
                  "Biases" -> 
                 RawArray["Real32",{
                   0.005095121916383505, -0.000666480278596282, \
-0.009062699973583221, 0.0010540606454014778`, 0.005088680889457464, 
                   0.008568711578845978, -0.0018076298292726278`, \
-0.0035726679489016533`, 0.0034186074044555426`, -0.0020889719016849995`, 
                   0.008215313777327538, 
                   0.0007460962515324354, -0.005525968037545681, \
-0.0009212669683620334, -0.0009443429298698902, -0.003950829152017832, \
-0.0009238573256880045, -0.004041202832013369, 0.007924617268145084, 
                   0.0038328878581523895`, 
                   0.0045338040217757225`, -0.005511156748980284, \
-0.001424894668161869, -0.0017967333551496267`, -0.00248030386865139, 
                   0.00127788248937577, -0.0033402717672288418`, \
-0.006541108246892691, -0.0025895617436617613`, 
                   0.0012709097936749458`, -0.007781318388879299, 
                   0.0007774201221764088, -0.008676283992826939, \
-0.000957433832809329, 0.0016657828819006681`, 0.00040470794192515314`, 
                   0.0024004767183214426`, 
                   0.0005878297379240394, -0.009414443746209145, 
                   0.00545878242701292, 0.0014328528195619583`, 
                   0.00769895501434803, 0.0002946670865640044, 
                   0.0009398385882377625, -0.0028123597148805857`, \
-0.0015733300242573023`, -0.00576383713632822, -0.0010602697730064392`, \
-0.00033204664941877127`, -0.003184747649356723}]], "Parameters" -> 
               Association[
                "OutputDimensions" -> {50}, "$OutputSize" -> 50, "$InputSize" -> 
                 50, "$InputDimensions" -> {50}], "Inputs" -> 
               Association[
                "Input" -> 
                 NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
               "Outputs" -> 
               Association[
                "Output" -> 
                 NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "14" -> 
             Association[
              "Type" -> "Elementwise", "Arrays" -> Association[], 
               "Parameters" -> 
               Association[
                "Function" -> 
                 NeuralNetworks`ValidatedParameter[
                  "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}], 
               "Inputs" -> 
               Association[
                "Input" -> 
                 NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
               "Outputs" -> 
               Association[
                "Output" -> 
                 NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "15" -> 
             Association[
              "Type" -> "Linear", "Arrays" -> 
               Association["Weights" -> CompressedData["
1:eJwBvgFB/iFib1JmAgAAAHMIAAAAUmF3QXJyYXlTBgAAAFJlYWwzMmwCAAAA
AgAAADIAAAC4ZJy9Y0R8Prf+Wb655vA92oXSPHLMFb55SoI9ElAHPQX0uL3r
sFs9mZrNPbFPgz128vC9gWuEPs4Qdb1qlRQ+ohenPkZqij1g9go+PmQQPiaM
i70Puwi+t3QDvhN30TwHpJW9/qrcPnAGgL2PT3C+pOaYvhwLNT7TQDC+hJyA
vDXEKb61GoO9FvgrPQQ9Vz6bmxa9FWk/PTH/Tb0FePs9W+EmPr6sBj525MQ+
GlDDvSrBN76mc229avb9vSYZtb0e/fg9YFTCvRiKQ76ddey9NB22vRN1Zb1b
+XK+UIegvlwRvbsfY2a+9xnQvZzstT3VWF+9A7cvvs0E/LxiITK+//fuPV6J
nj6B3LS8wMDWvaTHcj2jMQo+b5LdvRY25ryx2xu9I31kvaC2Mz6sg9i9IGe6
PAlKWb5Y5Ac+IVRtvdhAKr2rHRG+xKXovBNyy72gaRi8wGhJvqJnhr187Rc9
My/SPL4AJb2L9ZQ9JSCLPf1SYz61Bx89yve5PBXWLb3mzo8+rYSFvWS/mT5U
EfE9gWTN1g==
                  "], "Biases" -> 
                 RawArray["Real32",{
                   0.0025227926671504974`, -0.002522793598473072}]], 
               "Parameters" -> 
               Association[
                "OutputDimensions" -> {2}, "$OutputSize" -> 2, "$InputSize" -> 
                 50, "$InputDimensions" -> {50}], "Inputs" -> 
               Association[
                "Input" -> 
                 NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
               "Outputs" -> 
               Association[
                "Output" -> 
                 NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
           "Edges" -> {
            NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
             NeuralNetworks`NetPath["Inputs", "Input"], 
             NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
             NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
             NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
             NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
             NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
             NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
             NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
             NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"], 
             NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
             NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"], 
             NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
             NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"], 
             NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
             NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"], 
             NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
             NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"], 
             NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
             NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"], 
             NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
             NeuralNetworks`NetPath["Nodes", "10", "Outputs", "Output"], 
             NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
             NeuralNetworks`NetPath["Nodes", "11", "Outputs", "Output"], 
             NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
             NeuralNetworks`NetPath["Nodes", "12", "Outputs", "Output"], 
             NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
             NeuralNetworks`NetPath["Nodes", "13", "Outputs", "Output"], 
             NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
             NeuralNetworks`NetPath["Nodes", "14", "Outputs", "Output"], 
             NeuralNetworks`NetPath["Outputs", "Output"] -> 
             NeuralNetworks`NetPath["Nodes", "15", "Outputs", "Output"]}, 
           "Inputs" -> 
           Association[
            "Input" -> NeuralNetworks`TensorT[{4}, NeuralNetworks`AtomT]], 
           "Outputs" -> 
           Association[
            "Output" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
          Association["Version" -> "12.3.2", "Unstable" -> False]], 
        "Training" -> 
        Association[
         "Optimizer" -> {"ADAM", "L2Regularization" -> None}, 
          TrainingProgressFunction -> {Null& , "Interval" -> 1}, 
          "TotalTrainingTime" -> 0.442598, "MeanInputsPerSecond" -> 
          31812.163633816694`], "InputType" -> "NumericalVector", "Processor" -> 
        MachineLearning`MLProcessor["Sequence", 
          Association[
          "Input" -> Association[
            "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]], 
           "Output" -> 
           Association[
            "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]], 
           "Processors" -> {
             MachineLearning`MLProcessor["Standardize", 
              Association[
              "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
               "StructurePreserving" -> True, "Input" -> 
               Association[
                "f1" -> Association[
                  "Type" -> "NumericalVector", "Weight" -> 1]], 
               "Mean" -> {-0.00006234779029041349, -0.00018657084466515151`, \
-0.00004739069063093737, 0.00005961418604668256}, 
               "StandardDeviation" -> {0.9999717576219489, 0.9997526085052248,
                 0.9999470828381144, 0.999853555516349}, "Output" -> 
               Association[
                "f1" -> Association[
                  "Type" -> "NumericalVector", "Weight" -> 1]], 
               "Version" -> {12.3, 1}, "ID" -> 1945859222929350755]], 
             MachineLearning`MLProcessor["FirstValues", 
              Association[
              "Info" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1], "Key" -> "f1", 
               "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
               "Missing" -> "Allowed"]]}, "Invertibility" -> "Perfect", 
           "StructurePreserving" -> False, "Missing" -> "Allowed"]], 
        "FeatureNumber" -> 4, "Calibrator" -> None, "PostProcessor" -> 
        MachineLearning`MLProcessor["Identity"], "Options" -> 
        Association[
         "NetworkType" -> 
          Association[
           "Value" -> "FullyConnected", "Options" -> Association[]], 
          "NetworkDepth" -> 
          Association["Value" -> 5, "Options" -> Association[]], 
          "NumberOfParameters" -> 
          Association["Value" -> 304, "Options" -> Association[]], 
          "ActivationFunction" -> 
          Association["Value" -> "SELU", "Options" -> Association[]], 
          "L2Regularization" -> 
          Association["Value" -> None, "Options" -> Association[]], "Dropout" -> 
          Association["Value" -> 0.01, "Options" -> Association[]], 
          "NetInitializationMethod" -> 
          Association["Value" -> Automatic, "Options" -> Association[]], 
          "OptimizationMethod" -> 
          Association[
           "Value" -> {"ADAM", "L2Regularization" -> None}, "Options" -> 
            Association[]], MaxTrainingRounds -> 
          Association["Value" -> 10, "Options" -> Association[]], 
          ValidationSet -> 
          Association["Value" -> Automatic, "Options" -> Association[]], 
          "EarlyStopping" -> 
          Association["Value" -> False, "Options" -> Association[]], 
          TrainingProgressReporting -> 
          Association["Value" -> None, "Options" -> Association[]], 
          "NetTrainOptions" -> 
          Association[
           "Value" -> {LearningRateMultipliers -> {}, TargetDevice -> "CPU"}, 
            "Options" -> Association[]], "LossFunction" -> 
          Association["Value" -> Automatic, "Options" -> Association[]], 
          "ValidationSetRatio" -> 
          Association["Value" -> 0.15, "Options" -> Association[]]]], 
      "TrainingInformation" -> 
      Association[
       "PanelCell" -> None, "TrainingFunction" -> Classify, "EMIterations" -> 
        Missing["KeyAbsent", "EMIterations"], "ProcessorEntropyShift" -> 0, 
        "PreprocessingTime" -> 0.396139`6.049392594423406, "LossName" -> 
        "MeanCrossEntropy", "BestModelInformation" -> Dataset[
          Association[
          "MeanCrossEntropy" -> 
           Around[0.48856540260588593`, 0.022172049443120116`], "Accuracy" -> 
           Around[0.788586497477491, 0.015583197571320612`], "EvaluationTime" -> 
           0.000049020209326817566`, "TestSize" -> 1350, "ModelMemory" -> 
           118544, "ModelUtility" -> 0.014094535332449754`, "TrainingSize" -> 
           250, "TrainingTime" -> 0.31622776601683794`, "TrainingMemory" -> 
           536456, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
             Around[0.48856540260588593`, 0.015678006514033647`]}, 
           "AccuracyHistory" -> {
             Around[0.788586497477491, 0.011018984675250542`]}, 
           "Configuration" -> {
            "NeuralNetwork", "NetworkType" -> "FullyConnected", 
             "NetworkDepth" -> 5, "NumberOfParameters" -> 304, 
             "ActivationFunction" -> "SELU", "L2Regularization" -> None, 
             "Dropout" -> 0.01, "NetInitializationMethod" -> Automatic, 
             "OptimizationMethod" -> {"ADAM", "L2Regularization" -> None}, 
             MaxTrainingRounds -> 10, ValidationSet -> Automatic, 
             "EarlyStopping" -> False, TrainingProgressReporting -> None, 
             "NetTrainOptions" -> Automatic, "LossFunction" -> Automatic}, 
           "FinalTrainingSize" -> 1600], 
          
          TypeSystem`Struct[{
           "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
            "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
            "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
            "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
           TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Integer], 
            TypeSystem`Atom[Integer], 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Integer], 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Integer], 
            TypeSystem`Atom[Integer], 
            TypeSystem`Vector[TypeSystem`AnyType, 1], 
            TypeSystem`Vector[TypeSystem`AnyType, 1], 
            TypeSystem`Tuple[{
              TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType,
               TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType}], 
            TypeSystem`Atom[Integer]}], 
          Association[]], "Configurations" -> Dataset[
          Association[
          Association[
            "Value" -> "NeuralNetwork", "Options" -> 
             Association[
              "NetworkType" -> Association["Value" -> "FullyConnected"], 
               "NetworkDepth" -> Association["Value" -> 5], 
               "NumberOfParameters" -> Association["Value" -> 304], 
               "ActivationFunction" -> Association["Value" -> "SELU"], 
               "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
               Association["Value" -> None], "NetInitializationMethod" -> 
               Association["Value" -> Automatic], "OptimizationMethod" -> 
               Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
               MaxTrainingRounds -> Association["Value" -> 100], 
               ValidationSet -> Association["Value" -> Automatic], 
               "EarlyStopping" -> Association["Value" -> False], 
               TrainingProgressReporting -> Association["Value" -> None], 
               "NetTrainOptions" -> Association["Value" -> Automatic], 
               "LossFunction" -> Association["Value" -> Automatic]]] -> 
           Association["Experiments" -> {
               Association[
               "MeanCrossEntropy" -> 
                Around[1.735148313911777, 0.10563421189972166`], "Accuracy" -> 
                Around[0.6707393816866234, 0.01654781742108644], 
                "EvaluationTime" -> 0.0000433250155646982, "TestSize" -> 1590,
                 "ModelMemory" -> 106512, 
                "ModelUtility" -> -1.2563467719347727`, "TrainingSize" -> 10, 
                "TrainingTime" -> 0.31622776601683794`, "TrainingMemory" -> 
                409256, "ExperimentCount" -> 1, 
                "MeanCrossEntropyHistory" -> {
                  Around[1.735148313911777, 0.07469466755958988]}, 
                "AccuracyHistory" -> {
                  Around[0.6707393816866234, 0.011701073912287106`]}]}, 
             "PredictedPerformances" -> 
             Association[
              "EvaluationTime" -> 0.0000433250155646982, "MeanCrossEntropy" -> 
               Around[1.735148313911777, 0.10563421189972166`], "ModelMemory" -> 
               106512, "TrainingMemory" -> 409256, "TrainingTime" -> 
               5.375872022286245], "Index" -> 1], 
           Association[
            "Value" -> "NeuralNetwork", "Options" -> 
             Association[
              "NetworkType" -> Association["Value" -> "FullyConnected"], 
               "NetworkDepth" -> Association["Value" -> 5], 
               "NumberOfParameters" -> Association["Value" -> 304], 
               "ActivationFunction" -> Association["Value" -> "SELU"], 
               "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
               Association["Value" -> 0.01], "NetInitializationMethod" -> 
               Association["Value" -> Automatic], "OptimizationMethod" -> 
               Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
               MaxTrainingRounds -> Association["Value" -> 100], 
               ValidationSet -> Association["Value" -> Automatic], 
               "EarlyStopping" -> Association["Value" -> False], 
               TrainingProgressReporting -> Association["Value" -> None], 
               "NetTrainOptions" -> Association["Value" -> Automatic], 
               "LossFunction" -> Association["Value" -> Automatic]]] -> 
           Association["Experiments" -> {
               Association[
               "MeanCrossEntropy" -> 
                Around[0.4947636226998784, 0.023019103682364074`], "Accuracy" -> 
                Around[0.7846837645320508, 0.015794487829113107`], 
                "EvaluationTime" -> 0.000031622993951553736`, "TestSize" -> 
                1350, "ModelMemory" -> 118544, "ModelUtility" -> 
                0.0012611620729052753`, "TrainingSize" -> 250, "TrainingTime" -> 
                1., "TrainingMemory" -> 536584, "ExperimentCount" -> 1, 
                "MeanCrossEntropyHistory" -> {
                  Around[0.4947636226998784, 0.016276964310635862`]}, 
                "AccuracyHistory" -> {
                  Around[0.7846837645320508, 0.01116838944933427]}]}, 
             "PredictedPerformances" -> 
             Association[
              "EvaluationTime" -> 0.000031622993951553736`, 
               "MeanCrossEntropy" -> 
               Around[0.4947636226998784, 0.023019103682364074`], 
               "ModelMemory" -> 118544, "TrainingMemory" -> 536584, 
               "TrainingTime" -> 7.4], "Index" -> 2], 
           Association[
            "Value" -> "NeuralNetwork", "Options" -> 
             Association[
              "NetworkType" -> Association["Value" -> "FullyConnected"], 
               "NetworkDepth" -> Association["Value" -> 5], 
               "NumberOfParameters" -> Association["Value" -> 304], 
               "ActivationFunction" -> Association["Value" -> "SELU"], 
               "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
               Association["Value" -> 0.01], "NetInitializationMethod" -> 
               Association["Value" -> Automatic], "OptimizationMethod" -> 
               Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
               MaxTrainingRounds -> Association["Value" -> 10], ValidationSet -> 
               Association["Value" -> Automatic], "EarlyStopping" -> 
               Association["Value" -> False], TrainingProgressReporting -> 
               Association["Value" -> None], "NetTrainOptions" -> 
               Association["Value" -> Automatic], "LossFunction" -> 
               Association["Value" -> Automatic]]] -> 
           Association["Experiments" -> {
               Association[
               "MeanCrossEntropy" -> 
                Around[0.7883198608742619, 0.018898548766495125`], "Accuracy" -> 
                Around[0.5840536059246487, 0.01734070112657998], 
                "EvaluationTime" -> 0.00004435494518151152, "TestSize" -> 
                1590, "ModelMemory" -> 118544, 
                "ModelUtility" -> -0.4600837706969597, "TrainingSize" -> 10, 
                "TrainingTime" -> 0.19952623149688792`, "TrainingMemory" -> 
                510272, "ExperimentCount" -> 1, 
                "MeanCrossEntropyHistory" -> {
                  Around[0.7883198608742619, 0.013363291987373366`]}, 
                "AccuracyHistory" -> {
                  Around[0.5840536059246487, 0.012261727357133908`]}], 
               Association[
               "MeanCrossEntropy" -> 
                Around[0.5354655724781593, 0.03774633761469244], "Accuracy" -> 
                Around[0.7922229664241474, 0.01802207368099055], 
                "EvaluationTime" -> 0.00004676581300222632, "TestSize" -> 
                1000, "ModelMemory" -> 118544, 
                "ModelUtility" -> -0.0825333179188168, "TrainingSize" -> 50, 
                "TrainingTime" -> 0.19952623149688792`, "TrainingMemory" -> 
                513048, "ExperimentCount" -> 1, 
                "MeanCrossEntropyHistory" -> {
                  Around[0.5354655724781593, 0.026690691292305873`]}, 
                "AccuracyHistory" -> {
                  Around[0.7922229664241474, 0.012743530510872023`]}], 
               Association[
               "MeanCrossEntropy" -> 
                Around[0.48856540260588593`, 0.022172049443120116`], 
                "Accuracy" -> 
                Around[0.788586497477491, 0.015583197571320612`], 
                "EvaluationTime" -> 0.000049020209326817566`, "TestSize" -> 
                1350, "ModelMemory" -> 118544, "ModelUtility" -> 
                0.014094535332449754`, "TrainingSize" -> 250, "TrainingTime" -> 
                0.31622776601683794`, "TrainingMemory" -> 536456, 
                "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                  Around[0.48856540260588593`, 0.015678006514033647`]}, 
                "AccuracyHistory" -> {
                  Around[0.788586497477491, 0.011018984675250542`]}], 
               Association[
               "MeanCrossEntropy" -> 
                Around[0.5085275305458076, 0.05676726794591639], "Accuracy" -> 
                Around[0.7795368545490472, 0.03261668957755817], 
                "EvaluationTime" -> 0.00010289574655322326`, "TestSize" -> 
                320, "ModelMemory" -> 118544, 
                "ModelUtility" -> -0.03899663355188243, "TrainingSize" -> 
                1280, "TrainingTime" -> 0.6309573444801932, "TrainingMemory" -> 
                623768, "ExperimentCount" -> 1, 
                "MeanCrossEntropyHistory" -> {
                  Around[0.5085275305458076, 0.04014052011399121]}, 
                "AccuracyHistory" -> {
                  Around[0.7795368545490472, 0.02306348238014797]}]}, 
             "PredictedPerformances" -> 
             Association[
              "EvaluationTime" -> 0.00010289574655322326`, "MeanCrossEntropy" -> 
               Around[0.5085275305458076, 0.05676726794591639], "ModelMemory" -> 
               118544, "TrainingMemory" -> 623768, "TrainingTime" -> 
               0.9882229120971295], "Index" -> 3], 
           Association[
            "Value" -> "NeuralNetwork", "Options" -> 
             Association[
              "NetworkType" -> Association["Value" -> "FullyConnected"], 
               "NetworkDepth" -> Association["Value" -> 5], 
               "NumberOfParameters" -> Association["Value" -> 304], 
               "ActivationFunction" -> Association["Value" -> "SELU"], 
               "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
               Association["Value" -> None], "NetInitializationMethod" -> 
               Association["Value" -> Automatic], "OptimizationMethod" -> 
               Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
               MaxTrainingRounds -> Association["Value" -> 300], 
               ValidationSet -> Association["Value" -> Automatic], 
               "EarlyStopping" -> Association["Value" -> False], 
               TrainingProgressReporting -> Association["Value" -> None], 
               "NetTrainOptions" -> Association["Value" -> Automatic], 
               "LossFunction" -> Association["Value" -> Automatic]]] -> 
           Association["Experiments" -> {
               Association[
               "MeanCrossEntropy" -> 
                Around[0.5149526529888805, 0.027160720606528587`], "Accuracy" -> 
                Around[0.7643897509669357, 0.016310855054001646`], 
                "EvaluationTime" -> 0.000034356643251700455`, "TestSize" -> 
                1350, "ModelMemory" -> 106512, 
                "ModelUtility" -> -0.03996483847700594, "TrainingSize" -> 250,
                 "TrainingTime" -> 2.51188643150958, "TrainingMemory" -> 
                432560, "ExperimentCount" -> 1, 
                "MeanCrossEntropyHistory" -> {
                  Around[0.5149526529888805, 0.01920552972278956]}, 
                "AccuracyHistory" -> {
                  Around[0.7643897509669357, 0.011533516215635434`]}], 
               Association[
               "MeanCrossEntropy" -> 
                Around[2.3059814741503404`, 0.1409914472401776], "Accuracy" -> 
                Around[0.6654089976640549, 0.016687357733446675`], 
                "EvaluationTime" -> 0.0000331578205070816, "TestSize" -> 1590,
                 "ModelMemory" -> 106512, 
                "ModelUtility" -> -1.5408121343381636`, "TrainingSize" -> 10, 
                "TrainingTime" -> 0.7943282347242815, "TrainingMemory" -> 
                409336, "ExperimentCount" -> 1, 
                "MeanCrossEntropyHistory" -> {
                  Around[2.3059814741503404`, 0.09969600843283491]}, 
                "AccuracyHistory" -> {
                  Around[0.6654089976640549, 0.011799743813405919`]}]}, 
             "PredictedPerformances" -> 
             Association[
              "EvaluationTime" -> 0.0000331578205070816, "MeanCrossEntropy" -> 
               Around[2.3059814741503404`, 0.1409914472401776], "ModelMemory" -> 
               106512, "TrainingMemory" -> 409336, "TrainingTime" -> 
               15.221138187098086`], "Index" -> 4], 
           Association[
            "Value" -> "NeuralNetwork", "Options" -> 
             Association[
              "NetworkType" -> Association["Value" -> "FullyConnected"], 
               "NetworkDepth" -> Association["Value" -> 5], 
               "NumberOfParameters" -> Association["Value" -> 304], 
               "ActivationFunction" -> Association["Value" -> "SELU"], 
               "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
               Association["Value" -> None], "NetInitializationMethod" -> 
               Association["Value" -> Automatic], "OptimizationMethod" -> 
               Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
               MaxTrainingRounds -> Association["Value" -> 10], ValidationSet -> 
               Association["Value" -> Automatic], "EarlyStopping" -> 
               Association["Value" -> False], TrainingProgressReporting -> 
               Association["Value" -> None], "NetTrainOptions" -> 
               Association["Value" -> Automatic], "LossFunction" -> 
               Association["Value" -> Automatic]]] -> 
           Association[
            "Experiments" -> {}, "PredictedPerformances" -> 
             Association[
              "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
               1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 5], 
           Association[
            "Value" -> "NeuralNetwork", "Options" -> 
             Association[
              "NetworkType" -> Association["Value" -> "FullyConnected"], 
               "NetworkDepth" -> Association["Value" -> 5], 
               "NumberOfParameters" -> Association["Value" -> 304], 
               "ActivationFunction" -> Association["Value" -> "SELU"], 
               "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
               Association["Value" -> None], "NetInitializationMethod" -> 
               Association["Value" -> Automatic], "OptimizationMethod" -> 
               Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
               MaxTrainingRounds -> Association["Value" -> 30], ValidationSet -> 
               Association["Value" -> Automatic], "EarlyStopping" -> 
               Association["Value" -> False], TrainingProgressReporting -> 
               Association["Value" -> None], "NetTrainOptions" -> 
               Association["Value" -> Automatic], "LossFunction" -> 
               Association["Value" -> Automatic]]] -> 
           Association["Experiments" -> {
               Association[
               "MeanCrossEntropy" -> 
                Around[0.49707474665212553`, 0.05462460386479478], "Accuracy" -> 
                Around[0.7768063983593699, 0.0328006793701689], 
                "EvaluationTime" -> 0.00009001277065039584, "TestSize" -> 320,
                 "ModelMemory" -> 106512, 
                "ModelUtility" -> -0.01587715467912243, "TrainingSize" -> 
                1280, "TrainingTime" -> 1.2589254117941673`, "TrainingMemory" -> 
                519712, "ExperimentCount" -> 1, 
                "MeanCrossEntropyHistory" -> {
                  Around[0.49707474665212553`, 0.03862542781242528]}, 
                "AccuracyHistory" -> {
                  Around[0.7768063983593699, 0.023193582810172125`]}], 
               Association[
               "MeanCrossEntropy" -> 
                Around[0.5764631685806041, 0.03168907432944734], "Accuracy" -> 
                Around[0.7643553824427217, 0.015226999983612877`], 
                "EvaluationTime" -> 0.00003401350619758693, "TestSize" -> 
                1550, "ModelMemory" -> 106512, 
                "ModelUtility" -> -0.15324206754733405`, "TrainingSize" -> 50,
                 "TrainingTime" -> 0.25118864315095796`, "TrainingMemory" -> 
                412200, "ExperimentCount" -> 1, 
                "MeanCrossEntropyHistory" -> {
                  Around[0.5764631685806041, 0.022407559347876763`]}, 
                "AccuracyHistory" -> {
                  Around[0.7643553824427217, 0.010767114945540113`]}], 
               Association[
               "MeanCrossEntropy" -> 
                Around[0.5143468451619702, 0.02707497347229158], "Accuracy" -> 
                Around[0.7647318275639459, 0.016290407222303335`], 
                "EvaluationTime" -> 0.00003558894078807311, "TestSize" -> 
                1350, "ModelMemory" -> 106512, 
                "ModelUtility" -> -0.038767013737267875`, "TrainingSize" -> 
                250, "TrainingTime" -> 0.5011872336272722, "TrainingMemory" -> 
                435576, "ExperimentCount" -> 1, 
                "MeanCrossEntropyHistory" -> {
                  Around[0.5143468451619702, 0.01914489734270326]}, 
                "AccuracyHistory" -> {
                  Around[0.7647318275639459, 0.011519057415180998`]}]}, 
             "PredictedPerformances" -> 
             Association[
              "EvaluationTime" -> 0.00003558894078807311, "MeanCrossEntropy" -> 
               Around[0.5143468451619702, 0.02707497347229158], "ModelMemory" -> 
               106512, "TrainingMemory" -> 435576, "TrainingTime" -> 
               4.46652370700871], "Index" -> 6], 
           Association[
            "Value" -> "NeuralNetwork", "Options" -> 
             Association[
              "NetworkType" -> Association["Value" -> "FullyConnected"], 
               "NetworkDepth" -> Association["Value" -> 5], 
               "NumberOfParameters" -> Association["Value" -> 304], 
               "ActivationFunction" -> Association["Value" -> "SELU"], 
               "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
               Association["Value" -> 0.01], "NetInitializationMethod" -> 
               Association["Value" -> Automatic], "OptimizationMethod" -> 
               Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
               MaxTrainingRounds -> Association["Value" -> 1000], 
               ValidationSet -> Association["Value" -> Automatic], 
               "EarlyStopping" -> Association["Value" -> False], 
               TrainingProgressReporting -> Association["Value" -> None], 
               "NetTrainOptions" -> Association["Value" -> Automatic], 
               "LossFunction" -> Association["Value" -> Automatic]]] -> 
           Association["Experiments" -> {
               Association[
               "MeanCrossEntropy" -> 
                Around[4.15114299714972, 0.25947792105178286`], "Accuracy" -> 
                Around[0.6467155278858068, 0.016915230544293454`], 
                "EvaluationTime" -> 0.00003083679751639099, "TestSize" -> 
                1590, "ModelMemory" -> 118544, 
                "ModelUtility" -> -2.128959667221527, "TrainingSize" -> 10, 
                "TrainingTime" -> 1.9952623149688797`, "TrainingMemory" -> 
                510440, "ExperimentCount" -> 1, 
                "MeanCrossEntropyHistory" -> {
                  Around[4.15114299714972, 0.18347859754390325`]}, 
                "AccuracyHistory" -> {
                  Around[0.6467155278858068, 0.011960874223203716`]}]}, 
             "PredictedPerformances" -> 
             Association[
              "EvaluationTime" -> 0.00003083679751639099, "MeanCrossEntropy" -> 
               Around[4.15114299714972, 0.25947792105178286`], "ModelMemory" -> 
               118544, "TrainingMemory" -> 510440, "TrainingTime" -> 
               33.91945935447096], "Index" -> 7], 
           Association[
            "Value" -> "NeuralNetwork", "Options" -> 
             Association[
              "NetworkType" -> Association["Value" -> "FullyConnected"], 
               "NetworkDepth" -> Association["Value" -> 5], 
               "NumberOfParameters" -> Association["Value" -> 304], 
               "ActivationFunction" -> Association["Value" -> "SELU"], 
               "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
               Association["Value" -> 0.01], "NetInitializationMethod" -> 
               Association["Value" -> Automatic], "OptimizationMethod" -> 
               Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
               MaxTrainingRounds -> Association["Value" -> 300], 
               ValidationSet -> Association["Value" -> Automatic], 
               "EarlyStopping" -> Association["Value" -> False], 
               TrainingProgressReporting -> Association["Value" -> None], 
               "NetTrainOptions" -> Association["Value" -> Automatic], 
               "LossFunction" -> Association["Value" -> Automatic]]] -> 
           Association["Experiments" -> {
               Association[
               "MeanCrossEntropy" -> 
                Around[0.5069371797463638, 0.05723665010238305], "Accuracy" -> 
                Around[0.7799567781511858, 0.032632726915895686`], 
                "EvaluationTime" -> 0.00009001277065039584, "TestSize" -> 320,
                 "ModelMemory" -> 118544, 
                "ModelUtility" -> -0.036113975693794376`, "TrainingSize" -> 
                1280, "TrainingTime" -> 10., "TrainingMemory" -> 620808, 
                "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                  Around[0.5069371797463638, 0.04047242341979675]}, 
                "AccuracyHistory" -> {
                  Around[0.7799567781511858, 0.02307482249083861]}], 
               Association[
               "MeanCrossEntropy" -> 
                Around[1.945604624523503, 0.1420968427950817], "Accuracy" -> 
                Around[0.7231089387673061, 0.016032090721455807`], 
                "EvaluationTime" -> 0.000037715054666953724`, "TestSize" -> 
                1550, "ModelMemory" -> 118544, 
                "ModelUtility" -> -1.3732260341254334`, "TrainingSize" -> 50, 
                "TrainingTime" -> 0.7943282347242815, "TrainingMemory" -> 
                513216, "ExperimentCount" -> 1, 
                "MeanCrossEntropyHistory" -> {
                  Around[1.945604624523503, 0.10047764112560108`]}, 
                "AccuracyHistory" -> {
                  Around[0.7231089387673061, 0.01133640006573933]}]}, 
             "PredictedPerformances" -> 
             Association[
              "EvaluationTime" -> 0.000037715054666953724`, 
               "MeanCrossEntropy" -> 
               Around[1.945604624523503, 0.1420968427950817], "ModelMemory" -> 
               118544, "TrainingMemory" -> 513216, "TrainingTime" -> 
               22.709251755588504`], "Index" -> 8], 
           Association[
            "Value" -> "NeuralNetwork", "Options" -> 
             Association[
              "NetworkType" -> Association["Value" -> "FullyConnected"], 
               "NetworkDepth" -> Association["Value" -> 5], 
               "NumberOfParameters" -> Association["Value" -> 304], 
               "ActivationFunction" -> Association["Value" -> "SELU"], 
               "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
               Association["Value" -> None], "NetInitializationMethod" -> 
               Association["Value" -> Automatic], "OptimizationMethod" -> 
               Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
               MaxTrainingRounds -> Association["Value" -> 1000], 
               ValidationSet -> Association["Value" -> Automatic], 
               "EarlyStopping" -> Association["Value" -> False], 
               TrainingProgressReporting -> Association["Value" -> None], 
               "NetTrainOptions" -> Association["Value" -> Automatic], 
               "LossFunction" -> Association["Value" -> Automatic]]] -> 
           Association["Experiments" -> {
               Association[
               "MeanCrossEntropy" -> 
                Around[3.173293044449946, 0.2293678269185188], "Accuracy" -> 
                Around[0.7144308158550247, 0.01619288513506156], 
                "EvaluationTime" -> 0.00003077607365862598, "TestSize" -> 
                1550, "ModelMemory" -> 106512, 
                "ModelUtility" -> -1.8622740907569408`, "TrainingSize" -> 50, 
                "TrainingTime" -> 1.9952623149688797`, "TrainingMemory" -> 
                412280, "ExperimentCount" -> 1, 
                "MeanCrossEntropyHistory" -> {
                  Around[3.173293044449946, 0.16218754580010697`]}, 
                "AccuracyHistory" -> {
                  Around[0.7144308158550247, 0.011450098885976872`]}]}, 
             "PredictedPerformances" -> 
             Association[
              "EvaluationTime" -> 0.00003077607365862598, "MeanCrossEntropy" -> 
               Around[3.173293044449946, 0.2293678269185188], "ModelMemory" -> 
               106512, "TrainingMemory" -> 412280, "TrainingTime" -> 
               33.91945935447096], "Index" -> 9], 
           Association[
            "Value" -> "NeuralNetwork", "Options" -> 
             Association[
              "NetworkType" -> Association["Value" -> "FullyConnected"], 
               "NetworkDepth" -> Association["Value" -> 5], 
               "NumberOfParameters" -> Association["Value" -> 304], 
               "ActivationFunction" -> Association["Value" -> "SELU"], 
               "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
               Association["Value" -> 0.01], "NetInitializationMethod" -> 
               Association["Value" -> Automatic], "OptimizationMethod" -> 
               Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
               MaxTrainingRounds -> Association["Value" -> 30], ValidationSet -> 
               Association["Value" -> Automatic], "EarlyStopping" -> 
               Association["Value" -> False], TrainingProgressReporting -> 
               Association["Value" -> None], "NetTrainOptions" -> 
               Association["Value" -> Automatic], "LossFunction" -> 
               Association["Value" -> Automatic]]] -> 
           Association[
            "Experiments" -> {}, "PredictedPerformances" -> 
             Association[
              "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
               1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 
             10]], 
          TypeSystem`Assoc[
           TypeSystem`Struct[{"Value", "Options"}, {
             TypeSystem`Atom[
              TypeSystem`Enumeration["NeuralNetwork"]], 
             TypeSystem`Assoc[TypeSystem`AnyType, 
              TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 14]}], 
           
           TypeSystem`Struct[{
            "Experiments", "PredictedPerformances", "Index"}, {
             TypeSystem`Vector[
              
              TypeSystem`Struct[{
               "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
                "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime",
                 "TrainingMemory", "ExperimentCount", 
                "MeanCrossEntropyHistory", "AccuracyHistory"}, {
               TypeSystem`AnyType, TypeSystem`AnyType, 
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Integer], 
                TypeSystem`Vector[TypeSystem`AnyType, 1], 
                TypeSystem`Vector[TypeSystem`AnyType, 1]}], 
              TypeSystem`AnyLength], 
             
             TypeSystem`Struct[{
              "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
               "TrainingMemory", "TrainingTime"}, {
               TypeSystem`Atom[Real], TypeSystem`AnyType, 
               TypeSystem`Atom[Integer], 
               TypeSystem`Atom[Integer], 
               TypeSystem`Atom[Real]}], 
             TypeSystem`Atom[Integer]}], 10], 
          Association[]], "MaxTrainingSize" -> 1600, 
        "PreprocessorEvaluationTime" -> 7.171875*^-6, "PreprocessorMemory" -> 
        43400, "InputDimension" -> 4, "OutputDimension" -> 1, 
        "BaselineLogProbability" -> -0.6931471805599453, "VariableBudget" -> 
        True, "CheckpointingInfo" -> Association["Checkpointing" -> False], 
        "UserStop" -> False, "NaturalStop" -> True, "AbortStop" -> False, 
        "RoundPartitioning" -> Dataset[{
           Association[
           "TrainingSizes" -> 10, "TimeBudgets" -> 2.303581432989164, 
            "ElapsedTimes" -> 3.655538, "ExperimentCounts" -> 4], 
           Association[
           "TrainingSizes" -> 50, "TimeBudgets" -> 3.2908306185559515`, 
            "ElapsedTimes" -> 3.565518, "ExperimentCounts" -> 4], 
           Association[
           "TrainingSizes" -> 250, "TimeBudgets" -> 4.701186597937073, 
            "ElapsedTimes" -> 4.678114, "ExperimentCounts" -> 4], 
           Association[
           "TrainingSizes" -> 1280, "TimeBudgets" -> 6.715980854195814, 
            "ElapsedTimes" -> 11.649198, "ExperimentCounts" -> 3]}, 
          TypeSystem`Vector[
           
           TypeSystem`Struct[{
            "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
             "ExperimentCounts"}, {
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer]}], 4], 
          Association[]]], "AnomalyDetector" -> None, "Log" -> 
      Association["Example" -> MachineLearning`MLDataset[
          Association[
          "f1" -> Association[
            "Type" -> "NumericalVector", "Weight" -> 1, 
             "Values" -> {{1.0175, -0.6012, 1.1306, 0.3387}}, "ID" -> 
             4945116782479398484]], 
          Association[
          "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 
           0, "RawExample" -> False]], "TrainingTime" -> 24.676683, 
        "MaxTrainingMemory" -> 1055936, "DataMemory" -> 231352, 
        "FunctionMemory" -> 332760, "LanguageVersion" -> {12.3, 1}, "Date" -> 
        DateObject[{2021, 7, 21, 6, 44, 18.969467`8.030630112597636}, 
          "Instant", "Gregorian", -4.], "ProcessorCount" -> 8, 
        "ProcessorType" -> "x86-64", "OperatingSystem" -> "MacOSX", 
        "SystemWordLength" -> 64, "Evaluations" -> {}]]],
    Editable->False,
    SelectWithContents->True,
    Selectable->False], ",", 
   InterpretationBox[
    RowBox[{
     TagBox["ClassifierFunction",
      "SummaryHead"], "[", 
     DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
      "Ready"}, 
      TemplateBox[{
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]],
                 ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              GraphicsBox[{{
                 PointSize[0.13], 
                 GrayLevel[0.45], 
                 
                 PointBox[{{0.9821769431797024, -0.440194219686987}, {
                  1.1339776261519132`, 0.8056918676854272}, {
                  0.5279892326667741, 0.6574306661126254}, {
                  0.022147046479890797`, 1.4937877187998898`}}], 
                 GrayLevel[0.7], 
                 
                 PointBox[{{-0.9815166384819979, 
                  0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                 GrayLevel[0.55], 
                 AbsoluteThickness[1.5], 
                 LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
               Axes -> {False, False}, AxesLabel -> {None, None}, 
                AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                  AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                Frame -> {{True, True}, {True, True}}, 
                FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                Directive[
                  Thickness[Tiny], 
                  GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}},
                 GridLines -> {None, None}, 
                LabelStyle -> {FontFamily -> "Arial"}, 
                Method -> {"ScalingFunctions" -> None}, 
                PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
               ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}], Frame -> True, FrameTicks -> None, 
               FrameStyle -> Directive[
                 Opacity[0.5], 
                 Thickness[Tiny], 
                 RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
               GrayLevel[0.94]], 
              GridBox[{{
                 RowBox[{
                   TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    TemplateBox[{"\"NumericalVector\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (length: \"", "4", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    
                    TemplateBox[{",", "\",\"", "0", "1"}, 
                    "RowWithSeparators"], "SummaryItem"]}]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
            AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]],
                 ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              GraphicsBox[{{
                 PointSize[0.13], 
                 GrayLevel[0.45], 
                 
                 PointBox[{{0.9821769431797024, -0.440194219686987}, {
                  1.1339776261519132`, 0.8056918676854272}, {
                  0.5279892326667741, 0.6574306661126254}, {
                  0.022147046479890797`, 1.4937877187998898`}}], 
                 GrayLevel[0.7], 
                 
                 PointBox[{{-0.9815166384819979, 
                  0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                 GrayLevel[0.55], 
                 AbsoluteThickness[1.5], 
                 LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
               Axes -> {False, False}, AxesLabel -> {None, None}, 
                AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                  AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                Frame -> {{True, True}, {True, True}}, 
                FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                Directive[
                  Thickness[Tiny], 
                  GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}},
                 GridLines -> {None, None}, 
                LabelStyle -> {FontFamily -> "Arial"}, 
                Method -> {"ScalingFunctions" -> None}, 
                PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
               ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}], Frame -> True, FrameTicks -> None, 
               FrameStyle -> Directive[
                 Opacity[0.5], 
                 Thickness[Tiny], 
                 RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
               GrayLevel[0.94]], 
              GridBox[{{
                 RowBox[{
                   TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    TemplateBox[{"\"NumericalVector\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (length: \"", "4", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    
                    TemplateBox[{",", "\",\"", "0", "1"}, 
                    "RowWithSeparators"], "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["\"GradientBoostedTrees\"", "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                   "\"Number of training examples: \"", 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox["1600", "SummaryItem"]}]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
            AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open$$], ImageSize -> Automatic]},
       "SummaryPanel"],
      DynamicModuleValues:>{}], "]"}],
    ClassifierFunction[
     Association[
     "ExampleNumber" -> 1600, "ClassNumber" -> 2, "Input" -> 
      Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
          Association[
          "Input" -> Association[
            "f1" -> Association["Type" -> "NumericalVector", "Length" -> 4]], 
           "Output" -> 
           Association[
            "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]], 
           "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
             Association["Processors" -> {
                MachineLearning`MLProcessor["List"], 
                MachineLearning`MLProcessor["WrapMLDataset", 
                 Association[
                 "FeatureTypes" -> {"NumericalVector"}, 
                  "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                  "ExampleWeights" -> Automatic, "RawExample" -> 
                  Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                  False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
           "Perfect", "StructurePreserving" -> False, "Missing" -> 
           "Allowed"]], "Processor" -> MachineLearning`MLProcessor["Sequence", 
          Association[
          "Input" -> Association[
            "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]], 
           "Output" -> 
           Association[
            "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]], 
           "Processors" -> {
             MachineLearning`MLProcessor["SynthesizeMissingValues", 
              Association[
              "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
               "StructurePreserving" -> True, "Input" -> 
               Association[
                "f1" -> Association[
                  "Type" -> "NumericalVector", "Weight" -> 1]], 
               "Distribution" -> LearnedDistribution[
                 Association[
                 "ExampleNumber" -> 1600, "Preprocessor" -> 
                  MachineLearning`MLProcessor["ToMLDataset", 
                    Association[
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 4]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Preprocessor" -> MachineLearning`MLProcessor["Identity"],
                     "ScalarFeature" -> True, "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"]], 
                  "Processor" -> MachineLearning`MLProcessor["Identity"], 
                  "PerformanceGoal" -> "DirectTraining", "BatchProcessing" -> 
                  Automatic, "Model" -> 
                  Association[
                   "RotationMatrix" -> {{-0.5041108215238155, 
                    0.23226178624600016`, 0.19819038106515735`, 
                    0.8078659016975831}, {-0.461106747812554, \
-0.7958805271719253, 
                    0.36336399916877316`, -0.14805862925997806`}, \
{-0.48035637259441666`, -0.10792855135345313`, -0.8686287475938388, \
-0.0556172811654594}, {-0.550009638144867, 0.5486165117102296, 
                    0.2723440394333652, -0.5677482234333892}}, 
                    "Precisions" -> {0.5574805492519408, 0.9644028697870368, 
                    1.030191063790751, 1.0470916487775075`}, "NoisePrecision" -> 
                    None, "Processor" -> MachineLearning`MLProcessor["Center", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {-0.024486, 0.017446125000000014`, 
                    0.023254500000000008`, -0.04157150000000003}, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Version" -> {12.3, 1}, "ID" -> 2580788735436893886]], 
                    "PostProcessor" -> 
                    MachineLearning`MLProcessor["FirstValues", 
                    Association[
                    "Info" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1], "Key" -> 
                    "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
                    False, "Missing" -> "Allowed"]], "Method" -> 
                    "Multinormal", "Options" -> 
                    Association[
                    "CovarianceType" -> 
                    Association[
                    "Value" -> "Full", "Options" -> Association[]], 
                    "IntrinsicDimension" -> 
                    Association["Value" -> 4, "Options" -> Association[]]]], 
                  "TrainingInformation" -> 
                  Association["Configurations" -> Dataset[
                    Association[
                    Association[
                    "Value" -> "Multinormal", "Options" -> 
                    Association[
                    "CovarianceType" -> Association["Value" -> "Full"], 
                    "IntrinsicDimension" -> 
                    Association["Value" -> "Heuristic"]], "NaiveImputer" -> 
                    MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {-0.024486000000000115`, 0.01744612500000006, 
                    0.023254500000000036`, -0.0415715}, 
                    "StandardDeviation" -> {1.083148516659419, 
                    1.0896325739314534`, 1.0776541299065996`, 
                    1.111110840285635}, "Method" -> "NaiveSampler", 
                    "VectorLength" -> 4, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector", "Version" -> {12.3, 1}, "ID" -> 
                    4747808072524423015]], "EMIterations" -> 1] -> 
                    Association[]], 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], 
                    Association[]], "BestModelInformation" -> Dataset[
                    Association[
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]], 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], 
                    Association[]]], "NaiveImputer" -> 
                  MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {-0.024486000000000115`, 0.01744612500000006, 
                    0.023254500000000036`, -0.0415715}, 
                    "StandardDeviation" -> {1.083148516659419, 
                    1.0896325739314534`, 1.0776541299065996`, 
                    1.111110840285635}, "Method" -> "NaiveSampler", 
                    "VectorLength" -> 4, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector", "Version" -> {12.3, 1}, "ID" -> 
                    4747808072524423015]], "InputDimension" -> 0, 
                  "OutputDimension" -> 4, "Log" -> 
                  Association["Example" -> MachineLearning`MLDataset[
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1, 
                    "Values" -> {{-0.6117, 0.6019, -0.7292, 0.3337}}, "ID" -> 
                    3791095496786132862]], 
                    Association[
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False]], 
                    "TrainingTime" -> 0.063472, "MaxTrainingMemory" -> 369928,
                     "DataMemory" -> 58256, "FunctionMemory" -> 29624, 
                    "LanguageVersion" -> {12.3, 1}, "Date" -> 
                    DateObject[{
                    2021, 7, 21, 6, 44, 19.042543`8.032299928925312}, 
                    "Instant", "Gregorian", -4.], "ProcessorCount" -> 8, 
                    "ProcessorType" -> "x86-64", "OperatingSystem" -> 
                    "MacOSX", "SystemWordLength" -> 64, "Evaluations" -> {}], 
                  "LogPDFDistribution" -> 
                  MachineLearning`TailedQuantileDistribution[
                    Association[
                    "Quantiles" -> {-1.7002036319221554`, \
-1.7002036319221554`, -1.5158296162622096`, -1.5098043558154934`, \
-1.4153825373937297`, -1.3506560502932117`, -1.3011716007190866`, \
-1.2976515862432239`, -1.2925539573853861`, -1.1369732776196362`, \
-1.0963552773431868`}, "LeftBoundary" -> -1.5158296162622096`, "LeftScale" -> 
                    0.09218700782997291, "LeftTailNorm" -> 0.2]], "Entropy" -> 
                  Around[5.4466327563989285`, 0.2296804725553272], 
                  "EntropySampleSize" -> 10]], "Output" -> 
               Association[
                "f1" -> Association[
                  "Type" -> "NumericalVector", "Weight" -> 1]], 
               "EvaluationStrategy" -> "ModeFinding", "Version" -> {12.3, 1}, 
               "ID" -> 895810465636885430]], 
             MachineLearning`MLProcessor["Standardize", 
              Association[
              "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
               "StructurePreserving" -> True, "Input" -> 
               Association[
                "f1" -> Association[
                  "Type" -> "NumericalVector", "Weight" -> 1]], 
               "Mean" -> {-0.024486000000000115`, 0.01744612500000006, 
                0.023254500000000036`, -0.0415715}, 
               "StandardDeviation" -> {1.083148516659419, 1.0896325739314534`,
                 1.0776541299065996`, 1.111110840285635}, "Output" -> 
               Association[
                "f1" -> Association[
                  "Type" -> "NumericalVector", "Weight" -> 1]], 
               "Version" -> {12.3, 1}, "ID" -> 8976635278615968024]]}, 
           "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
           "Missing" -> "Imputed"]]], "Output" -> 
      Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
          Association[
          "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
           "Output" -> 
           Association[
            "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
           "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
             Association["Processors" -> {
                MachineLearning`MLProcessor["List"], 
                MachineLearning`MLProcessor["WrapMLDataset", 
                 Association[
                 "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                  "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                  Automatic, "RawExample" -> 
                  Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                  False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
           "Perfect", "StructurePreserving" -> False, "Missing" -> 
           "Allowed"]], "Processor" -> MachineLearning`MLProcessor["Sequence", 
          Association[
          "Input" -> Association[
            "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
           "Output" -> 
           Association[
            "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
           "Processors" -> {
             MachineLearning`MLProcessor["ToVector", 
              Association[
              "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
               "StructurePreserving" -> True, "Input" -> 
               Association[
                "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
               "Output" -> 
               Association[
                "f1" -> Association[
                  "Type" -> "NominalVector", "Weight" -> 1]], 
               "Version" -> {12.3, 1}, "ID" -> 7385217781795203165]], 
             MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
              Association[
              "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
               "StructurePreserving" -> True, "Input" -> 
               Association[
                "f1" -> Association[
                  "Type" -> "NominalVector", "Weight" -> 1]], "Index" -> {
                 Association[0 -> 1, 1 -> 2]}, "MissingCode" -> 0, 
               "Version" -> {12.3, 1}, "ID" -> 9072788647140281776, "Output" -> 
               Association[
                "f1" -> Association[
                  "Type" -> "NominalVector", "Weight" -> 1]]]], 
             MachineLearning`MLProcessor["FromVector", 
              Association[
              "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
               "StructurePreserving" -> True, "Input" -> 
               Association[
                "f1" -> Association[
                  "Type" -> "NominalVector", "Weight" -> 1, 
                   "SetSize" -> {2}]], "Output" -> 
               Association[
                "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
               "Version" -> {12.3, 1}, "ID" -> 8667766357427704565]], 
             MachineLearning`MLProcessor["FirstValues", 
              Association[
              "Info" -> Association[
                "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2], "Key" -> 
               "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
               False, "Missing" -> "Allowed"]]}, "Invertibility" -> "Perfect",
            "StructurePreserving" -> False, "Missing" -> "Allowed"]], 
        "ProbabilityPostprocessor" -> Identity, "Name" -> "class", "Marginal" -> 
        Association[0 -> 0.5, 1 -> 0.5]], "LabelSplitter" -> 
      MachineLearning`MLProcessor["FeatureLabelSplit", 
        Association[
        "Processor" -> MachineLearning`MLProcessor["AssociationSplit"], 
         "PreferLabeled" -> True, "KeepLabelsFormat" -> False]], 
      "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
      "Prior" -> Automatic, "Utility" -> 
      SparseArray[
       Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
      "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
      Automatic, "BatchProcessing" -> Automatic, "Model" -> 
      Association["Trees" -> {
          MachineLearning`DecisionTree[
           Association[
           "FeatureIndices" -> RawArray["Integer16",{2, 4}], 
            "NumericalThresholds" -> {0.09996100887656213, 
             0.28825861215591436`}, "LeafValues" -> 
            RawArray["Real32",{
              0.24808362126350403`, -0.17032967507839203`, \
-0.061744965612888336`}], "Children" -> 
            RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {}, 
            "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
            0]], 
          MachineLearning`DecisionTree[
           Association[
           "FeatureIndices" -> RawArray["Integer16",{3, 4}], 
            "NumericalThresholds" -> {0.02095720544457436, 
             0.31298246979713445`}, "LeafValues" -> 
            RawArray["Real32",{
              0.23375363647937775`, -0.1509903073310852, \
-0.05778083577752113}], "Children" -> 
            RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {}, 
            "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
            0]], 
          MachineLearning`DecisionTree[
           Association[
           "FeatureIndices" -> RawArray["Integer16",{4, 2}], 
            "NumericalThresholds" -> {-0.2812905758619308, \
-0.49108739197254175`}, "LeafValues" -> 
            RawArray["Real32",{0.16181980073451996`, 
              0.09846169501543045, -0.1806255578994751}], "Children" -> 
            RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
            "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
            0]], 
          MachineLearning`DecisionTree[
           Association[
           "FeatureIndices" -> RawArray["Integer16",{1, 2}], 
            "NumericalThresholds" -> {
             0.0359513033181429, -0.9489707350730895}, "LeafValues" -> 
            RawArray["Real32",{0.12005418539047241`, 
              0.16913948953151703`, -0.16855497658252716`}], "Children" -> 
            RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
            "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
            0]], 
          MachineLearning`DecisionTree[
           Association[
           "FeatureIndices" -> RawArray["Integer16",{3, 4}], 
            "NumericalThresholds" -> {
             0.02095720544457436, -0.18955536931753156`}, "LeafValues" -> 
            RawArray["Real32",{0.21109142899513245`, -0.11452772468328476`, 
              0.012100405991077423`}], "Children" -> 
            RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {}, 
            "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
            0]], 
          MachineLearning`DecisionTree[
           Association[
           "FeatureIndices" -> RawArray["Integer16",{2, 1}], 
            "NumericalThresholds" -> {
             0.09996100887656213, -0.18252301961183545`}, "LeafValues" -> 
            RawArray["Real32",{
              0.20406581461429596`, -0.11353249102830887`, \
-0.004694771952927113}], "Children" -> 
            RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {}, 
            "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
            0]], 
          MachineLearning`DecisionTree[
           Association[
           "FeatureIndices" -> RawArray["Integer16",{4, 3}], 
            "NumericalThresholds" -> {-0.18955536931753156`, \
-0.7810481786727904}, "LeafValues" -> 
            RawArray["Real32",{0.10897547751665115`, 
              0.11732356250286102`, -0.12214115262031555`}], "Children" -> 
            RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
            "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
            0]], 
          MachineLearning`DecisionTree[
           Association[
           "FeatureIndices" -> RawArray["Integer16",{1, 2}], 
            "NumericalThresholds" -> {-0.84335258603096, -0.9489707350730895},
             "LeafValues" -> 
            RawArray["Real32",{0.18465915322303772`, 
              0.15786048769950867`, -0.08256623148918152}], "Children" -> 
            RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
            "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
            0]], 
          MachineLearning`DecisionTree[
           Association[
           "FeatureIndices" -> RawArray["Integer16",{3, 4}], 
            "NumericalThresholds" -> {
             0.06296396628022195, -0.8534927070140838}, "LeafValues" -> 
            RawArray["Real32",{0.08184771239757538, 
              0.12048158049583435`, -0.1267727017402649}], "Children" -> 
            RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
            "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
            0]], 
          MachineLearning`DecisionTree[
           Association[
           "FeatureIndices" -> RawArray["Integer16",{2, 1}], 
            "NumericalThresholds" -> {0.37946313619613653`, 
             0.45372660458087927`}, "LeafValues" -> 
            RawArray["Real32",{
              0.11576755344867706`, -0.1080540344119072, \
-0.06327499449253082}], "Children" -> 
            RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {}, 
            "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
            0]], 
          MachineLearning`DecisionTree[
           Association[
           "FeatureIndices" -> RawArray["Integer16",{4, 1}], 
            "NumericalThresholds" -> {-0.37528359889984125`, 
             0.6881172657012941}, "LeafValues" -> 
            RawArray["Real32",{
              0.101219043135643, -0.008414629846811295, \
-0.18183933198451996`}], "Children" -> 
            RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
            "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
            0]], 
          MachineLearning`DecisionTree[
           Association[
           "FeatureIndices" -> RawArray["Integer16",{3, 1}], 
            "NumericalThresholds" -> {-0.33028735220432276`, \
-1.4169657826423643`}, "LeafValues" -> 
            RawArray["Real32",{0.09460343420505524, 
              0.22655406594276428`, -0.07413206994533539}], "Children" -> 
            RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
            "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
            0]], 
          MachineLearning`DecisionTree[
           Association[
           "FeatureIndices" -> RawArray["Integer16",{2, 4}], 
            "NumericalThresholds" -> {0.5367634892463685, 0.4412696063518525},
             "LeafValues" -> 
            RawArray["Real32",{
              0.09478425234556198, -0.10514701902866364`, \
-0.05062083154916763}], "Children" -> 
            RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {}, 
            "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
            0]], 
          MachineLearning`DecisionTree[
           Association[
           "FeatureIndices" -> RawArray["Integer16",{1, 2}], 
            "NumericalThresholds" -> {-0.4213752448558807, \
-0.9489707350730895}, "LeafValues" -> 
            RawArray["Real32",{0.0991579219698906, 
              0.11498714983463287`, -0.07102074474096298}], "Children" -> 
            RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
            "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
            0]], 
          MachineLearning`DecisionTree[
           Association[
           "FeatureIndices" -> RawArray["Integer16",{3, 2}], 
            "NumericalThresholds" -> {-0.7810481786727904, \
-0.9489707350730895}, "LeafValues" -> 
            RawArray["Real32",{0.12459810823202133`, 
              0.1152976006269455, -0.05847343057394028}], "Children" -> 
            RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
            "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
            0]], 
          MachineLearning`DecisionTree[
           Association[
           "FeatureIndices" -> RawArray["Integer16",{4, 1}], 
            "NumericalThresholds" -> {-0.8534927070140838, 
             1.0560503005981448`}, "LeafValues" -> 
            RawArray["Real32",{
              0.12094432860612869`, -0.0006179622723720968, \
-0.17993208765983582`}], "Children" -> 
            RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
            "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
            0]], 
          MachineLearning`DecisionTree[
           Association[
           "FeatureIndices" -> RawArray["Integer16",{2, 4}], 
            "NumericalThresholds" -> {1.2513458132743838`, 
             1.0607950091362002`}, "LeafValues" -> 
            RawArray["Real32",{
              0.04530726373195648, -0.16571050882339478`, \
-0.12516048550605774`}], "Children" -> 
            RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {}, 
            "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
            0]], 
          MachineLearning`DecisionTree[
           Association[
           "FeatureIndices" -> RawArray["Integer16",{3, 2}], 
            "NumericalThresholds" -> {0.10383496060967447`, 
             1.6158518195152285`}, "LeafValues" -> 
            RawArray["Real32",{
              0.06697451323270798, -0.06119896471500397, \
-0.2413633018732071}], "Children" -> 
            RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {}, 
            "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
            0]], 
          MachineLearning`DecisionTree[
           Association[
           "FeatureIndices" -> RawArray["Integer16",{1, 4}], 
            "NumericalThresholds" -> {-0.84335258603096, 1.4658679366111758`},
             "LeafValues" -> 
            RawArray["Real32",{
              0.11599305272102356`, -0.011025629937648773`, \
-0.23108771443367004`}], "Children" -> 
            RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
            "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
            0]], 
          MachineLearning`DecisionTree[
           Association[
           "FeatureIndices" -> RawArray["Integer16",{3, 1}], 
            "NumericalThresholds" -> {
             1.2898983955383303`, -0.2537651360034942}, "LeafValues" -> 
            RawArray["Real32",{
              0.08513471484184265, -0.15890823304653168`, \
-0.025777507573366165`}], "Children" -> 
            RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {}, 
            "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
            0]], 
          MachineLearning`DecisionTree[
           Association[
           "FeatureIndices" -> RawArray["Integer16",{2, 1}], 
            "NumericalThresholds" -> {-0.438401848077774, \
-1.4169657826423643`}, "LeafValues" -> 
            RawArray["Real32",{0.07103801518678665, 
              0.18597137928009033`, -0.0467747338116169}], "Children" -> 
            RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
            "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
            0]], 
          MachineLearning`DecisionTree[
           Association[
           "FeatureIndices" -> RawArray["Integer16",{3, 4}], 
            "NumericalThresholds" -> {-1.1871486902236936`, 
             0.015295735560357572`}, "LeafValues" -> 
            RawArray["Real32",{0.13955499231815338`, 
              0.035022590309381485`, -0.06501894444227219}], "Children" -> 
            RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
            "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
            0]], 
          MachineLearning`DecisionTree[
           Association[
           "FeatureIndices" -> RawArray["Integer16",{2, 3}], 
            "NumericalThresholds" -> {1.6158518195152285`, 
             0.5507004857063295}, "LeafValues" -> 
            RawArray["Real32",{
              0.040554460138082504`, -0.20259705185890198`, \
-0.061853814870119095`}], "Children" -> 
            RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {}, 
            "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
            0]], 
          MachineLearning`DecisionTree[
           Association[
           "FeatureIndices" -> RawArray["Integer16",{4, 1}], 
            "NumericalThresholds" -> {1.4658679366111758`, 
             1.4811600446701052`}, "LeafValues" -> 
            RawArray["Real32",{
              0.022356824949383736`, -0.17233876883983612`, \
-0.15599817037582397`}], "Children" -> 
            RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {}, 
            "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
            0]], 
          MachineLearning`DecisionTree[
           Association[
           "FeatureIndices" -> RawArray["Integer16",{4, 3}], 
            "NumericalThresholds" -> {-0.7014126777648925, 
             1.2898983955383303`}, "LeafValues" -> 
            RawArray["Real32",{
              0.07726655900478363, -0.0071950345300138, \
-0.17746704816818237`}], "Children" -> 
            RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
            "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
            0]], 
          MachineLearning`DecisionTree[
           Association[
           "FeatureIndices" -> RawArray["Integer16",{2, 3}], 
            "NumericalThresholds" -> {
             0.8962837755680085, -0.7810481786727904}, "LeafValues" -> 
            RawArray["Real32",{
              0.10578245669603348`, -0.09137662500143051, \
-0.00186410010792315}], "Children" -> 
            RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {}, 
            "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
            0]], 
          MachineLearning`DecisionTree[
           Association[
           "FeatureIndices" -> RawArray["Integer16",{2, 1}], 
            "NumericalThresholds" -> {-0.9489707350730895, 
             1.4072325825691225`}, "LeafValues" -> 
            RawArray["Real32",{
              
              0.09419884532690048, -0.0034994008019566536`, \
-0.1937720626592636}], "Children" -> 
            RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
            "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
            0]], 
          MachineLearning`DecisionTree[
           Association[
           "FeatureIndices" -> RawArray["Integer16",{4, 2}], 
            "NumericalThresholds" -> {1.643294155597687, 1.8018051981925967`},
             "LeafValues" -> 
            RawArray["Real32",{
              0.014087360352277756`, -0.1885422319173813, \
-0.21109969913959503`}], "Children" -> 
            RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {}, 
            "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
            0]], 
          MachineLearning`DecisionTree[
           Association[
           "FeatureIndices" -> RawArray["Integer16",{1, 4}], 
            "NumericalThresholds" -> {-0.84335258603096, 0.9430817365646363}, 
            "LeafValues" -> 
            RawArray["Real32",{
              0.0802416056394577, -0.0002981996804010123, \
-0.10990460962057114`}], "Children" -> 
            RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
            "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
            0]], 
          MachineLearning`DecisionTree[
           Association[
           "FeatureIndices" -> RawArray["Integer16",{2, 3}], 
            "NumericalThresholds" -> {-1.854163587093353, \
-0.8728262484073638}, "LeafValues" -> 
            RawArray["Real32",{0.19506865739822388`, 
              0.07013608515262604, -0.02237803302705288}], "Children" -> 
            RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
            "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
            0]], 
          MachineLearning`DecisionTree[
           Association[
           "FeatureIndices" -> RawArray["Integer16",{4, 1}], 
            "NumericalThresholds" -> {-0.8534927070140838, 
             0.6708325445652009}, "LeafValues" -> 
            RawArray["Real32",{0.07439253479242325, 
              0.006682927254587412, -0.09358098357915878}], "Children" -> 
            RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
            "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
            0]], 
          MachineLearning`DecisionTree[
           Association[
           "FeatureIndices" -> RawArray["Integer16",{2, 1}], 
            "NumericalThresholds" -> {
             0.09070279449224473, -1.3804886937141416`}, "LeafValues" -> 
            RawArray["Real32",{0.031361017376184464`, 
              0.15196102857589722`, -0.049310386180877686`}], "Children" -> 
            RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
            "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
            0]], 
          MachineLearning`DecisionTree[
           Association[
           "FeatureIndices" -> RawArray["Integer16",{3, 2}], 
            "NumericalThresholds" -> {
             1.2898983955383303`, -1.7500407695770261`}, "LeafValues" -> 
            RawArray["Real32",{0.20164990425109863`, -0.10582050681114197`, 
              0.003359920345246792}], "Children" -> 
            RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {}, 
            "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
            0]], 
          MachineLearning`DecisionTree[
           Association[
           "FeatureIndices" -> RawArray["Integer16",{4, 2}], 
            "NumericalThresholds" -> {-1.9395387172698972`, 
             1.8018051981925967`}, "LeafValues" -> 
            RawArray["Real32",{0.21651384234428406`, 
              0.000141751894261688, -0.19454561173915863`}], "Children" -> 
            RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
            "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
            0]], 
          MachineLearning`DecisionTree[
           Association[
           "FeatureIndices" -> RawArray["Integer16",{4, 3}], 
            "NumericalThresholds" -> {
             1.643294155597687, -1.1871486902236936`}, "LeafValues" -> 
            RawArray["Real32",{
              0.09864506125450134, -0.15852883458137512`, \
-0.004411163739860058}], "Children" -> 
            RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {}, 
            "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
            0]], 
          MachineLearning`DecisionTree[
           Association[
           "FeatureIndices" -> RawArray["Integer16",{1, 4}], 
            "NumericalThresholds" -> {-1.4169657826423643`, 
             1.7177370190620425`}, "LeafValues" -> 
            RawArray["Real32",{
              0.1190529316663742, -0.003021674696356058, \
-0.2073795646429062}], "Children" -> 
            RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
            "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
            0]], 
          MachineLearning`DecisionTree[
           Association[
           "FeatureIndices" -> RawArray["Integer16",{2, 4}], 
            "NumericalThresholds" -> {
             1.6158518195152285`, -0.18955536931753156`}, "LeafValues" -> 
            RawArray["Real32",{
              0.042411401867866516`, -0.14406608045101166`, \
-0.02036410942673683}], "Children" -> 
            RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {}, 
            "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
            0]], 
          MachineLearning`DecisionTree[
           Association[
           "FeatureIndices" -> RawArray["Integer16",{3, 4}], 
            "NumericalThresholds" -> {
             0.5507004857063295, -1.7644701600074766`}, "LeafValues" -> 
            RawArray["Real32",{0.22324725985527039`, -0.04401044547557831, 
              0.011481126770377159`}], "Children" -> 
            RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {}, 
            "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
            0]], 
          MachineLearning`DecisionTree[
           Association[
           "FeatureIndices" -> RawArray["Integer16",{2, 3}], 
            "NumericalThresholds" -> {0.6710157692432405, 0.8588789403438569},
             "LeafValues" -> 
            RawArray["Real32",{
              0.01543350238353014, -0.018228396773338318`, \
-0.18739064037799835`}], "Children" -> 
            RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
            "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
            0]], 
          MachineLearning`DecisionTree[
           Association[
           "FeatureIndices" -> RawArray["Integer16",{1, 2}], 
            "NumericalThresholds" -> {2.077810645103455, -0.9489707350730895},
             "LeafValues" -> 
            RawArray["Real32",{
              0.0705442875623703, -0.19641822576522827`, \
-0.007271747104823589}], "Children" -> 
            RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {}, 
            "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
            0]], 
          MachineLearning`DecisionTree[
           Association[
           "FeatureIndices" -> RawArray["Integer16",{1, 3}], 
            "NumericalThresholds" -> {-0.2537651360034942, 
             1.2898983955383303`}, "LeafValues" -> 
            RawArray["Real32",{
              0.05295514687895775, -0.020692454650998116`, \
-0.16030678153038025`}], "Children" -> 
            RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {}, 
            "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
            0]], 
          MachineLearning`DecisionTree[
           Association[
           "FeatureIndices" -> RawArray["Integer16",{3, 2}], 
            "NumericalThresholds" -> {-2.0141659975051875`, 
             1.2513458132743838`}, "LeafValues" -> 
            RawArray["Real32",{0.18771062791347504`, 
              0.004571282770484686, -0.08964845538139343}], "Children" -> 
            RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
            "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
            0]], 
          MachineLearning`DecisionTree[
           Association[
           "FeatureIndices" -> RawArray["Integer16",{1, 4}], 
            "NumericalThresholds" -> {-1.3804886937141416`, 
             1.4658679366111758`}, "LeafValues" -> 
            RawArray["Real32",{
              0.0949457511305809, -0.0004556626081466675, \
-0.13171741366386414`}], "Children" -> 
            RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
            "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
            0]], 
          MachineLearning`DecisionTree[
           Association[
           "FeatureIndices" -> RawArray["Integer16",{4, 2}], 
            "NumericalThresholds" -> {-1.9395387172698972`, \
-1.854163587093353}, "LeafValues" -> 
            RawArray["Real32",{0.18423128128051758`, 
              0.14631251990795135`, -0.007306781597435474}], "Children" -> 
            RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
            "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
            0]], 
          MachineLearning`DecisionTree[
           Association[
           "FeatureIndices" -> RawArray["Integer16",{1, 2}], 
            "NumericalThresholds" -> {
             1.4072325825691225`, -0.9216222763061522}, "LeafValues" -> 
            RawArray["Real32",{0.006280730944126844, 
              0.16853633522987366`, -0.15289251506328583`}], "Children" -> 
            RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
            "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
            0]], 
          MachineLearning`DecisionTree[
           Association[
           "FeatureIndices" -> RawArray["Integer16",{4, 3}], 
            "NumericalThresholds" -> {-0.18955536931753156`, 
             1.2898983955383303`}, "LeafValues" -> 
            RawArray["Real32",{
              0.028540149331092834`, -0.008029182441532612, \
-0.1631496548652649}], "Children" -> 
            RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
            "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
            0]], 
          MachineLearning`DecisionTree[
           Association[
           "FeatureIndices" -> RawArray["Integer16",{1, 2}], 
            "NumericalThresholds" -> {2.3083643913269047`, 
             1.8018051981925967`}, "LeafValues" -> 
            RawArray["Real32",{
              0.005508211441338062, -0.2521110773086548, \
-0.1555941104888916}], "Children" -> 
            RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {}, 
            "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
            0]], 
          MachineLearning`DecisionTree[
           Association[
           "FeatureIndices" -> RawArray["Integer16",{4, 3}], 
            "NumericalThresholds" -> {
             1.9634817838668825`, -0.6500531435012816}, "LeafValues" -> 
            RawArray["Real32",{
              0.043994855135679245`, -0.2359885573387146, \
-0.010201649740338326`}], "Children" -> 
            RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {}, 
            "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
            0]], 
          MachineLearning`DecisionTree[
           Association[
           "FeatureIndices" -> RawArray["Integer16",{1, 4}], 
            "NumericalThresholds" -> {-0.4860141575336456, 
             0.9430817365646363}, "LeafValues" -> 
            RawArray["Real32",{0.03575117513537407, 
              0.00032405322417616844`, -0.08949173241853714}], "Children" -> 
            RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
            "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
            0]], 
          MachineLearning`DecisionTree[
           Association[
           "FeatureIndices" -> RawArray["Integer16",{2, 3}], 
            "NumericalThresholds" -> {
             0.49307277798652654`, -0.7810481786727904}, "LeafValues" -> 
            RawArray["Real32",{0.0744088813662529, -0.03211132064461708, 
              0.0007691857754252851}], "Children" -> 
            RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {}, 
            "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
            0]]}, "ClassNumber" -> 2, "IterationsNumber" -> 50, "Processor" -> 
        MachineLearning`MLProcessor["Sequence", 
          Association[
          "Input" -> Association[
            "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]], 
           "Output" -> 
           Association[
            "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]], 
           "Processors" -> {
             MachineLearning`MLProcessor["DensifyNumericalVector", 
              Association[
              "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
               "StructurePreserving" -> True, "Input" -> 
               Association[
                "f1" -> Association[
                  "Type" -> "NumericalVector", "Weight" -> 1]], 
               "Version" -> {12.3, 1}, "ID" -> 8863445465690555306, "Output" -> 
               Association[
                "f1" -> Association[
                  "Type" -> "NumericalVector", "Weight" -> 1]]]], 
             MachineLearning`MLProcessor["FirstValues", 
              Association[
              "Info" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1], "Key" -> "f1", 
               "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
               "Missing" -> "Allowed"]]}, "Invertibility" -> "Perfect", 
           "StructurePreserving" -> False, "Missing" -> "Allowed"]], 
        "Calibrator" -> None, "Method" -> "GradientBoostedTrees", 
        "PostProcessor" -> MachineLearning`MLProcessor["Identity"], "Options" -> 
        Association[
         "BoostingMethod" -> 
          Association["Value" -> "Gradient", "Options" -> Association[]], 
          MaxTrainingRounds -> 
          Association["Value" -> 50, "Options" -> Association[]], 
          "LeavesNumber" -> 
          Association["Value" -> 3, "Options" -> Association[]], 
          "LearningRate" -> 
          Association["Value" -> 0.2, "Options" -> Association[]], 
          ValidationSet -> 
          Association["Value" -> Automatic, "Options" -> Association[]], 
          "MaxBinNumber" -> 
          Association["Value" -> 255, "Options" -> Association[]], 
          "ThreadNumber" -> 
          Association["Value" -> 8, "Options" -> Association[]], "MaxDepth" -> 
          Association["Value" -> 6, "Options" -> Association[]], "LeafSize" -> 
          Association["Value" -> 3, "Options" -> Association[]], 
          "FeatureFraction" -> 
          Association["Value" -> 1, "Options" -> Association[]], 
          "BaggingFraction" -> 
          Association["Value" -> 1, "Options" -> Association[]], 
          "BaggingFrequency" -> 
          Association["Value" -> 0, "Options" -> Association[]], 
          "MinGainToSplit" -> 
          Association["Value" -> 0, "Options" -> Association[]], 
          "L1Regularization" -> 
          Association["Value" -> 0, "Options" -> Association[]], 
          "L2Regularization" -> 
          Association["Value" -> 0, "Options" -> Association[]], 
          "LossFunction" -> 
          Association["Value" -> Automatic, "Options" -> Association[]]]], 
      "TrainingInformation" -> 
      Association[
       "PanelCell" -> None, "TrainingFunction" -> Classify, "EMIterations" -> 
        Missing["KeyAbsent", "EMIterations"], "ProcessorEntropyShift" -> 0, 
        "PreprocessingTime" -> 0.236065`5.824576595002307, "LossName" -> 
        "MeanCrossEntropy", "BestModelInformation" -> Dataset[
          Association[
          "MeanCrossEntropy" -> 
           Around[0.446902752128985, 0.04608610268426851], "Accuracy" -> 
           Around[0.8207927976671314, 0.03114137447426191], "EvaluationTime" -> 
           0.0000630957344480193, "TestSize" -> 300, "ModelMemory" -> 116248, 
           "ModelUtility" -> 0.09184750840904243, "TrainingSize" -> 1280, 
           "TrainingTime" -> 0.05011872336272722, "TrainingMemory" -> 355176, 
           "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
             Around[0.446902752128985, 0.03258779572650581]}, 
           "AccuracyHistory" -> {
             Around[0.8207927976671314, 0.022020277066220253`]}, 
           "Configuration" -> {
            "GradientBoostedTrees", "BoostingMethod" -> "Gradient", 
             MaxTrainingRounds -> 50, "LeavesNumber" -> 3, "LearningRate" -> 
             0.2, ValidationSet -> Automatic, "MaxBinNumber" -> 255, 
             "ThreadNumber" -> 8, "MaxDepth" -> 6, "LeafSize" -> 3, 
             "FeatureFraction" -> 1, "BaggingFraction" -> 1, 
             "BaggingFrequency" -> 0, "MinGainToSplit" -> 0, 
             "L1Regularization" -> 0, "L2Regularization" -> 0, "LossFunction" -> 
             Automatic}, "FinalTrainingSize" -> 1600], 
          
          TypeSystem`Struct[{
           "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
            "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
            "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
            "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
           TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Integer], 
            TypeSystem`Atom[Integer], 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Integer], 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Integer], 
            TypeSystem`Atom[Integer], 
            TypeSystem`Vector[TypeSystem`AnyType, 1], 
            TypeSystem`Vector[TypeSystem`AnyType, 1], 
            TypeSystem`Vector[TypeSystem`AnyType, 17], 
            TypeSystem`Atom[Integer]}], 
          Association[]], "Configurations" -> Dataset[
          Association[
          Association[
            "Value" -> "GradientBoostedTrees", "Options" -> 
             Association[
              "BoostingMethod" -> Association["Value" -> "Gradient"], 
               MaxTrainingRounds -> Association["Value" -> 50], 
               "LeavesNumber" -> Association["Value" -> 60], "LearningRate" -> 
               Association["Value" -> 0.2], ValidationSet -> 
               Association["Value" -> Automatic], "MaxBinNumber" -> 
               Association["Value" -> 255], "ThreadNumber" -> 
               Association["Value" -> 8], "MaxDepth" -> 
               Association["Value" -> 6], "LeafSize" -> 
               Association["Value" -> 3], "FeatureFraction" -> 
               Association["Value" -> 1], "BaggingFraction" -> 
               Association["Value" -> 1], "BaggingFrequency" -> 
               Association["Value" -> 0], "MinGainToSplit" -> 
               Association["Value" -> 0], "L1Regularization" -> 
               Association["Value" -> 0], "L2Regularization" -> 
               Association["Value" -> 0], "LossFunction" -> 
               Association["Value" -> Automatic]]] -> 
           Association["Experiments" -> {
               Association[
               "MeanCrossEntropy" -> 
                Around[3.1181805475203888`, 0.41590433630620527`], "Accuracy" -> 
                Around[0.6443333138884328, 0.04768784733380756], 
                "EvaluationTime" -> 0.0000501187233627272, "TestSize" -> 200, 
                "ModelMemory" -> 94096, 
                "ModelUtility" -> -1.8567274014765434`, "TrainingSize" -> 10, 
                "TrainingTime" -> 0.03981071705534971, "TrainingMemory" -> 
                206304, "ExperimentCount" -> 1, 
                "MeanCrossEntropyHistory" -> {
                  Around[3.1181805475203888`, 0.29408877652700816`]}, 
                "AccuracyHistory" -> {
                  Around[0.6443333138884328, 0.03372040022992415]}]}, 
             "PredictedPerformances" -> 
             Association[
              "EvaluationTime" -> 0.0000501187233627272, "MeanCrossEntropy" -> 
               Around[3.1181805475203888`, 0.41590433630620527`], 
               "ModelMemory" -> 94096, "TrainingMemory" -> 206304, 
               "TrainingTime" -> 0.6767821899409451], "Index" -> 1], 
           Association[
            "Value" -> "GradientBoostedTrees", "Options" -> 
             Association[
              "BoostingMethod" -> Association["Value" -> "Gradient"], 
               MaxTrainingRounds -> Association["Value" -> 50], 
               "LeavesNumber" -> Association["Value" -> 6], "LearningRate" -> 
               Association["Value" -> 0.1], ValidationSet -> 
               Association["Value" -> Automatic], "MaxBinNumber" -> 
               Association["Value" -> 255], "ThreadNumber" -> 
               Association["Value" -> 8], "MaxDepth" -> 
               Association["Value" -> 6], "LeafSize" -> 
               Association["Value" -> 90], "FeatureFraction" -> 
               Association["Value" -> 1], "BaggingFraction" -> 
               Association["Value" -> 1], "BaggingFrequency" -> 
               Association["Value" -> 0], "MinGainToSplit" -> 
               Association["Value" -> 0], "L1Regularization" -> 
               Association["Value" -> 0], "L2Regularization" -> 
               Association["Value" -> 0], "LossFunction" -> 
               Association["Value" -> Automatic]]] -> 
           Association["Experiments" -> {
               Association[
               "MeanCrossEntropy" -> 
                Around[0.6931471805599457, 0.0048020198472070695`], 
                "Accuracy" -> Around[0.5000000000000004, 0.04072264414124129],
                 "EvaluationTime" -> 0.000027286835077291797`, "TestSize" -> 
                300, "ModelMemory" -> 20360, 
                "ModelUtility" -> -0.3280207616403905, "TrainingSize" -> 10, 
                "TrainingTime" -> 0.012589254117941668`, "TrainingMemory" -> 
                63376, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                  Around[0.6931471805599457, 0.0033955407973525076`]}, 
                "AccuracyHistory" -> {
                  Around[0.5000000000000004, 0.028795257820118346`]}], 
               Association[
               "MeanCrossEntropy" -> 
                Around[0.6931471805599457, 0.0048020198472070695`], 
                "Accuracy" -> Around[0.5000000000000004, 0.04072264414124129],
                 "EvaluationTime" -> 0.0000294548058394878, "TestSize" -> 300,
                 "ModelMemory" -> 20360, 
                "ModelUtility" -> -0.3280207638083612, "TrainingSize" -> 50, 
                "TrainingTime" -> 0.015848931924611134`, "TrainingMemory" -> 
                65944, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                  Around[0.6931471805599457, 0.0033955407973525076`]}, 
                "AccuracyHistory" -> {
                  Around[0.5000000000000004, 0.028795257820118346`]}], 
               Association[
               "MeanCrossEntropy" -> 
                Around[0.4931686034753204, 0.03504621415375527], "Accuracy" -> 
                Around[0.7938062042949066, 0.03294825721166443], 
                "EvaluationTime" -> 0.0000630957344480193, "TestSize" -> 300, 
                "ModelMemory" -> 115048, 
                "ModelUtility" -> -0.00036031159548477465`, "TrainingSize" -> 
                250, "TrainingTime" -> 0.03981071705534971, "TrainingMemory" -> 
                265832, "ExperimentCount" -> 1, 
                "MeanCrossEntropyHistory" -> {
                  Around[0.4931686034753204, 0.024781415683036313`]}, 
                "AccuracyHistory" -> {
                  Around[0.7938062042949066, 0.023297936102646483`]}], 
               Association[
               "MeanCrossEntropy" -> 
                Around[0.4548416606517974, 0.0454886832619237], "Accuracy" -> 
                Around[0.802885596662755, 0.03134143023762048], 
                "EvaluationTime" -> 0.00007481435209587034, "TestSize" -> 320,
                 "ModelMemory" -> 120248, "ModelUtility" -> 
                0.07484931869879796, "TrainingSize" -> 1280, "TrainingTime" -> 
                0.05011872336272722, "TrainingMemory" -> 413816, 
                "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                  Around[0.4548416606517974, 0.03216535640175325]}, 
                "AccuracyHistory" -> {
                  Around[0.802885596662755, 0.02216173785310655]}]}, 
             "PredictedPerformances" -> 
             Association[
              "EvaluationTime" -> 0.00007481435209587034, "MeanCrossEntropy" -> 
               Around[0.4548416606517974, 0.0454886832619237], "ModelMemory" -> 
               120248, "TrainingMemory" -> 413816, "TrainingTime" -> 
               0.0752376583213507], "Index" -> 2], 
           Association[
            "Value" -> "GradientBoostedTrees", "Options" -> 
             Association[
              "BoostingMethod" -> Association["Value" -> "Gradient"], 
               MaxTrainingRounds -> Association["Value" -> 50], 
               "LeavesNumber" -> Association["Value" -> 3], "LearningRate" -> 
               Association["Value" -> 0.01], ValidationSet -> 
               Association["Value" -> Automatic], "MaxBinNumber" -> 
               Association["Value" -> 255], "ThreadNumber" -> 
               Association["Value" -> 8], "MaxDepth" -> 
               Association["Value" -> 6], "LeafSize" -> 
               Association["Value" -> 15], "FeatureFraction" -> 
               Association["Value" -> 1], "BaggingFraction" -> 
               Association["Value" -> 1], "BaggingFrequency" -> 
               Association["Value" -> 0], "MinGainToSplit" -> 
               Association["Value" -> 0], "L1Regularization" -> 
               Association["Value" -> 0], "L2Regularization" -> 
               Association["Value" -> 0], "LossFunction" -> 
               Association["Value" -> Automatic]]] -> 
           Association["Experiments" -> {
               Association[
               "MeanCrossEntropy" -> 
                Around[0.6931471805599457, 0.0048020198472070695`], 
                "Accuracy" -> Around[0.5000000000000004, 0.04072264414124129],
                 "EvaluationTime" -> 0.000025118864315095795`, "TestSize" -> 
                300, "ModelMemory" -> 20360, 
                "ModelUtility" -> -0.3280207594724197, "TrainingSize" -> 10, 
                "TrainingTime" -> 0.012589254117941668`, "TrainingMemory" -> 
                63256, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                  Around[0.6931471805599457, 0.0033955407973525076`]}, 
                "AccuracyHistory" -> {
                  Around[0.5000000000000004, 0.028795257820118346`]}], 
               Association[
               "MeanCrossEntropy" -> 
                Around[0.6344306437531576, 0.018437831909189926`], "Accuracy" -> 
                Around[0.633691592155732, 0.048056383423284756`], 
                "EvaluationTime" -> 0.0000630957344480193, "TestSize" -> 200, 
                "ModelMemory" -> 115408, 
                "ModelUtility" -> -0.2439201428075396, "TrainingSize" -> 50, 
                "TrainingTime" -> 0.03981071705534971, "TrainingMemory" -> 
                258056, "ExperimentCount" -> 1, 
                "MeanCrossEntropyHistory" -> {
                  Around[0.6344306437531576, 0.013037515973365903`]}, 
                "AccuracyHistory" -> {
                  Around[0.633691592155732, 0.03398099459790544]}], 
               Association[
               "MeanCrossEntropy" -> 
                Around[0.6212171169356013, 0.011026342041677876`], "Accuracy" -> 
                Around[0.7933712089277799, 0.03289380148576412], 
                "EvaluationTime" -> 0.0000630957344480193, "TestSize" -> 300, 
                "ModelMemory" -> 116248, 
                "ModelUtility" -> -0.22062089389390782`, "TrainingSize" -> 
                250, "TrainingTime" -> 0.05011872336272722, "TrainingMemory" -> 
                284824, "ExperimentCount" -> 1, 
                "MeanCrossEntropyHistory" -> {
                  Around[0.6212171169356013, 0.007796801229352748]}, 
                "AccuracyHistory" -> {
                  Around[0.7933712089277799, 0.02325943008958794]}], 
               Association[
               "MeanCrossEntropy" -> 
                Around[0.6177060896353556, 0.010168497783579457`], "Accuracy" -> 
                Around[0.7917261896106071, 0.03195930229548243], 
                "EvaluationTime" -> 0.00007075903613171656, "TestSize" -> 320,
                 "ModelMemory" -> 116248, 
                "ModelUtility" -> -0.2146963214837745, "TrainingSize" -> 1280,
                 "TrainingTime" -> 0.05011872336272722, "TrainingMemory" -> 
                355144, "ExperimentCount" -> 1, 
                "MeanCrossEntropyHistory" -> {
                  Around[0.6177060896353556, 0.007190213737249412]}, 
                "AccuracyHistory" -> {
                  Around[0.7917261896106071, 0.02259863937512642]}]}, 
             "PredictedPerformances" -> 
             Association[
              "EvaluationTime" -> 0.00007075903613171656, "MeanCrossEntropy" -> 
               Around[0.6177060896353556, 0.010168497783579457`], 
               "ModelMemory" -> 116248, "TrainingMemory" -> 355144, 
               "TrainingTime" -> 0.0752376583213507], "Index" -> 3], 
           Association[
            "Value" -> "GradientBoostedTrees", "Options" -> 
             Association[
              "BoostingMethod" -> Association["Value" -> "Gradient"], 
               MaxTrainingRounds -> Association["Value" -> 50], 
               "LeavesNumber" -> Association["Value" -> 110], "LearningRate" -> 
               Association["Value" -> 0.004], ValidationSet -> 
               Association["Value" -> Automatic], "MaxBinNumber" -> 
               Association["Value" -> 255], "ThreadNumber" -> 
               Association["Value" -> 8], "MaxDepth" -> 
               Association["Value" -> 6], "LeafSize" -> 
               Association["Value" -> 35], "FeatureFraction" -> 
               Association["Value" -> 1], "BaggingFraction" -> 
               Association["Value" -> 1], "BaggingFrequency" -> 
               Association["Value" -> 0], "MinGainToSplit" -> 
               Association["Value" -> 0], "L1Regularization" -> 
               Association["Value" -> 0], "L2Regularization" -> 
               Association["Value" -> 0], "LossFunction" -> 
               Association["Value" -> Automatic]]] -> 
           Association["Experiments" -> {
               Association[
               "MeanCrossEntropy" -> 
                Around[0.6931471805599457, 0.0048020198472070695`], 
                "Accuracy" -> Around[0.5000000000000004, 0.04072264414124129],
                 "EvaluationTime" -> 0.000027286835077291797`, "TestSize" -> 
                300, "ModelMemory" -> 20360, 
                "ModelUtility" -> -0.3280207616403905, "TrainingSize" -> 10, 
                "TrainingTime" -> 0.012589254117941668`, "TrainingMemory" -> 
                63312, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                  Around[0.6931471805599457, 0.0033955407973525076`]}, 
                "AccuracyHistory" -> {
                  Around[0.5000000000000004, 0.028795257820118346`]}], 
               Association[
               "MeanCrossEntropy" -> 
                Around[0.6931471805599457, 0.004158671177158391], "Accuracy" -> 
                Around[0.5000000000000003, 0.03526684433558849], 
                "EvaluationTime" -> 0.000028370820458389797`, "TestSize" -> 
                400, "ModelMemory" -> 20360, 
                "ModelUtility" -> -0.3278353712023909, "TrainingSize" -> 50, 
                "TrainingTime" -> 0.015848931924611134`, "TrainingMemory" -> 
                66000, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                  Around[0.6931471805599457, 0.0029406245900937406`]}, 
                "AccuracyHistory" -> {
                  Around[0.5000000000000003, 0.024937424780745003`]}], 
               Association[
               "MeanCrossEntropy" -> 
                Around[0.6471985480201006, 0.00843387285167584], "Accuracy" -> 
                Around[0.7487675065782353, 0.035165217956043375`], 
                "EvaluationTime" -> 0.000058770064086255266`, "TestSize" -> 
                300, "ModelMemory" -> 119448, 
                "ModelUtility" -> -0.2606527099990147, "TrainingSize" -> 250, 
                "TrainingTime" -> 0.05011872336272722, "TrainingMemory" -> 
                333432, "ExperimentCount" -> 1, 
                "MeanCrossEntropyHistory" -> {
                  Around[0.6471985480201006, 0.005963648685085111]}, 
                "AccuracyHistory" -> {
                  Around[0.7487675065782353, 0.024865564078621213`]}]}, 
             "PredictedPerformances" -> 
             Association[
              "EvaluationTime" -> 0.000058770064086255266`, 
               "MeanCrossEntropy" -> 
               Around[0.6471985480201006, 0.00843387285167584], "ModelMemory" -> 
               119448, "TrainingMemory" -> 333432, "TrainingTime" -> 
               0.33334908363939586`], "Index" -> 4], 
           Association[
            "Value" -> "GradientBoostedTrees", "Options" -> 
             Association[
              "BoostingMethod" -> Association["Value" -> "Gradient"], 
               MaxTrainingRounds -> Association["Value" -> 50], 
               "LeavesNumber" -> Association["Value" -> 25], "LearningRate" -> 
               Association["Value" -> 0.1], ValidationSet -> 
               Association["Value" -> Automatic], "MaxBinNumber" -> 
               Association["Value" -> 255], "ThreadNumber" -> 
               Association["Value" -> 8], "MaxDepth" -> 
               Association["Value" -> 6], "LeafSize" -> 
               Association["Value" -> 7], "FeatureFraction" -> 
               Association["Value" -> 1], "BaggingFraction" -> 
               Association["Value" -> 1], "BaggingFrequency" -> 
               Association["Value" -> 0], "MinGainToSplit" -> 
               Association["Value" -> 0], "L1Regularization" -> 
               Association["Value" -> 0], "L2Regularization" -> 
               Association["Value" -> 0], "LossFunction" -> 
               Association["Value" -> Automatic]]] -> 
           Association["Experiments" -> {
               Association[
               "MeanCrossEntropy" -> 
                Around[0.6931471805599457, 0.0048020198472070695`], 
                "Accuracy" -> Around[0.5000000000000004, 0.04072264414124129],
                 "EvaluationTime" -> 0.000027286835077291797`, "TestSize" -> 
                300, "ModelMemory" -> 20360, 
                "ModelUtility" -> -0.3280207616403905, "TrainingSize" -> 10, 
                "TrainingTime" -> 0.012589254117941668`, "TrainingMemory" -> 
                63312, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                  Around[0.6931471805599457, 0.0033955407973525076`]}, 
                "AccuracyHistory" -> {
                  Around[0.5000000000000004, 0.028795257820118346`]}], 
               Association[
               "MeanCrossEntropy" -> 
                Around[0.6733167810243942, 0.1236446380961356], "Accuracy" -> 
                Around[0.7884757468563169, 0.040689006321445724`], 
                "EvaluationTime" -> 0.0000630957344480193, "TestSize" -> 200, 
                "ModelMemory" -> 119256, 
                "ModelUtility" -> -0.3336812920547836, "TrainingSize" -> 50, 
                "TrainingTime" -> 0.05011872336272722, "TrainingMemory" -> 
                315680, "ExperimentCount" -> 1, 
                "MeanCrossEntropyHistory" -> {
                  Around[0.6733167810243942, 0.08742996205513401]}, 
                "AccuracyHistory" -> {
                  Around[0.7884757468563169, 0.028771472289636568`]}]}, 
             "PredictedPerformances" -> 
             Association[
              "EvaluationTime" -> 0.0000630957344480193, "MeanCrossEntropy" -> 
               Around[0.6733167810243942, 0.1236446380961356], "ModelMemory" -> 
               119256, "TrainingMemory" -> 315680, "TrainingTime" -> 
               0.8144888279215772], "Index" -> 5], 
           Association[
            "Value" -> "GradientBoostedTrees", "Options" -> 
             Association[
              "BoostingMethod" -> Association["Value" -> "Gradient"], 
               MaxTrainingRounds -> Association["Value" -> 50], 
               "LeavesNumber" -> Association["Value" -> 250], "LearningRate" -> 
               Association["Value" -> 0.1], ValidationSet -> 
               Association["Value" -> Automatic], "MaxBinNumber" -> 
               Association["Value" -> 255], "ThreadNumber" -> 
               Association["Value" -> 8], "MaxDepth" -> 
               Association["Value" -> 6], "LeafSize" -> 
               Association["Value" -> 90], "FeatureFraction" -> 
               Association["Value" -> 1], "BaggingFraction" -> 
               Association["Value" -> 1], "BaggingFrequency" -> 
               Association["Value" -> 0], "MinGainToSplit" -> 
               Association["Value" -> 0], "L1Regularization" -> 
               Association["Value" -> 0], "L2Regularization" -> 
               Association["Value" -> 0], "LossFunction" -> 
               Association["Value" -> Automatic]]] -> 
           Association["Experiments" -> {
               Association[
               "MeanCrossEntropy" -> 
                Around[0.6931471805599457, 0.0048020198472070695`], 
                "Accuracy" -> Around[0.5000000000000004, 0.04072264414124129],
                 "EvaluationTime" -> 0.000027286835077291797`, "TestSize" -> 
                300, "ModelMemory" -> 20360, 
                "ModelUtility" -> -0.3280207616403905, "TrainingSize" -> 10, 
                "TrainingTime" -> 0.012589254117941668`, "TrainingMemory" -> 
                63376, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                  Around[0.6931471805599457, 0.0033955407973525076`]}, 
                "AccuracyHistory" -> {
                  Around[0.5000000000000004, 0.028795257820118346`]}], 
               Association[
               "MeanCrossEntropy" -> 
                Around[0.6931471805599457, 0.004158671177158391], "Accuracy" -> 
                Around[0.5000000000000003, 0.03526684433558849], 
                "EvaluationTime" -> 0.000028370820458389797`, "TestSize" -> 
                400, "ModelMemory" -> 20360, 
                "ModelUtility" -> -0.3278353712023909, "TrainingSize" -> 50, 
                "TrainingTime" -> 0.015848931924611134`, "TrainingMemory" -> 
                65936, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                  Around[0.6931471805599457, 0.0029406245900937406`]}, 
                "AccuracyHistory" -> {
                  Around[0.5000000000000003, 0.024937424780745003`]}], 
               Association[
               "MeanCrossEntropy" -> 
                Around[0.4931686034753204, 0.03504621415375527], "Accuracy" -> 
                Around[0.7938062042949066, 0.03294825721166443], 
                "EvaluationTime" -> 0.00005444439372449123, "TestSize" -> 300,
                 "ModelMemory" -> 115048, 
                "ModelUtility" -> -0.00036030294414401975`, "TrainingSize" -> 
                250, "TrainingTime" -> 0.03981071705534971, "TrainingMemory" -> 
                265768, "ExperimentCount" -> 1, 
                "MeanCrossEntropyHistory" -> {
                  Around[0.4931686034753204, 0.024781415683036313`]}, 
                "AccuracyHistory" -> {
                  Around[0.7938062042949066, 0.023297936102646483`]}], 
               Association[
               "MeanCrossEntropy" -> 
                Around[0.46324158988551845`, 0.0515310292954131], "Accuracy" -> 
                Around[0.8160253536252898, 0.03149610840726266], 
                "EvaluationTime" -> 0.0000630957344480193, "TestSize" -> 300, 
                "ModelMemory" -> 124600, "ModelUtility" -> 
                0.054350289281072994`, "TrainingSize" -> 1280, "TrainingTime" -> 
                0.0630957344480193, "TrainingMemory" -> 488512, 
                "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                  Around[0.46324158988551845`, 0.03643794025630924]}, 
                "AccuracyHistory" -> {
                  Around[0.8160253536252898, 0.022271111835762056`]}]}, 
             "PredictedPerformances" -> 
             Association[
              "EvaluationTime" -> 0.0000630957344480193, "MeanCrossEntropy" -> 
               Around[0.46324158988551845`, 0.0515310292954131], 
               "ModelMemory" -> 124600, "TrainingMemory" -> 488512, 
               "TrainingTime" -> 0.09145892217796579], "Index" -> 6], 
           Association[
            "Value" -> "GradientBoostedTrees", "Options" -> 
             Association[
              "BoostingMethod" -> Association["Value" -> "Gradient"], 
               MaxTrainingRounds -> Association["Value" -> 50], 
               "LeavesNumber" -> Association["Value" -> 60], "LearningRate" -> 
               Association["Value" -> 0.1], ValidationSet -> 
               Association["Value" -> Automatic], "MaxBinNumber" -> 
               Association["Value" -> 255], "ThreadNumber" -> 
               Association["Value" -> 8], "MaxDepth" -> 
               Association["Value" -> 6], "LeafSize" -> 
               Association["Value" -> 35], "FeatureFraction" -> 
               Association["Value" -> 1], "BaggingFraction" -> 
               Association["Value" -> 1], "BaggingFrequency" -> 
               Association["Value" -> 0], "MinGainToSplit" -> 
               Association["Value" -> 0], "L1Regularization" -> 
               Association["Value" -> 0], "L2Regularization" -> 
               Association["Value" -> 0], "LossFunction" -> 
               Association["Value" -> Automatic]]] -> 
           Association[
            "Experiments" -> {}, "PredictedPerformances" -> 
             Association[
              "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
               1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 7], 
           Association[
            "Value" -> "GradientBoostedTrees", "Options" -> 
             Association[
              "BoostingMethod" -> Association["Value" -> "Gradient"], 
               MaxTrainingRounds -> Association["Value" -> 50], 
               "LeavesNumber" -> Association["Value" -> 3], "LearningRate" -> 
               Association["Value" -> 0.2], ValidationSet -> 
               Association["Value" -> Automatic], "MaxBinNumber" -> 
               Association["Value" -> 255], "ThreadNumber" -> 
               Association["Value" -> 8], "MaxDepth" -> 
               Association["Value" -> 6], "LeafSize" -> 
               Association["Value" -> 3], "FeatureFraction" -> 
               Association["Value" -> 1], "BaggingFraction" -> 
               Association["Value" -> 1], "BaggingFrequency" -> 
               Association["Value" -> 0], "MinGainToSplit" -> 
               Association["Value" -> 0], "L1Regularization" -> 
               Association["Value" -> 0], "L2Regularization" -> 
               Association["Value" -> 0], "LossFunction" -> 
               Association["Value" -> Automatic]]] -> 
           Association["Experiments" -> {
               Association[
               "MeanCrossEntropy" -> 
                Around[0.7285908781207143, 0.10712376157326783`], "Accuracy" -> 
                Around[0.7649873806664109, 0.03450116507342435], 
                "EvaluationTime" -> 0.0000630957344480193, "TestSize" -> 300, 
                "ModelMemory" -> 116248, 
                "ModelUtility" -> -0.40549066562305236`, "TrainingSize" -> 50,
                 "TrainingTime" -> 0.03981071705534971, "TrainingMemory" -> 
                270816, "ExperimentCount" -> 1, 
                "MeanCrossEntropyHistory" -> {
                  Around[0.7285908781207143, 0.07574793823466858]}, 
                "AccuracyHistory" -> {
                  Around[0.7649873806664109, 0.024396007782254828`]}], 
               Association[
               "MeanCrossEntropy" -> 
                Around[0.45323975049570736`, 0.05265448232531423], "Accuracy" -> 
                Around[0.8143972193917633, 0.03155765847566103], 
                "EvaluationTime" -> 0.00006854143078948891, "TestSize" -> 300,
                 "ModelMemory" -> 116248, "ModelUtility" -> 
                0.07521324114606343, "TrainingSize" -> 250, "TrainingTime" -> 
                0.03981071705534971, "TrainingMemory" -> 284424, 
                "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                  Around[0.45323975049570736`, 0.0372323415120969]}, 
                "AccuracyHistory" -> {
                  Around[0.8143972193917633, 0.022314634306509037`]}], 
               Association[
               "MeanCrossEntropy" -> 
                Around[0.446902752128985, 0.04608610268426851], "Accuracy" -> 
                Around[0.8207927976671314, 0.03114137447426191], 
                "EvaluationTime" -> 0.0000630957344480193, "TestSize" -> 300, 
                "ModelMemory" -> 116248, "ModelUtility" -> 
                0.09184750840904243, "TrainingSize" -> 1280, "TrainingTime" -> 
                0.05011872336272722, "TrainingMemory" -> 355176, 
                "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                  Around[0.446902752128985, 0.03258779572650581]}, 
                "AccuracyHistory" -> {
                  Around[0.8207927976671314, 0.022020277066220253`]}], 
               Association[
               "MeanCrossEntropy" -> 
                Around[3.1181805475203888`, 0.41590433630620527`], "Accuracy" -> 
                Around[0.6443333138884328, 0.04768784733380756], 
                "EvaluationTime" -> 0.0000501187233627272, "TestSize" -> 200, 
                "ModelMemory" -> 94096, 
                "ModelUtility" -> -1.8567274014765434`, "TrainingSize" -> 10, 
                "TrainingTime" -> 0.03162277660168379, "TrainingMemory" -> 
                206304, "ExperimentCount" -> 1, 
                "MeanCrossEntropyHistory" -> {
                  Around[3.1181805475203888`, 0.29408877652700816`]}, 
                "AccuracyHistory" -> {
                  Around[0.6443333138884328, 0.03372040022992415]}]}, 
             "PredictedPerformances" -> 
             Association[
              "EvaluationTime" -> 0.0000501187233627272, "MeanCrossEntropy" -> 
               Around[3.1181805475203888`, 0.41590433630620527`], 
               "ModelMemory" -> 94096, "TrainingMemory" -> 206304, 
               "TrainingTime" -> 0.5457751426822903], "Index" -> 8], 
           Association[
            "Value" -> "GradientBoostedTrees", "Options" -> 
             Association[
              "BoostingMethod" -> Association["Value" -> "Gradient"], 
               MaxTrainingRounds -> Association["Value" -> 50], 
               "LeavesNumber" -> Association["Value" -> 60], "LearningRate" -> 
               Association["Value" -> 0.02], ValidationSet -> 
               Association["Value" -> Automatic], "MaxBinNumber" -> 
               Association["Value" -> 255], "ThreadNumber" -> 
               Association["Value" -> 8], "MaxDepth" -> 
               Association["Value" -> 6], "LeafSize" -> 
               Association["Value" -> 90], "FeatureFraction" -> 
               Association["Value" -> 1], "BaggingFraction" -> 
               Association["Value" -> 1], "BaggingFrequency" -> 
               Association["Value" -> 0], "MinGainToSplit" -> 
               Association["Value" -> 0], "L1Regularization" -> 
               Association["Value" -> 0], "L2Regularization" -> 
               Association["Value" -> 0], "LossFunction" -> 
               Association["Value" -> Automatic]]] -> 
           Association["Experiments" -> {
               Association[
               "MeanCrossEntropy" -> 
                Around[0.6931471805599457, 0.0048020198472070695`], 
                "Accuracy" -> Around[0.5000000000000004, 0.04072264414124129],
                 "EvaluationTime" -> 0.000025118864315095795`, "TestSize" -> 
                300, "ModelMemory" -> 20360, 
                "ModelUtility" -> -0.3280207594724197, "TrainingSize" -> 10, 
                "TrainingTime" -> 0.015848931924611134`, "TrainingMemory" -> 
                63312, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                  Around[0.6931471805599457, 0.0033955407973525076`]}, 
                "AccuracyHistory" -> {
                  Around[0.5000000000000004, 0.028795257820118346`]}], 
               Association[
               "MeanCrossEntropy" -> 
                Around[0.6931471805599457, 0.004158671177158391], "Accuracy" -> 
                Around[0.5000000000000003, 0.03526684433558849], 
                "EvaluationTime" -> 0.000026744842386742796`, "TestSize" -> 
                400, "ModelMemory" -> 20360, 
                "ModelUtility" -> -0.3278353695764129, "TrainingSize" -> 50, 
                "TrainingTime" -> 0.012589254117941668`, "TrainingMemory" -> 
                66000, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                  Around[0.6931471805599457, 0.0029406245900937406`]}, 
                "AccuracyHistory" -> {
                  Around[0.5000000000000003, 0.024937424780745003`]}], 
               Association[
               "MeanCrossEntropy" -> 
                Around[0.6027690600789122, 0.01581467041038456], "Accuracy" -> 
                Around[0.7842150174307175, 0.04095976839358099], 
                "EvaluationTime" -> 0.0000630957344480193, "TestSize" -> 200, 
                "ModelMemory" -> 115048, 
                "ModelUtility" -> -0.19216434272040028`, "TrainingSize" -> 
                250, "TrainingTime" -> 0.03981071705534971, "TrainingMemory" -> 
                265840, "ExperimentCount" -> 1, 
                "MeanCrossEntropyHistory" -> {
                  Around[0.6027690600789122, 0.01118266068941316]}, 
                "AccuracyHistory" -> {
                  Around[0.7842150174307175, 0.028962929986931535`]}], 
               Association[
               "MeanCrossEntropy" -> 
                Around[0.5260990544382158, 0.023155968986761564`], "Accuracy" -> 
                Around[0.802445399242767, 0.031292068526133504`], 
                "EvaluationTime" -> 0.00007481435209587034, "TestSize" -> 320,
                 "ModelMemory" -> 126360, 
                "ModelUtility" -> -0.059650809819213224`, "TrainingSize" -> 
                1280, "TrainingTime" -> 0.07943282347242814, "TrainingMemory" -> 
                517648, "ExperimentCount" -> 1, 
                "MeanCrossEntropyHistory" -> {
                  Around[0.5260990544382158, 0.01637374269548449]}, 
                "AccuracyHistory" -> {
                  Around[0.802445399242767, 0.02212683385218313]}]}, 
             "PredictedPerformances" -> 
             Association[
              "EvaluationTime" -> 0.00007481435209587034, "MeanCrossEntropy" -> 
               Around[0.5260990544382158, 0.023155968986761564`], 
               "ModelMemory" -> 126360, "TrainingMemory" -> 517648, 
               "TrainingTime" -> 0.1151399612651463], "Index" -> 9], 
           Association[
            "Value" -> "GradientBoostedTrees", "Options" -> 
             Association[
              "BoostingMethod" -> Association["Value" -> "Gradient"], 
               MaxTrainingRounds -> Association["Value" -> 50], 
               "LeavesNumber" -> Association["Value" -> 25], "LearningRate" -> 
               Association["Value" -> 0.2], ValidationSet -> 
               Association["Value" -> Automatic], "MaxBinNumber" -> 
               Association["Value" -> 255], "ThreadNumber" -> 
               Association["Value" -> 8], "MaxDepth" -> 
               Association["Value" -> 6], "LeafSize" -> 
               Association["Value" -> 15], "FeatureFraction" -> 
               Association["Value" -> 1], "BaggingFraction" -> 
               Association["Value" -> 1], "BaggingFrequency" -> 
               Association["Value" -> 0], "MinGainToSplit" -> 
               Association["Value" -> 0], "L1Regularization" -> 
               Association["Value" -> 0], "L2Regularization" -> 
               Association["Value" -> 0], "LossFunction" -> 
               Association["Value" -> Automatic]]] -> 
           Association[
            "Experiments" -> {}, "PredictedPerformances" -> 
             Association[
              "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
               1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 
             10]], 
          TypeSystem`Assoc[
           TypeSystem`Struct[{"Value", "Options"}, {
             TypeSystem`Atom[
              TypeSystem`Enumeration["GradientBoostedTrees"]], 
             TypeSystem`Assoc[TypeSystem`AnyType, 
              TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 16]}], 
           
           TypeSystem`Struct[{
            "Experiments", "PredictedPerformances", "Index"}, {
             TypeSystem`Vector[
              
              TypeSystem`Struct[{
               "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
                "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime",
                 "TrainingMemory", "ExperimentCount", 
                "MeanCrossEntropyHistory", "AccuracyHistory"}, {
               TypeSystem`AnyType, TypeSystem`AnyType, 
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Integer], 
                TypeSystem`Vector[TypeSystem`AnyType, 1], 
                TypeSystem`Vector[TypeSystem`AnyType, 1]}], 
              TypeSystem`AnyLength], 
             
             TypeSystem`Struct[{
              "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
               "TrainingMemory", "TrainingTime"}, {
               TypeSystem`Atom[Real], TypeSystem`AnyType, 
               TypeSystem`Atom[Integer], 
               TypeSystem`Atom[Integer], 
               TypeSystem`Atom[Real]}], 
             TypeSystem`Atom[Integer]}], 10], 
          Association[]], "MaxTrainingSize" -> 1600, 
        "PreprocessorEvaluationTime" -> 7.6875*^-6, "PreprocessorMemory" -> 
        43400, "InputDimension" -> 4, "OutputDimension" -> 1, 
        "BaselineLogProbability" -> -0.6931471805599453, "VariableBudget" -> 
        True, "CheckpointingInfo" -> Association["Checkpointing" -> False], 
        "UserStop" -> False, "NaturalStop" -> True, "AbortStop" -> False, 
        "RoundPartitioning" -> Dataset[{
           Association[
           "TrainingSizes" -> 10, "TimeBudgets" -> 0.1372000000000001, 
            "ElapsedTimes" -> 0.264528, "ExperimentCounts" -> 8], 
           Association[
           "TrainingSizes" -> 50, "TimeBudgets" -> 0.19600000000000017`, 
            "ElapsedTimes" -> 0.321492, "ExperimentCounts" -> 7], 
           Association[
           "TrainingSizes" -> 250, "TimeBudgets" -> 0.28000000000000036`, 
            "ElapsedTimes" -> 0.40088499999999994`, "ExperimentCounts" -> 6], 
           
           Association[
           "TrainingSizes" -> 1280, "TimeBudgets" -> 0.4, "ElapsedTimes" -> 
            0.421056, "ExperimentCounts" -> 5]}, 
          TypeSystem`Vector[
           
           TypeSystem`Struct[{
            "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
             "ExperimentCounts"}, {
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer]}], 4], 
          Association[]]], "AnomalyDetector" -> None, "Log" -> 
      Association["Example" -> MachineLearning`MLDataset[
          Association[
          "f1" -> Association[
            "Type" -> "NumericalVector", "Weight" -> 1, 
             "Values" -> {{-0.6117, 0.6019, -0.7292, 0.3337}}, "ID" -> 
             650137747617417760]], 
          Association[
          "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 
           0, "RawExample" -> False]], "TrainingTime" -> 1.787964, 
        "MaxTrainingMemory" -> 891184, "DataMemory" -> 231352, 
        "FunctionMemory" -> 365800, "LanguageVersion" -> {12.3, 1}, "Date" -> 
        DateObject[{2021, 7, 21, 6, 44, 20.759261`8.069786872894097}, 
          "Instant", "Gregorian", -4.], "ProcessorCount" -> 8, 
        "ProcessorType" -> "x86-64", "OperatingSystem" -> "MacOSX", 
        "SystemWordLength" -> 64, "Evaluations" -> {}]]],
    Editable->False,
    SelectWithContents->True,
    Selectable->False], ",", 
   InterpretationBox[
    RowBox[{
     TagBox["ClassifierFunction",
      "SummaryHead"], "[", 
     DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
      "Ready"}, 
      TemplateBox[{
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]],
                 ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              GraphicsBox[{{
                 PointSize[0.13], 
                 GrayLevel[0.45], 
                 
                 PointBox[{{0.9821769431797024, -0.440194219686987}, {
                  1.1339776261519132`, 0.8056918676854272}, {
                  0.5279892326667741, 0.6574306661126254}, {
                  0.022147046479890797`, 1.4937877187998898`}}], 
                 GrayLevel[0.7], 
                 
                 PointBox[{{-0.9815166384819979, 
                  0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                 GrayLevel[0.55], 
                 AbsoluteThickness[1.5], 
                 LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
               Axes -> {False, False}, AxesLabel -> {None, None}, 
                AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                  AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                Frame -> {{True, True}, {True, True}}, 
                FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                Directive[
                  Thickness[Tiny], 
                  GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}},
                 GridLines -> {None, None}, 
                LabelStyle -> {FontFamily -> "Arial"}, 
                Method -> {"ScalingFunctions" -> None}, 
                PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
               ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}], Frame -> True, FrameTicks -> None, 
               FrameStyle -> Directive[
                 Opacity[0.5], 
                 Thickness[Tiny], 
                 RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
               GrayLevel[0.94]], 
              GridBox[{{
                 RowBox[{
                   TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    TemplateBox[{"\"NumericalVector\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (length: \"", "4", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    
                    TemplateBox[{",", "\",\"", "0", "1"}, 
                    "RowWithSeparators"], "SummaryItem"]}]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
            AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]],
                 ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              GraphicsBox[{{
                 PointSize[0.13], 
                 GrayLevel[0.45], 
                 
                 PointBox[{{0.9821769431797024, -0.440194219686987}, {
                  1.1339776261519132`, 0.8056918676854272}, {
                  0.5279892326667741, 0.6574306661126254}, {
                  0.022147046479890797`, 1.4937877187998898`}}], 
                 GrayLevel[0.7], 
                 
                 PointBox[{{-0.9815166384819979, 
                  0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                 GrayLevel[0.55], 
                 AbsoluteThickness[1.5], 
                 LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
               Axes -> {False, False}, AxesLabel -> {None, None}, 
                AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                  AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                Frame -> {{True, True}, {True, True}}, 
                FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                Directive[
                  Thickness[Tiny], 
                  GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}},
                 GridLines -> {None, None}, 
                LabelStyle -> {FontFamily -> "Arial"}, 
                Method -> {"ScalingFunctions" -> None}, 
                PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
               ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}], Frame -> True, FrameTicks -> None, 
               FrameStyle -> Directive[
                 Opacity[0.5], 
                 Thickness[Tiny], 
                 RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
               GrayLevel[0.94]], 
              GridBox[{{
                 RowBox[{
                   TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    TemplateBox[{"\"NumericalVector\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (length: \"", "4", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    
                    TemplateBox[{",", "\",\"", "0", "1"}, 
                    "RowWithSeparators"], "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["\"NaiveBayes\"", "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                   "\"Number of training examples: \"", 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox["1600", "SummaryItem"]}]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
            AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open$$], ImageSize -> Automatic]},
       "SummaryPanel"],
      DynamicModuleValues:>{}], "]"}],
    ClassifierFunction[
     Association[
     "ExampleNumber" -> 1600, "ClassNumber" -> 2, "Input" -> 
      Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
          Association[
          "Input" -> Association[
            "f1" -> Association["Type" -> "NumericalVector", "Length" -> 4]], 
           "Output" -> 
           Association[
            "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]], 
           "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
             Association["Processors" -> {
                MachineLearning`MLProcessor["List"], 
                MachineLearning`MLProcessor["WrapMLDataset", 
                 Association[
                 "FeatureTypes" -> {"NumericalVector"}, 
                  "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                  "ExampleWeights" -> Automatic, "RawExample" -> 
                  Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                  False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
           "Perfect", "StructurePreserving" -> False, "Missing" -> 
           "Allowed"]], "Processor" -> MachineLearning`MLProcessor["Sequence", 
          Association[
          "Input" -> Association[
            "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]], 
           "Output" -> 
           Association[
            "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
           "Processors" -> {
             MachineLearning`MLProcessor["SynthesizeMissingValues", 
              Association[
              "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
               "StructurePreserving" -> True, "Input" -> 
               Association[
                "f1" -> Association[
                  "Type" -> "NumericalVector", "Weight" -> 1]], 
               "Distribution" -> LearnedDistribution[
                 Association[
                 "ExampleNumber" -> 1600, "Preprocessor" -> 
                  MachineLearning`MLProcessor["ToMLDataset", 
                    Association[
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 4]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Preprocessor" -> MachineLearning`MLProcessor["Identity"],
                     "ScalarFeature" -> True, "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"]], 
                  "Processor" -> MachineLearning`MLProcessor["Identity"], 
                  "PerformanceGoal" -> "DirectTraining", "BatchProcessing" -> 
                  Automatic, "Model" -> 
                  Association[
                   "RotationMatrix" -> {{-0.49022777479313756`, \
-0.5981875461507633, 0.3562705109450004, 
                    0.5243278663989599}, {-0.5455271699185337, 
                    0.10132878844259197`, 
                    0.44964111590167577`, -0.6999681781367834}, \
{-0.5041272545205271, -0.21912670740958906`, -0.818933365333681, \
-0.1648858407889538}, {-0.4559962137470443, 
                    0.7641253970145981, -0.015567050617766181`, 
                    0.45600164212501093`}}, 
                    "Precisions" -> {0.5461229851609882, 0.980113249103532, 
                    1.021226362380588, 1.1208467421041435`}, "NoisePrecision" -> 
                    None, "Processor" -> MachineLearning`MLProcessor["Center", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {0.03640949999999999, 0.011544312499999973`, 
                    0.01142312500000001, -0.0379776875}, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Version" -> {12.3, 1}, "ID" -> 2580788735436893886]], 
                    "PostProcessor" -> 
                    MachineLearning`MLProcessor["FirstValues", 
                    Association[
                    "Info" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1], "Key" -> 
                    "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
                    False, "Missing" -> "Allowed"]], "Method" -> 
                    "Multinormal", "Options" -> 
                    Association[
                    "CovarianceType" -> 
                    Association[
                    "Value" -> "Full", "Options" -> Association[]], 
                    "IntrinsicDimension" -> 
                    Association["Value" -> 4, "Options" -> Association[]]]], 
                  "TrainingInformation" -> 
                  Association["Configurations" -> Dataset[
                    Association[
                    Association[
                    "Value" -> "Multinormal", "Options" -> 
                    Association[
                    "CovarianceType" -> Association["Value" -> "Full"], 
                    "IntrinsicDimension" -> 
                    Association["Value" -> "Heuristic"]], "NaiveImputer" -> 
                    MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {0.03640950000000002, 0.011544312499999947`, 
                    0.011423125000000046`, -0.03797768749999994}, 
                    "StandardDeviation" -> {1.0838409458021274`, 
                    1.0911060676637503`, 1.0933069139668579`, 
                    1.0780693172616047`}, "Method" -> "NaiveSampler", 
                    "VectorLength" -> 4, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector", "Version" -> {12.3, 1}, "ID" -> 
                    4747808072524423015]], "EMIterations" -> 1] -> 
                    Association[]], 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], 
                    Association[]], "BestModelInformation" -> Dataset[
                    Association[
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]], 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], 
                    Association[]]], "NaiveImputer" -> 
                  MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {0.03640950000000002, 0.011544312499999947`, 
                    0.011423125000000046`, -0.03797768749999994}, 
                    "StandardDeviation" -> {1.0838409458021274`, 
                    1.0911060676637503`, 1.0933069139668579`, 
                    1.0780693172616047`}, "Method" -> "NaiveSampler", 
                    "VectorLength" -> 4, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector", "Version" -> {12.3, 1}, "ID" -> 
                    4747808072524423015]], "InputDimension" -> 0, 
                  "OutputDimension" -> 4, "Log" -> 
                  Association["Example" -> MachineLearning`MLDataset[
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1, 
                    "Values" -> {{-0.7638, 2.4921, -0.0587, -0.7013}}, "ID" -> 
                    3791095496786132862]], 
                    Association[
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False]], 
                    "TrainingTime" -> 0.055109, "MaxTrainingMemory" -> 369864,
                     "DataMemory" -> 58256, "FunctionMemory" -> 29624, 
                    "LanguageVersion" -> {12.3, 1}, "Date" -> 
                    DateObject[{
                    2021, 7, 21, 6, 44, 20.81969`8.071049242390856}, 
                    "Instant", "Gregorian", -4.], "ProcessorCount" -> 8, 
                    "ProcessorType" -> "x86-64", "OperatingSystem" -> 
                    "MacOSX", "SystemWordLength" -> 64, "Evaluations" -> {}], 
                  "LogPDFDistribution" -> 
                  MachineLearning`TailedQuantileDistribution[
                    Association[
                    "Quantiles" -> {-1.6933406967103843`, \
-1.6933406967103843`, -1.5089666810504383`, -1.5029414206037228`, \
-1.4085196021819586`, -1.3437931150814406`, -1.2943086655073155`, \
-1.2907886510314535`, -1.2856910221736149`, -1.1301103424078651`, \
-1.0894923421314155`}, "LeftBoundary" -> -1.5089666810504383`, "LeftScale" -> 
                    0.09218700782997302, "LeftTailNorm" -> 0.2]], "Entropy" -> 
                  Around[5.419181015551843, 0.22968047255532723`], 
                  "EntropySampleSize" -> 10]], "Output" -> 
               Association[
                "f1" -> Association[
                  "Type" -> "NumericalVector", "Weight" -> 1]], 
               "EvaluationStrategy" -> "ModeFinding", "Version" -> {12.3, 1}, 
               "ID" -> 895810465636885430]], 
             MachineLearning`MLProcessor["Standardize", 
              Association[
              "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
               "StructurePreserving" -> True, "Input" -> 
               Association[
                "f1" -> Association[
                  "Type" -> "NumericalVector", "Weight" -> 1]], 
               "Mean" -> {0.03640950000000002, 0.011544312499999947`, 
                0.011423125000000046`, -0.03797768749999994}, 
               "StandardDeviation" -> {1.0838409458021274`, 
                1.0911060676637503`, 1.0933069139668579`, 
                1.0780693172616047`}, "Output" -> 
               Association[
                "f1" -> Association[
                  "Type" -> "NumericalVector", "Weight" -> 1]], 
               "Version" -> {12.3, 1}, "ID" -> 4436786855301211226]], 
             MachineLearning`MLProcessor["DiscretizeNumericalVector", 
              Association[
              "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
               "StructurePreserving" -> True, "Input" -> 
               Association[
                "f1" -> Association[
                  "Type" -> "NumericalVector", "Weight" -> 1]], 
               "Boundaries" -> CompressedData["
1:eJwB0QMu/CFib1JlAgAAAAQAAAAeAAAA0t2EfkIRB8AVpJmdRkz8v0VXz3zi
8/e/AQpa/3HS879c1ZivsNXxv2DZjhruPO+/afQ6qCfD6r8EM9TWFLjmv9av
ZJS9f+O/IlQ00p/t379wxHrFjl7Zv3yX6iLQvtO/y1QThOI3y79RZbwx7s7A
v6FXsujDYq6/seD/6zehgz9cMmaaguK4P1MefLwpqss/yNX1c7AA1D9lFRuD
E2TZPyBHRpaI1t4/Pi2hOKki4z/bYw87pq/mP++/Zbw3H+o/OFTrZj/V7j98
1o275J/xP53EuVtjnPQ/QL3+ypaB+D8KYeyrw939P7IoXBRTrwtAXNqPX9lB
CsDLT3I7qFP8v1+gzk9WOPe/YftKchMF9L+tYNTLFLXxv27UCGzD2e2/t0SD
BeTC6b+OH+2nABrmvysXhU1egOK/83m9eBXu3r8dUPILlizZv984/vt+INW/
XB21bkedzr+rcG6uqtzDvzZl7JjdM66/OuInJF5woz9kgfxvA06/PwAs9L2j
o8o/b49hpUnx0z/HpikbzIbYP/4dpdHcU94/uj1TDxoP4z+HuOyMOsnmPw0M
wTHOnOk/m7BwOcRM7j8kE9NV3J/xP4hiH2i8CvQ/FRFIFfTX9z+9ffly71n9
P90PfwWRNAtAhQ9MH7OjBsD3RFurOm/9v9Vs5pN19/e/DCfNJzCV9L8Hxupf
C2XyvwoTJpyEAe6/r3Uwxrh66b/2RKMo6OTlv5Sepjiu1uK/3WL5+6Fu378/
LpT6qnjYv95IHfE/ntO/ILdtAlTSyr+GGIMWhDbBv+1noGA1cLC/K8rMX7sX
pD8ph3xb28rBP4Nr8X1S/co/9vRipG2r0z/a+A67l6HZPybQRPqTTN8/gLsd
vpai4j/+vj33K/TlPzu6+2iq7uk/9t1c6tp17j9eiiyqG87xP6pkBCPAgPQ/
r2uyAlHY9z9BHW58nZP9P/ZKI6gsPglA3I14XyqkDcDyn+c/tMv8vyBcAEC2
a/e//zX/4Y059L+/Q5TaroDxv/to2HuPNe6/bEf+gLDj6b9sjgGQGXLmv5yC
ROzoFeO/11m7S4IZ4L9j4lnyLsjZv/xEGRq0xdS/Q1Wy2M6gzb9k00aI//O+
v/6aH8hQ4qC/wqh/GsiEpz8EFLPiQCrAPxT3Rw8htMo/8+JckVWC0j+oqpyi
dU/XP7pmfHuDt90/Fj8cIXya4T+DFRg3VRbmP6k1VdJysOk/0tQc5hOF7z8U
Cj8DOujxP9G0i7xeN/U/KcbmXxag+D8S03k6SIL9P9+FKMeOmglAjeMLsQ==

                "], "Version" -> {12.3, 1}, "ID" -> 5282076083528639721, 
               "Output" -> 
               Association[
                "f1" -> Association[
                  "Type" -> "NominalVector", "Weight" -> 1]]]], 
             MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
              Association[
              "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
               "StructurePreserving" -> True, "Input" -> 
               Association[
                "f1" -> Association[
                  "Type" -> "NominalVector", "Weight" -> 1, 
                   "SetSize" -> {29, 29, 29, 29}]], "Index" -> {
                 Association[
                 1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 
                  8, 9 -> 9, 10 -> 10, 11 -> 11, 12 -> 12, 13 -> 13, 14 -> 14,
                   15 -> 15, 16 -> 16, 17 -> 17, 18 -> 18, 19 -> 19, 20 -> 20,
                   21 -> 21, 22 -> 22, 23 -> 23, 24 -> 24, 25 -> 25, 26 -> 26,
                   27 -> 27, 28 -> 28, 29 -> 29], 
                 Association[
                 1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 
                  8, 9 -> 9, 10 -> 10, 11 -> 11, 12 -> 12, 13 -> 13, 14 -> 14,
                   15 -> 15, 16 -> 16, 17 -> 17, 18 -> 18, 19 -> 19, 20 -> 20,
                   21 -> 21, 22 -> 22, 23 -> 23, 24 -> 24, 25 -> 25, 26 -> 26,
                   27 -> 27, 28 -> 28, 29 -> 29], 
                 Association[
                 1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 
                  8, 9 -> 9, 10 -> 10, 11 -> 11, 12 -> 12, 13 -> 13, 14 -> 14,
                   15 -> 15, 16 -> 16, 17 -> 17, 18 -> 18, 19 -> 19, 20 -> 20,
                   21 -> 21, 22 -> 22, 23 -> 23, 24 -> 24, 25 -> 25, 26 -> 26,
                   27 -> 27, 28 -> 28, 29 -> 29], 
                 Association[
                 1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 
                  8, 9 -> 9, 10 -> 10, 11 -> 11, 12 -> 12, 13 -> 13, 14 -> 14,
                   15 -> 15, 16 -> 16, 17 -> 17, 18 -> 18, 19 -> 19, 20 -> 20,
                   21 -> 21, 22 -> 22, 23 -> 23, 24 -> 24, 25 -> 25, 26 -> 26,
                   27 -> 27, 28 -> 28, 29 -> 29]}, "MissingCode" -> 0, 
               "Version" -> {12.3, 1}, "ID" -> 6791126123069294256, "Output" -> 
               Association[
                "f1" -> Association[
                  "Type" -> "NominalVector", "Weight" -> 1]]]]}, 
           "Invertibility" -> "Approximate", "StructurePreserving" -> True, 
           "Missing" -> "Imputed"]]], "Output" -> 
      Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
          Association[
          "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
           "Output" -> 
           Association[
            "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
           "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
             Association["Processors" -> {
                MachineLearning`MLProcessor["List"], 
                MachineLearning`MLProcessor["WrapMLDataset", 
                 Association[
                 "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                  "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                  Automatic, "RawExample" -> 
                  Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                  False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
           "Perfect", "StructurePreserving" -> False, "Missing" -> 
           "Allowed"]], "Processor" -> MachineLearning`MLProcessor["Sequence", 
          Association[
          "Input" -> Association[
            "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
           "Output" -> 
           Association[
            "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
           "Processors" -> {
             MachineLearning`MLProcessor["ToVector", 
              Association[
              "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
               "StructurePreserving" -> True, "Input" -> 
               Association[
                "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
               "Output" -> 
               Association[
                "f1" -> Association[
                  "Type" -> "NominalVector", "Weight" -> 1]], 
               "Version" -> {12.3, 1}, "ID" -> 7385217781795203165]], 
             MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
              Association[
              "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
               "StructurePreserving" -> True, "Input" -> 
               Association[
                "f1" -> Association[
                  "Type" -> "NominalVector", "Weight" -> 1]], "Index" -> {
                 Association[0 -> 1, 1 -> 2]}, "MissingCode" -> 0, 
               "Version" -> {12.3, 1}, "ID" -> 9072788647140281776, "Output" -> 
               Association[
                "f1" -> Association[
                  "Type" -> "NominalVector", "Weight" -> 1]]]], 
             MachineLearning`MLProcessor["FromVector", 
              Association[
              "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
               "StructurePreserving" -> True, "Input" -> 
               Association[
                "f1" -> Association[
                  "Type" -> "NominalVector", "Weight" -> 1, 
                   "SetSize" -> {2}]], "Output" -> 
               Association[
                "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
               "Version" -> {12.3, 1}, "ID" -> 8667766357427704565]], 
             MachineLearning`MLProcessor["FirstValues", 
              Association[
              "Info" -> Association[
                "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2], "Key" -> 
               "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
               False, "Missing" -> "Allowed"]]}, "Invertibility" -> "Perfect",
            "StructurePreserving" -> False, "Missing" -> "Allowed"]], 
        "ProbabilityPostprocessor" -> Identity, "Name" -> "class", "Marginal" -> 
        Association[0 -> 0.5, 1 -> 0.5]], "LabelSplitter" -> 
      MachineLearning`MLProcessor["FeatureLabelSplit", 
        Association[
        "Processor" -> MachineLearning`MLProcessor["AssociationSplit"], 
         "PreferLabeled" -> True, "KeepLabelsFormat" -> False]], 
      "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
      "Prior" -> Automatic, "Utility" -> 
      SparseArray[
       Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
      "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
      Automatic, "BatchProcessing" -> Automatic, "Model" -> 
      Association[
       "ClassNumber" -> 2, "ClassPriors" -> Association[1 -> 0.5, 2 -> 0.5], 
        "LogProbabilities" -> CompressedData["
1:eJx1lFtIE1AYx9fcfdO5zRAKZVkRdjFiVBakWUZExMwV9RARmjTI6iE309WL
QfUQQmkJi1aOiB6GSBAkSB2LIoSc+FwNJLSLoyDoghntYb8jfLCHw+E73+Wc
7////mdFy7nmtiKDwWDKrYrcMubW0dTe4Wv7y1RmyXS2tcWiEuXHfdG0W1lj
rn7TmE35v601Jq94VPPsen//gEUVfdkx9dhSosZuDiz9YLOrNSeC6Xvr3Co5
euz073qrtjd1+66ef2rV8dSbCW15+2LEqTyTl+oHfzrU7r7Un8gNl6pxXO6N
x2zKHK5793pnqao0Zb3x+3blHz2S7LIU6/vmwnefv6pyaf/Co4NfY40ObbNz
Dzb3vXQOvU/cceg+OQ8mdkVnv9u1n7rYsl4iMLT8Vk+xuvjGV9VZa9N9kzf+
rzWYOezUfu4DJ/oc/ljWfihkV9WfFp5l+0pUvFMl91msKl3dcSaYLNX58HCy
f6op8msRV+rhZ6/omshE4ma1rCk6PZfyav46Vm7bXOf26jzeBV/YtXuMgVBs
8R3wI98l8+GHeHDjHL7Bm3PiwBXc4UfyhE2+5JdzPcf5OYIX6kieeTfx4CB1
wTux4QP+4EHqStfP+7d/vtB+vcaiefqx+uztv/Nm9ST+sKHXXa53+FsV3hBo
PeVTW6e72zZOLOZhM1fw0TPTOF9Z4tF+cKZ/+mCu6Ju5BC924ukD3NEn9aXe
JW+SJ3Sl9Zm/hzzmRvIu9ck70JO8R895vr7UAX2Dg9Z73g+O6EjiLv3wxj8L
X/BOHHNTKI94+Z/KuZJ4gwN6lTzAq/y3wE3asj42+YX4wSaPuuANvzJOzil9
gAP3y3cU4lvqFX2jR+LhYfJAw+CDcbP+9+ABXf4HmQphxA==
         "], "FeatureNumber" -> 
        4, "Processor" -> MachineLearning`MLProcessor["Sequence", 
          Association[
          "Input" -> Association[
            "f1" -> Association[
              "Type" -> "NominalVector", "Weight" -> 1, 
               "SetSize" -> {29, 29, 29, 29}]], "Output" -> 
           Association[
            "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
           "Processors" -> {
             MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
              Association[
              "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
               "StructurePreserving" -> True, "Input" -> 
               Association[
                "f1" -> Association[
                  "Type" -> "NominalVector", "Weight" -> 1, 
                   "SetSize" -> {29, 29, 29, 29}]], "Index" -> {
                 Association[
                 1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 
                  8, 9 -> 9, 10 -> 10, 11 -> 11, 12 -> 12, 13 -> 13, 14 -> 14,
                   15 -> 15, 16 -> 16, 17 -> 17, 18 -> 18, 19 -> 19, 20 -> 20,
                   21 -> 21, 22 -> 22, 23 -> 23, 24 -> 24, 25 -> 25, 26 -> 26,
                   27 -> 27, 28 -> 28, 29 -> 29], 
                 Association[
                 1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 
                  8, 9 -> 9, 10 -> 10, 11 -> 11, 12 -> 12, 13 -> 13, 14 -> 14,
                   15 -> 15, 16 -> 16, 17 -> 17, 18 -> 18, 19 -> 19, 20 -> 20,
                   21 -> 21, 22 -> 22, 23 -> 23, 24 -> 24, 25 -> 25, 26 -> 26,
                   27 -> 27, 28 -> 28, 29 -> 29], 
                 Association[
                 1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 
                  8, 9 -> 9, 10 -> 10, 11 -> 11, 12 -> 12, 13 -> 13, 14 -> 14,
                   15 -> 15, 16 -> 16, 17 -> 17, 18 -> 18, 19 -> 19, 20 -> 20,
                   21 -> 21, 22 -> 22, 23 -> 23, 24 -> 24, 25 -> 25, 26 -> 26,
                   27 -> 27, 28 -> 28, 29 -> 29], 
                 Association[
                 1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 
                  8, 9 -> 9, 10 -> 10, 11 -> 11, 12 -> 12, 13 -> 13, 14 -> 14,
                   15 -> 15, 16 -> 16, 17 -> 17, 18 -> 18, 19 -> 19, 20 -> 20,
                   21 -> 21, 22 -> 22, 23 -> 23, 24 -> 24, 25 -> 25, 26 -> 26,
                   27 -> 27, 28 -> 28, 29 -> 29]}, "MissingCode" -> 0, 
               "Version" -> {12.3, 1}, "ID" -> 4467298219351667816, "Output" -> 
               Association[
                "f1" -> Association[
                  "Type" -> "NominalVector", "Weight" -> 1]]]], 
             MachineLearning`MLProcessor["FirstValues", 
              Association[
              "Info" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1, 
                 "SetSize" -> {29, 29, 29, 29}], "Key" -> "f1", 
               "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
               "Missing" -> "Allowed"]]}, "Invertibility" -> "Perfect", 
           "StructurePreserving" -> False, "Missing" -> "Allowed"]], 
        "Calibrator" -> 
        MachineLearning`CalibratorFunction["TemperatureScaling", 
          Association["Theta" -> 0.766975443681003]], "Method" -> 
        "NaiveBayes", "PostProcessor" -> 
        MachineLearning`MLProcessor["Identity"], "Options" -> 
        Association[
         "SmoothingParameter" -> 
          Association["Value" -> 0.2, "Options" -> Association[]]]], 
      "TrainingInformation" -> 
      Association[
       "PanelCell" -> None, "TrainingFunction" -> Classify, "EMIterations" -> 
        Missing["KeyAbsent", "EMIterations"], "ProcessorEntropyShift" -> 0, 
        "PreprocessingTime" -> 0.163599`5.665325638211417, "LossName" -> 
        "MeanCrossEntropy", "BestModelInformation" -> Dataset[
          Association[
          "MeanCrossEntropy" -> 
           Around[0.4806199113124426, 0.024565087471833825`], "Accuracy" -> 
           Around[0.7739872378025128, 0.015719673108174438`], 
           "EvaluationTime" -> 0.000015848931924611124`, "TestSize" -> 700, 
           "ModelMemory" -> 29352., "ModelUtility" -> 0.02935825225711841, 
           "TrainingSize" -> 1280, "TrainingTime" -> 0.012589254117941668`, 
           "TrainingMemory" -> 300984., "ExperimentCount" -> 3, 
           "MeanCrossEntropyHistory" -> {
             Around[0.49103258745061396`, 0.04318324301731785], 
             Around[0.48859917016905546`, 0.04318876623499263], 
             Around[0.4622279763176585, 0.03416527538110489]}, 
           "AccuracyHistory" -> {
             Around[0.7747679778416265, 0.029261467581603803`], 
             Around[0.7747679778416264, 0.029261467581603796`], 
             Around[0.7724257577242853, 0.024105084186448814`]}, 
           "Configuration" -> {"NaiveBayes", "SmoothingParameter" -> 0.2}, 
           "FinalTrainingSize" -> 1600], 
          
          TypeSystem`Struct[{
           "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
            "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
            "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
            "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
           TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Integer], 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Integer], 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Integer], 
            TypeSystem`Vector[TypeSystem`AnyType, 3], 
            TypeSystem`Vector[TypeSystem`AnyType, 3], 
            TypeSystem`Tuple[{
              TypeSystem`Atom[String], TypeSystem`AnyType}], 
            TypeSystem`Atom[Integer]}], 
          Association[]], "Configurations" -> Dataset[
          Association[
          Association[
            "Value" -> "NaiveBayes", "Options" -> 
             Association[
              "SmoothingParameter" -> Association["Value" -> 0.2]]] -> 
           Association["Experiments" -> {
               Association[
               "MeanCrossEntropy" -> 
                Around[1.2588057653046725`, 0.20293143952370846`], "Accuracy" -> 
                Around[0.5297029702970301, 0.07040911965754303], 
                "EvaluationTime" -> 0.00001995262314968879, "TestSize" -> 100,
                 "ModelMemory" -> 17704, 
                "ModelUtility" -> -0.9550460855781614, "TrainingSize" -> 10, 
                "TrainingTime" -> 0.007943282347242814, "TrainingMemory" -> 
                53008, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                  Around[1.2588057653046725`, 0.14349419700316202`]}, 
                "AccuracyHistory" -> {
                  Around[0.5297029702970301, 0.049786765967223715`]}], 
               Association[
               "MeanCrossEntropy" -> 
                Around[2.465768964778999, 0.5090405542750996], "Accuracy" -> 
                Around[0.5594059405940598, 0.07003408321034302], 
                "EvaluationTime" -> 0.00001995262314968879, "TestSize" -> 100,
                 "ModelMemory" -> 27432, 
                "ModelUtility" -> -1.6361125470842457`, "TrainingSize" -> 50, 
                "TrainingTime" -> 0.01, "TrainingMemory" -> 63032, 
                "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                  Around[2.465768964778999, 0.35994602782688173`]}, 
                "AccuracyHistory" -> {
                  Around[0.5594059405940598, 0.04952157515221648]}], 
               Association[
               "MeanCrossEntropy" -> 
                Around[1.1507970720282499`, 0.2035669365831957], "Accuracy" -> 
                Around[0.6584158415841591, 0.04730538602486656], 
                "EvaluationTime" -> 0.000015848931924611124`, "TestSize" -> 
                200, "ModelMemory" -> 29352, 
                "ModelUtility" -> -0.8683717125872782, "TrainingSize" -> 250, 
                "TrainingTime" -> 0.01, "TrainingMemory" -> 96096, 
                "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                  Around[1.1507970720282499`, 0.14394356128334954`]}, 
                "AccuracyHistory" -> {
                  Around[0.6584158415841591, 0.03344995924483048]}], 
               Association[
               "MeanCrossEntropy" -> 
                Around[0.4806199113124426, 0.024565087471833825`], "Accuracy" -> 
                Around[0.7739872378025128, 0.015719673108174438`], 
                "EvaluationTime" -> 0.000015848931924611124`, "TestSize" -> 
                700, "ModelMemory" -> 29352., "ModelUtility" -> 
                0.02935825225711841, "TrainingSize" -> 1280, "TrainingTime" -> 
                0.012589254117941668`, "TrainingMemory" -> 300984., 
                "ExperimentCount" -> 3, "MeanCrossEntropyHistory" -> {
                  Around[0.49103258745061396`, 0.04318324301731785], 
                  Around[0.48859917016905546`, 0.04318876623499263], 
                  Around[0.4622279763176585, 0.03416527538110489]}, 
                "AccuracyHistory" -> {
                  Around[0.7747679778416265, 0.029261467581603803`], 
                  Around[0.7747679778416264, 0.029261467581603796`], 
                  Around[0.7724257577242853, 0.024105084186448814`]}]}, 
             "PredictedPerformances" -> 
             Association[
              "EvaluationTime" -> 0.000015848931924611124`, 
               "MeanCrossEntropy" -> 
               Around[0.4806199113124426, 0.024565087471833825`], 
               "ModelMemory" -> 29352., "TrainingMemory" -> 300984., 
               "TrainingTime" -> 0.023679849994669898`], "Index" -> 1]], 
          TypeSystem`Assoc[
           TypeSystem`Struct[{"Value", "Options"}, {
             TypeSystem`Atom[String], 
             TypeSystem`Assoc[
              TypeSystem`Atom[String], 
              TypeSystem`Assoc[
               TypeSystem`Atom[String], 
               TypeSystem`Atom[Real], 1], 1]}], 
           
           TypeSystem`Struct[{
            "Experiments", "PredictedPerformances", "Index"}, {
             TypeSystem`Vector[
              
              TypeSystem`Struct[{
               "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
                "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime",
                 "TrainingMemory", "ExperimentCount", 
                "MeanCrossEntropyHistory", "AccuracyHistory"}, {
               TypeSystem`AnyType, TypeSystem`AnyType, 
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[Integer], 
                TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
                TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength]}],
               4], 
             
             TypeSystem`Struct[{
              "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
               "TrainingMemory", "TrainingTime"}, {
               TypeSystem`Atom[Real], TypeSystem`AnyType, 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Real]}], 
             TypeSystem`Atom[Integer]}], 1], 
          Association[]], "MaxTrainingSize" -> 1600, 
        "PreprocessorEvaluationTime" -> 6.71875*^-6, "PreprocessorMemory" -> 
        63888, "InputDimension" -> 4, "OutputDimension" -> 1, 
        "BaselineLogProbability" -> -0.6931471805599453, "VariableBudget" -> 
        True, "CheckpointingInfo" -> Association["Checkpointing" -> False], 
        "UserStop" -> False, "NaturalStop" -> True, "AbortStop" -> False, 
        "RoundPartitioning" -> Dataset[{
           Association[
           "TrainingSizes" -> 10, "TimeBudgets" -> 0.0005404910049437723, 
            "ElapsedTimes" -> 0.012328, "ExperimentCounts" -> 1], 
           Association[
           "TrainingSizes" -> 50, "TimeBudgets" -> 0.0027024550247188627`, 
            "ElapsedTimes" -> 0.01533, "ExperimentCounts" -> 1], 
           Association[
           "TrainingSizes" -> 250, "TimeBudgets" -> 0.013512275123594318`, 
            "ElapsedTimes" -> 0.018176, "ExperimentCounts" -> 1], 
           Association[
           "TrainingSizes" -> 1280, "TimeBudgets" -> 0.06756137561797154, 
            "ElapsedTimes" -> 0.07437099999999999, "ExperimentCounts" -> 3]}, 
          
          TypeSystem`Vector[
           
           TypeSystem`Struct[{
            "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
             "ExperimentCounts"}, {
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer]}], 4], 
          Association[]]], "AnomalyDetector" -> None, "Log" -> 
      Association["Example" -> MachineLearning`MLDataset[
          Association[
          "f1" -> Association[
            "Type" -> "NumericalVector", "Weight" -> 1, 
             "Values" -> {{-0.7638, 2.4921, -0.0587, -0.7013}}, "ID" -> 
             1492053473002150288]], 
          Association[
          "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 
           0, "RawExample" -> False]], "TrainingTime" -> 0.313462, 
        "MaxTrainingMemory" -> 733648, "DataMemory" -> 231352, 
        "FunctionMemory" -> 155368, "LanguageVersion" -> {12.3, 1}, "Date" -> 
        DateObject[{2021, 7, 21, 6, 44, 21.074264`8.076327399643738}, 
          "Instant", "Gregorian", -4.], "ProcessorCount" -> 8, 
        "ProcessorType" -> "x86-64", "OperatingSystem" -> "MacOSX", 
        "SystemWordLength" -> 64, "Evaluations" -> {}]]],
    Editable->False,
    SelectWithContents->True,
    Selectable->False], ",", 
   InterpretationBox[
    RowBox[{
     TagBox["ClassifierFunction",
      "SummaryHead"], "[", 
     DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
      "Ready"}, 
      TemplateBox[{
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]],
                 ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              GraphicsBox[{{
                 PointSize[0.13], 
                 GrayLevel[0.45], 
                 
                 PointBox[{{0.9821769431797024, -0.440194219686987}, {
                  1.1339776261519132`, 0.8056918676854272}, {
                  0.5279892326667741, 0.6574306661126254}, {
                  0.022147046479890797`, 1.4937877187998898`}}], 
                 GrayLevel[0.7], 
                 
                 PointBox[{{-0.9815166384819979, 
                  0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                 GrayLevel[0.55], 
                 AbsoluteThickness[1.5], 
                 LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
               Axes -> {False, False}, AxesLabel -> {None, None}, 
                AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                  AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                Frame -> {{True, True}, {True, True}}, 
                FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                Directive[
                  Thickness[Tiny], 
                  GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}},
                 GridLines -> {None, None}, 
                LabelStyle -> {FontFamily -> "Arial"}, 
                Method -> {"ScalingFunctions" -> None}, 
                PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
               ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}], Frame -> True, FrameTicks -> None, 
               FrameStyle -> Directive[
                 Opacity[0.5], 
                 Thickness[Tiny], 
                 RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
               GrayLevel[0.94]], 
              GridBox[{{
                 RowBox[{
                   TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    TemplateBox[{"\"NumericalVector\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (length: \"", "4", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    
                    TemplateBox[{",", "\",\"", "0", "1"}, 
                    "RowWithSeparators"], "SummaryItem"]}]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
            AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]],
                 ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              GraphicsBox[{{
                 PointSize[0.13], 
                 GrayLevel[0.45], 
                 
                 PointBox[{{0.9821769431797024, -0.440194219686987}, {
                  1.1339776261519132`, 0.8056918676854272}, {
                  0.5279892326667741, 0.6574306661126254}, {
                  0.022147046479890797`, 1.4937877187998898`}}], 
                 GrayLevel[0.7], 
                 
                 PointBox[{{-0.9815166384819979, 
                  0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                 GrayLevel[0.55], 
                 AbsoluteThickness[1.5], 
                 LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
               Axes -> {False, False}, AxesLabel -> {None, None}, 
                AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                  AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                Frame -> {{True, True}, {True, True}}, 
                FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                Directive[
                  Thickness[Tiny], 
                  GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}},
                 GridLines -> {None, None}, 
                LabelStyle -> {FontFamily -> "Arial"}, 
                Method -> {"ScalingFunctions" -> None}, 
                PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
               ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}], Frame -> True, FrameTicks -> None, 
               FrameStyle -> Directive[
                 Opacity[0.5], 
                 Thickness[Tiny], 
                 RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
               GrayLevel[0.94]], 
              GridBox[{{
                 RowBox[{
                   TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    TemplateBox[{"\"NumericalVector\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (length: \"", "4", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    
                    TemplateBox[{",", "\",\"", "0", "1"}, 
                    "RowWithSeparators"], "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["\"LogisticRegression\"", "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                   "\"Number of training examples: \"", 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox["1600", "SummaryItem"]}]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
            AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open$$], ImageSize -> Automatic]},
       "SummaryPanel"],
      DynamicModuleValues:>{}], "]"}],
    ClassifierFunction[
     Association[
     "ExampleNumber" -> 1600, "ClassNumber" -> 2, "Input" -> 
      Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
          Association[
          "Input" -> Association[
            "f1" -> Association["Type" -> "NumericalVector", "Length" -> 4]], 
           "Output" -> 
           Association[
            "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]], 
           "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
             Association["Processors" -> {
                MachineLearning`MLProcessor["List"], 
                MachineLearning`MLProcessor["WrapMLDataset", 
                 Association[
                 "FeatureTypes" -> {"NumericalVector"}, 
                  "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                  "ExampleWeights" -> Automatic, "RawExample" -> 
                  Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                  False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
           "Perfect", "StructurePreserving" -> False, "Missing" -> 
           "Allowed"]], "Processor" -> MachineLearning`MLProcessor["Sequence", 
          Association[
          "Input" -> Association[
            "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]], 
           "Output" -> 
           Association[
            "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]], 
           "Processors" -> {
             MachineLearning`MLProcessor["SynthesizeMissingValues", 
              Association[
              "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
               "StructurePreserving" -> True, "Input" -> 
               Association[
                "f1" -> Association[
                  "Type" -> "NumericalVector", "Weight" -> 1]], 
               "Distribution" -> LearnedDistribution[
                 Association[
                 "ExampleNumber" -> 1600, "Preprocessor" -> 
                  MachineLearning`MLProcessor["ToMLDataset", 
                    Association[
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 4]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Preprocessor" -> MachineLearning`MLProcessor["Identity"],
                     "ScalarFeature" -> True, "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"]], 
                  "Processor" -> MachineLearning`MLProcessor["Identity"], 
                  "PerformanceGoal" -> "DirectTraining", "BatchProcessing" -> 
                  Automatic, "Model" -> 
                  Association[
                   "RotationMatrix" -> {{-0.4988516509434685, 
                    0.6800114529837721, 
                    0.2967179981034814, -0.44798424499455053`}, \
{-0.47581680062050846`, -0.6681620063134962, 
                    0.5607025613622165, -0.11300682832570944`}, \
{-0.5087490236345246, -0.2345449187871961, -0.7718339861097762, \
-0.30072480760309694`}, {-0.5156741544319992, 
                    0.19008587059834328`, -0.042934428716428386`, 
                    0.8343285702170977}}, 
                    "Precisions" -> {0.5681345842731561, 0.9472728334008746, 
                    1.040191256683371, 1.0598592871958206`}, "NoisePrecision" -> 
                    None, "Processor" -> MachineLearning`MLProcessor["Center", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {0.018344187500000008`, -0.009112187499999994, 
                    0.019624187500000015`, -0.012167375000000003`}, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Version" -> {12.3, 1}, "ID" -> 2580788735436893886]], 
                    "PostProcessor" -> 
                    MachineLearning`MLProcessor["FirstValues", 
                    Association[
                    "Info" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1], "Key" -> 
                    "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
                    False, "Missing" -> "Allowed"]], "Method" -> 
                    "Multinormal", "Options" -> 
                    Association[
                    "CovarianceType" -> 
                    Association[
                    "Value" -> "Full", "Options" -> Association[]], 
                    "IntrinsicDimension" -> 
                    Association["Value" -> 4, "Options" -> Association[]]]], 
                  "TrainingInformation" -> 
                  Association["Configurations" -> Dataset[
                    Association[
                    Association[
                    "Value" -> "Multinormal", "Options" -> 
                    Association[
                    "CovarianceType" -> Association["Value" -> "Full"], 
                    "IntrinsicDimension" -> 
                    Association["Value" -> "Heuristic"]], "NaiveImputer" -> 
                    MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {0.018344187500000064`, -0.009112187500000016, 
                    0.01962418749999987, -0.012167374999999972`}, 
                    "StandardDeviation" -> {1.0955214422268125`, 
                    1.0881541712093075`, 1.0824424994930284`, 
                    1.0792418828849764`}, "Method" -> "NaiveSampler", 
                    "VectorLength" -> 4, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector", "Version" -> {12.3, 1}, "ID" -> 
                    4747808072524423015]], "EMIterations" -> 1] -> 
                    Association[]], 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], 
                    Association[]], "BestModelInformation" -> Dataset[
                    Association[
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]], 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], 
                    Association[]]], "NaiveImputer" -> 
                  MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {0.018344187500000064`, -0.009112187500000016, 
                    0.01962418749999987, -0.012167374999999972`}, 
                    "StandardDeviation" -> {1.0955214422268125`, 
                    1.0881541712093075`, 1.0824424994930284`, 
                    1.0792418828849764`}, "Method" -> "NaiveSampler", 
                    "VectorLength" -> 4, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector", "Version" -> {12.3, 1}, "ID" -> 
                    4747808072524423015]], "InputDimension" -> 0, 
                  "OutputDimension" -> 4, "Log" -> 
                  Association["Example" -> MachineLearning`MLDataset[
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1, 
                    "Values" -> {{1.3611, 0.4158, 1.156, 0.2169}}, "ID" -> 
                    3791095496786132862]], 
                    Association[
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False]], 
                    "TrainingTime" -> 0.056561, "MaxTrainingMemory" -> 369800,
                     "DataMemory" -> 58256, "FunctionMemory" -> 29624, 
                    "LanguageVersion" -> {12.3, 1}, "Date" -> 
                    DateObject[{
                    2021, 7, 21, 6, 44, 21.136775`8.077613707815619}, 
                    "Instant", "Gregorian", -4.], "ProcessorCount" -> 8, 
                    "ProcessorType" -> "x86-64", "OperatingSystem" -> 
                    "MacOSX", "SystemWordLength" -> 64, "Evaluations" -> {}], 
                  "LogPDFDistribution" -> 
                  MachineLearning`TailedQuantileDistribution[
                    Association[
                    "Quantiles" -> {-1.6973550374796453`, \
-1.6973550374796453`, -1.5129810218196993`, -1.5069557613729834`, \
-1.4125339429512191`, -1.3478074558507014`, -1.2983230062765763`, \
-1.2948029918007138`, -1.2897053629428759`, -1.134124683177126, \
-1.0935066829006763`}, "LeftBoundary" -> -1.5129810218196993`, "LeftScale" -> 
                    0.09218700782997302, "LeftTailNorm" -> 0.2]], "Entropy" -> 
                  Around[5.4352383786288865`, 0.22968047255532728`], 
                  "EntropySampleSize" -> 10]], "Output" -> 
               Association[
                "f1" -> Association[
                  "Type" -> "NumericalVector", "Weight" -> 1]], 
               "EvaluationStrategy" -> "ModeFinding", "Version" -> {12.3, 1}, 
               "ID" -> 895810465636885430]], 
             MachineLearning`MLProcessor["Standardize", 
              Association[
              "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
               "StructurePreserving" -> True, "Input" -> 
               Association[
                "f1" -> Association[
                  "Type" -> "NumericalVector", "Weight" -> 1]], 
               "Mean" -> {0.018344187500000064`, -0.009112187500000016, 
                0.01962418749999987, -0.012167374999999972`}, 
               "StandardDeviation" -> {1.0955214422268125`, 
                1.0881541712093075`, 1.0824424994930284`, 
                1.0792418828849764`}, "Output" -> 
               Association[
                "f1" -> Association[
                  "Type" -> "NumericalVector", "Weight" -> 1]], 
               "Version" -> {12.3, 1}, "ID" -> 2885410098803075842]]}, 
           "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
           "Missing" -> "Imputed"]]], "Output" -> 
      Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
          Association[
          "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
           "Output" -> 
           Association[
            "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
           "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
             Association["Processors" -> {
                MachineLearning`MLProcessor["List"], 
                MachineLearning`MLProcessor["WrapMLDataset", 
                 Association[
                 "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                  "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                  Automatic, "RawExample" -> 
                  Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                  False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
           "Perfect", "StructurePreserving" -> False, "Missing" -> 
           "Allowed"]], "Processor" -> MachineLearning`MLProcessor["Sequence", 
          Association[
          "Input" -> Association[
            "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
           "Output" -> 
           Association[
            "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
           "Processors" -> {
             MachineLearning`MLProcessor["ToVector", 
              Association[
              "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
               "StructurePreserving" -> True, "Input" -> 
               Association[
                "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
               "Output" -> 
               Association[
                "f1" -> Association[
                  "Type" -> "NominalVector", "Weight" -> 1]], 
               "Version" -> {12.3, 1}, "ID" -> 7385217781795203165]], 
             MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
              Association[
              "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
               "StructurePreserving" -> True, "Input" -> 
               Association[
                "f1" -> Association[
                  "Type" -> "NominalVector", "Weight" -> 1]], "Index" -> {
                 Association[0 -> 1, 1 -> 2]}, "MissingCode" -> 0, 
               "Version" -> {12.3, 1}, "ID" -> 9072788647140281776, "Output" -> 
               Association[
                "f1" -> Association[
                  "Type" -> "NominalVector", "Weight" -> 1]]]], 
             MachineLearning`MLProcessor["FromVector", 
              Association[
              "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
               "StructurePreserving" -> True, "Input" -> 
               Association[
                "f1" -> Association[
                  "Type" -> "NominalVector", "Weight" -> 1, 
                   "SetSize" -> {2}]], "Output" -> 
               Association[
                "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
               "Version" -> {12.3, 1}, "ID" -> 8667766357427704565]], 
             MachineLearning`MLProcessor["FirstValues", 
              Association[
              "Info" -> Association[
                "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2], "Key" -> 
               "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
               False, "Missing" -> "Allowed"]]}, "Invertibility" -> "Perfect",
            "StructurePreserving" -> False, "Missing" -> "Allowed"]], 
        "ProbabilityPostprocessor" -> Identity, "Name" -> "class", "Marginal" -> 
        Association[0 -> 0.5, 1 -> 0.5]], "LabelSplitter" -> 
      MachineLearning`MLProcessor["FeatureLabelSplit", 
        Association[
        "Processor" -> MachineLearning`MLProcessor["AssociationSplit"], 
         "PreferLabeled" -> True, "KeepLabelsFormat" -> False]], 
      "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
      "Prior" -> Automatic, "Utility" -> 
      SparseArray[
       Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
      "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
      Automatic, "BatchProcessing" -> Automatic, "Model" -> 
      Association["LogProbabilitiesFunction" -> LinearLayer[
          Association[
          "Type" -> "Linear", "Arrays" -> 
           Association[
            "Weights" -> 
             RawArray["Real32",{{0.9343218803405762, 1.0841760635375977`, 
               1.0638313293457031`, 0.7995494604110718}}], "Biases" -> 
             RawArray["Real32",{-0.04594273865222931}]], "Parameters" -> 
           Association[
            "OutputDimensions" -> {1}, "$OutputSize" -> 1, "$InputSize" -> 4, 
             "$InputDimensions" -> {4}], "Inputs" -> 
           Association[
            "Input" -> NeuralNetworks`TensorT[{4}, NeuralNetworks`AtomT]], 
           "Outputs" -> 
           Association[
            "Output" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
          Association["Version" -> "12.3.2", "Unstable" -> False]], 
        "Processor" -> MachineLearning`MLProcessor["FirstValues", 
          Association[
          "Info" -> Association["Weight" -> 1, "Type" -> "NumericalVector"], 
           "Key" -> "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
           False, "Missing" -> "Allowed"]], "Calibrator" -> None, "Method" -> 
        "LogisticRegression", "PostProcessor" -> 
        MachineLearning`MLProcessor["Identity"], "Options" -> 
        Association[
         "L1Regularization" -> 
          Association["Value" -> 0, "Options" -> Association[]], 
          "L2Regularization" -> 
          Association["Value" -> 0.00001, "Options" -> Association[]], 
          "OptimizationMethod" -> 
          Association["Value" -> "LBFGS", "Options" -> Association[]], 
          MaxIterations -> 
          Association["Value" -> 30, "Options" -> Association[]]]], 
      "TrainingInformation" -> 
      Association[
       "PanelCell" -> None, "TrainingFunction" -> Classify, "EMIterations" -> 
        Missing["KeyAbsent", "EMIterations"], "ProcessorEntropyShift" -> 0, 
        "PreprocessingTime" -> 0.198548`5.749410510212729, "LossName" -> 
        "MeanCrossEntropy", "BestModelInformation" -> Dataset[
          Association[
          "MeanCrossEntropy" -> 
           Around[0.4416324808121561, 0.04180964313682855], "Accuracy" -> 
           Around[0.7965890475831131, 0.03162835462683427], "EvaluationTime" -> 
           7.991969241599812*^-6, "TestSize" -> 320, "ModelMemory" -> 9088, 
           "ModelUtility" -> 0.10537139685109276`, "TrainingSize" -> 1280, 
           "TrainingTime" -> 0.03162277660168379, "TrainingMemory" -> 436504, 
           "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
             Around[0.4416324808121561, 0.02956388218104106]}, 
           "AccuracyHistory" -> {
             Around[0.7965890475831131, 0.022364624034407424`]}, 
           "Configuration" -> {
            "LogisticRegression", "L1Regularization" -> 0, "L2Regularization" -> 
             0.00001, "OptimizationMethod" -> Automatic, MaxIterations -> 30},
            "FinalTrainingSize" -> 1600], 
          
          TypeSystem`Struct[{
           "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
            "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
            "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
            "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
           TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Integer], 
            TypeSystem`Atom[Integer], 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Integer], 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Integer], 
            TypeSystem`Atom[Integer], 
            TypeSystem`Vector[TypeSystem`AnyType, 1], 
            TypeSystem`Vector[TypeSystem`AnyType, 1], 
            TypeSystem`Tuple[{
              TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType,
               TypeSystem`AnyType, TypeSystem`AnyType}], 
            TypeSystem`Atom[Integer]}], 
          Association[]], "Configurations" -> Dataset[
          Association[
          Association[
            "Value" -> "LogisticRegression", "Options" -> 
             Association[
              "L1Regularization" -> Association["Value" -> 0], 
               "L2Regularization" -> Association["Value" -> 0.01], 
               "OptimizationMethod" -> Association["Value" -> Automatic], 
               MaxIterations -> Association["Value" -> 30]]] -> 
           Association["Experiments" -> {
               Association[
               "MeanCrossEntropy" -> 
                Around[1.0127581384000328`, 0.1130457669590013], "Accuracy" -> 
                Around[0.7426513471697502, 0.023225446244383163`], 
                "EvaluationTime" -> 6.1241875721548994`*^-6, "TestSize" -> 
                700, "ModelMemory" -> 9088, 
                "ModelUtility" -> -0.7279049561056621, "TrainingSize" -> 10, 
                "TrainingTime" -> 0.03162277660168379, "TrainingMemory" -> 
                78520, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                  Around[1.0127581384000328`, 0.07993542840114397]}, 
                "AccuracyHistory" -> {
                  Around[0.7426513471697502, 0.016422870535486966`]}], 
               Association[
               "MeanCrossEntropy" -> 
                Around[0.7444785440428623, 0.08135378690527474], "Accuracy" -> 
                Around[0.7588640085024606, 0.022747511470152696`], 
                "EvaluationTime" -> 5.3826440815667795`*^-6, "TestSize" -> 
                700, "ModelMemory" -> 9088, 
                "ModelUtility" -> -0.4196973118239107, "TrainingSize" -> 50, 
                "TrainingTime" -> 0.01995262314968879, "TrainingMemory" -> 
                83080, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                  Around[0.7444785440428623, 0.05752581439592512]}, 
                "AccuracyHistory" -> {
                  Around[0.7588640085024606, 0.016084919615663742`]}], 
               Association[
               "MeanCrossEntropy" -> 
                Around[0.4464770726234814, 0.0340914741343272], "Accuracy" -> 
                Around[0.8028827308519104, 0.02115789854014699], 
                "EvaluationTime" -> 6.5429604308649135`*^-6, "TestSize" -> 
                700, "ModelMemory" -> 9088, "ModelUtility" -> 
                0.09806261923595394, "TrainingSize" -> 250, "TrainingTime" -> 
                0.025118864315095794`, "TrainingMemory" -> 108536, 
                "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                  Around[0.4464770726234814, 0.024106312541028546`]}, 
                "AccuracyHistory" -> {
                  Around[0.8028827308519104, 0.01496089353339489]}], 
               Association[
               "MeanCrossEntropy" -> 
                Around[0.4416329318738032, 0.04180775890829191], "Accuracy" -> 
                Around[0.7965890475831131, 0.03162835462683427], 
                "EvaluationTime" -> 7.991969241599812*^-6, "TestSize" -> 320, 
                "ModelMemory" -> 9088, "ModelUtility" -> 0.10537123192474684`,
                 "TrainingSize" -> 1280, "TrainingTime" -> 
                0.03162277660168379, "TrainingMemory" -> 436568, 
                "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                  Around[0.4416329318738032, 0.0295625498302655]}, 
                "AccuracyHistory" -> {
                  Around[0.7965890475831131, 0.022364624034407424`]}]}, 
             "PredictedPerformances" -> 
             Association[
              "EvaluationTime" -> 7.991969241599812*^-6, "MeanCrossEntropy" -> 
               Around[0.4416329318738032, 0.04180775890829191], "ModelMemory" -> 
               9088, "TrainingMemory" -> 436568, "TrainingTime" -> 
               0.07115124735378853], "Index" -> 1], 
           Association[
            "Value" -> "LogisticRegression", "Options" -> 
             Association[
              "L1Regularization" -> Association["Value" -> 0], 
               "L2Regularization" -> Association["Value" -> 0.00001], 
               "OptimizationMethod" -> Association["Value" -> Automatic], 
               MaxIterations -> Association["Value" -> 30]]] -> 
           Association["Experiments" -> {
               Association[
               "MeanCrossEntropy" -> 
                Around[2.286925702280507, 0.26016896350146246`], "Accuracy" -> 
                Around[0.7337613772720313, 0.021930789973100256`], 
                "EvaluationTime" -> 5.336297613405022*^-6, "TestSize" -> 800, 
                "ModelMemory" -> 9088, "ModelUtility" -> -1.542854890470211, 
                "TrainingSize" -> 10, "TrainingTime" -> 0.03162277660168379, 
                "TrainingMemory" -> 78344, "ExperimentCount" -> 1, 
                "MeanCrossEntropyHistory" -> {
                  Around[2.286925702280507, 0.18396723834615947`]}, 
                "AccuracyHistory" -> {
                  Around[0.7337613772720313, 0.015507410306757131`]}], 
               Association[
               "MeanCrossEntropy" -> 
                Around[0.7542474767509642, 0.0828991144650791], "Accuracy" -> 
                Around[0.7588640085024606, 0.022747511470152696`], 
                "EvaluationTime" -> 5.197258208919749*^-6, "TestSize" -> 700, 
                "ModelMemory" -> 9088, 
                "ModelUtility" -> -0.43285779433367677`, "TrainingSize" -> 50,
                 "TrainingTime" -> 0.025118864315095794`, "TrainingMemory" -> 
                83080, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                  Around[0.7542474767509642, 0.058618525992617236`]}, 
                "AccuracyHistory" -> {
                  Around[0.7588640085024606, 0.016084919615663742`]}], 
               Association[
               "MeanCrossEntropy" -> 
                Around[0.44650195386664243`, 0.03410437484850162], "Accuracy" -> 
                Around[0.8028827308519104, 0.02115789854014699], 
                "EvaluationTime" -> 6.5429604308649135`*^-6, "TestSize" -> 
                700, "ModelMemory" -> 9088, "ModelUtility" -> 
                0.09800203941058339, "TrainingSize" -> 250, "TrainingTime" -> 
                0.025118864315095794`, "TrainingMemory" -> 108144, 
                "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                  Around[0.44650195386664243`, 0.024115434723503432`]}, 
                "AccuracyHistory" -> {
                  Around[0.8028827308519104, 0.01496089353339489]}], 
               Association[
               "MeanCrossEntropy" -> 
                Around[0.4416324808121561, 0.04180964313682855], "Accuracy" -> 
                Around[0.7965890475831131, 0.03162835462683427], 
                "EvaluationTime" -> 7.991969241599812*^-6, "TestSize" -> 320, 
                "ModelMemory" -> 9088, "ModelUtility" -> 0.10537139685109276`,
                 "TrainingSize" -> 1280, "TrainingTime" -> 
                0.03162277660168379, "TrainingMemory" -> 436504, 
                "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                  Around[0.4416324808121561, 0.02956388218104106]}, 
                "AccuracyHistory" -> {
                  Around[0.7965890475831131, 0.022364624034407424`]}]}, 
             "PredictedPerformances" -> 
             Association[
              "EvaluationTime" -> 7.991969241599812*^-6, "MeanCrossEntropy" -> 
               Around[0.4416324808121561, 0.04180964313682855], "ModelMemory" -> 
               9088, "TrainingMemory" -> 436504, "TrainingTime" -> 
               0.07115124735378853], "Index" -> 2], 
           Association[
            "Value" -> "LogisticRegression", "Options" -> 
             Association[
              "L1Regularization" -> Association["Value" -> 0], 
               "L2Regularization" -> Association["Value" -> 10.], 
               "OptimizationMethod" -> Association["Value" -> Automatic], 
               MaxIterations -> Association["Value" -> 30]]] -> 
           Association["Experiments" -> {
               Association[
               "MeanCrossEntropy" -> 
                Around[0.47847310216330635`, 0.0217501172007646], "Accuracy" -> 
                Around[0.7895579326679683, 0.021664382773005232`], 
                "EvaluationTime" -> 5.56802995421381*^-6, "TestSize" -> 700, 
                "ModelMemory" -> 9088, "ModelUtility" -> 0.03495617148812258, 
                "TrainingSize" -> 50, "TrainingTime" -> 0.015848931924611134`,
                 "TrainingMemory" -> 79960, "ExperimentCount" -> 1, 
                "MeanCrossEntropyHistory" -> {
                  Around[0.47847310216330635`, 0.015379655364262815`]}, 
                "AccuracyHistory" -> {
                  Around[0.7895579326679683, 0.01531903196901302]}], 
               Association[
               "MeanCrossEntropy" -> 
                Around[0.4441395936234967, 0.0351459116300282], "Accuracy" -> 
                Around[0.7868238773646768, 0.028831780010645014`], 
                "EvaluationTime" -> 6.718000670412151*^-6, "TestSize" -> 400, 
                "ModelMemory" -> 9088, "ModelUtility" -> 0.10276506179484013`,
                 "TrainingSize" -> 250, "TrainingTime" -> 0.01995262314968879,
                 "TrainingMemory" -> 108392, "ExperimentCount" -> 1, 
                "MeanCrossEntropyHistory" -> {
                  Around[0.4441395936234967, 0.02485191244457608]}, 
                "AccuracyHistory" -> {
                  Around[0.7868238773646768, 0.020387147159205837`]}], 
               Association[
               "MeanCrossEntropy" -> 
                Around[0.4423770464585974, 0.04011266443162271], "Accuracy" -> 
                Around[0.8006700626743283, 0.03136499563925551], 
                "EvaluationTime" -> 7.159310012481487*^-6, "TestSize" -> 320, 
                "ModelMemory" -> 9088, "ModelUtility" -> 0.1044714140370484, 
                "TrainingSize" -> 1280, "TrainingTime" -> 0.03162277660168379,
                 "TrainingMemory" -> 436808, "ExperimentCount" -> 1, 
                "MeanCrossEntropyHistory" -> {
                  Around[0.4423770464585974, 0.028363937031060847`]}, 
                "AccuracyHistory" -> {
                  Around[0.8006700626743283, 0.02217840110840406]}]}, 
             "PredictedPerformances" -> 
             Association[
              "EvaluationTime" -> 7.159310012481487*^-6, "MeanCrossEntropy" -> 
               Around[0.4423770464585974, 0.04011266443162271], "ModelMemory" -> 
               9088, "TrainingMemory" -> 436808, "TrainingTime" -> 
               0.05537740267671588], "Index" -> 3], 
           Association[
            "Value" -> "LogisticRegression", "Options" -> 
             Association[
              "L1Regularization" -> Association["Value" -> 0], 
               "L2Regularization" -> Association["Value" -> 100000.], 
               "OptimizationMethod" -> Association["Value" -> Automatic], 
               MaxIterations -> Association["Value" -> 30]]] -> 
           Association["Experiments" -> {
               Association[
               "MeanCrossEntropy" -> 
                Around[0.6929643654861026, 0.003395568554224241], "Accuracy" -> 
                Around[0.7910190511450514, 0.023403665913338496`], 
                "EvaluationTime" -> 6.581858261875411*^-6, "TestSize" -> 600, 
                "ModelMemory" -> 9088, "ModelUtility" -> -0.3273515522910708, 
                "TrainingSize" -> 50, "TrainingTime" -> 0.012589254117941668`,
                 "TrainingMemory" -> 74392, "ExperimentCount" -> 1, 
                "MeanCrossEntropyHistory" -> {
                  Around[0.6929643654861026, 0.0024010295506757618`]}, 
                "AccuracyHistory" -> {
                  Around[0.7910190511450514, 0.016548890871946102`]}], 
               Association[
               "MeanCrossEntropy" -> 
                Around[0.6923628575764489, 0.003396026909667509], "Accuracy" -> 
                Around[0.7959642316432239, 0.023165589460062246`], 
                "EvaluationTime" -> 6.3095734448019305`*^-6, "TestSize" -> 
                600, "ModelMemory" -> 9088, 
                "ModelUtility" -> -0.3264841365046103, "TrainingSize" -> 250, 
                "TrainingTime" -> 0.012589254117941668`, "TrainingMemory" -> 
                108504, "ExperimentCount" -> 1, 
                "MeanCrossEntropyHistory" -> {
                  Around[0.6923628575764489, 0.0024013536569178905`]}, 
                "AccuracyHistory" -> {
                  Around[0.7959642316432239, 0.016380545397393625`]}], 
               Association[
               "MeanCrossEntropy" -> 
                Around[0.6896429006385262, 0.004776950782201942], "Accuracy" -> 
                Around[0.7872784432066761, 0.032161429132977266`], 
                "EvaluationTime" -> 7.991969241599812*^-6, "TestSize" -> 320, 
                "ModelMemory" -> 9088, 
                "ModelUtility" -> -0.32295175392566433`, "TrainingSize" -> 
                1280, "TrainingTime" -> 0.015848931924611134`, 
                "TrainingMemory" -> 436504, "ExperimentCount" -> 1, 
                "MeanCrossEntropyHistory" -> {
                  Around[0.6896429006385262, 0.0033778142914893754`]}, 
                "AccuracyHistory" -> {
                  Around[0.7872784432066761, 0.022741564632578808`]}]}, 
             "PredictedPerformances" -> 
             Association[
              "EvaluationTime" -> 7.991969241599812*^-6, "MeanCrossEntropy" -> 
               Around[0.6896429006385262, 0.004776950782201942], 
               "ModelMemory" -> 9088, "TrainingMemory" -> 436504, 
               "TrainingTime" -> 0.032400419023705586`], "Index" -> 4], 
           Association[
            "Value" -> "LogisticRegression", "Options" -> 
             Association[
              "L1Regularization" -> Association["Value" -> 0], 
               "L2Regularization" -> Association["Value" -> 1.], 
               "OptimizationMethod" -> Association["Value" -> Automatic], 
               MaxIterations -> Association["Value" -> 30]]] -> 
           Association["Experiments" -> {
               Association[
               "MeanCrossEntropy" -> 
                Around[0.4817060107172894, 0.027413879291633574`], "Accuracy" -> 
                Around[0.781575345076192, 0.01935169997980795], 
                "EvaluationTime" -> 5.01187233627272*^-6, "TestSize" -> 900, 
                "ModelMemory" -> 9088, "ModelUtility" -> 0.02595485897974148, 
                "TrainingSize" -> 10, "TrainingTime" -> 0.015848931924611134`,
                 "TrainingMemory" -> 77288, "ExperimentCount" -> 1, 
                "MeanCrossEntropyHistory" -> {
                  Around[0.4817060107172894, 0.019384539945743566`]}, 
                "AccuracyHistory" -> {
                  Around[0.781575345076192, 0.013683718283209776`]}], 
               Association[
               "MeanCrossEntropy" -> 
                Around[0.5436798883885005, 0.04861326117143838], "Accuracy" -> 
                Around[0.7615611376491506, 0.024521553483654476`], 
                "EvaluationTime" -> 5.01187233627272*^-6, "TestSize" -> 600, 
                "ModelMemory" -> 9088, 
                "ModelUtility" -> -0.10147909922547527`, "TrainingSize" -> 50,
                 "TrainingTime" -> 0.01995262314968879, "TrainingMemory" -> 
                82552, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                  Around[0.5436798883885005, 0.034374766629916766`]}, 
                "AccuracyHistory" -> {
                  Around[0.7615611376491506, 0.017339356753520687`]}], 
               Association[
               "MeanCrossEntropy" -> 
                Around[0.4444358838733812, 0.03292630730975261], "Accuracy" -> 
                Around[0.8028827308519104, 0.02115789854014699], 
                "EvaluationTime" -> 6.1241875721548994`*^-6, "TestSize" -> 
                700, "ModelMemory" -> 9088, "ModelUtility" -> 
                0.10309233409055396`, "TrainingSize" -> 250, "TrainingTime" -> 
                0.025118864315095794`, "TrainingMemory" -> 108264, 
                "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                  Around[0.4444358838733812, 0.023282415178158256`]}, 
                "AccuracyHistory" -> {
                  Around[0.8028827308519104, 0.01496089353339489]}], 
               Association[
               "MeanCrossEntropy" -> 
                Around[0.4416810086849842, 0.04162317194716854], "Accuracy" -> 
                Around[0.7965890475831131, 0.03162835462683427], 
                "EvaluationTime" -> 7.991969241599812*^-6, "TestSize" -> 320, 
                "ModelMemory" -> 9088, "ModelUtility" -> 0.10534643321944559`,
                 "TrainingSize" -> 1280, "TrainingTime" -> 
                0.03162277660168379, "TrainingMemory" -> 436504, 
                "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                  Around[0.4416810086849842, 0.029432027138336543`]}, 
                "AccuracyHistory" -> {
                  Around[0.7965890475831131, 0.022364624034407424`]}]}, 
             "PredictedPerformances" -> 
             Association[
              "EvaluationTime" -> 7.991969241599812*^-6, "MeanCrossEntropy" -> 
               Around[0.4416810086849842, 0.04162317194716854], "ModelMemory" -> 
               9088, "TrainingMemory" -> 436504, "TrainingTime" -> 
               0.05537740267671588], "Index" -> 5], 
           Association[
            "Value" -> "LogisticRegression", "Options" -> 
             Association[
              "L1Regularization" -> Association["Value" -> 0], 
               "L2Regularization" -> Association["Value" -> 0.1], 
               "OptimizationMethod" -> Association["Value" -> Automatic], 
               MaxIterations -> Association["Value" -> 30]]] -> 
           Association["Experiments" -> {
               Association[
               "MeanCrossEntropy" -> 
                Around[0.4462572874221721, 0.03397639754449288], "Accuracy" -> 
                Around[0.8028827308519104, 0.02115789854014699], 
                "EvaluationTime" -> 6.357574558217883*^-6, "TestSize" -> 700, 
                "ModelMemory" -> 9088, "ModelUtility" -> 0.09859839716380248, 
                "TrainingSize" -> 250, "TrainingTime" -> 
                0.025118864315095794`, "TrainingMemory" -> 108200, 
                "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                  Around[0.4462572874221721, 0.024024941104000875`]}, 
                "AccuracyHistory" -> {
                  Around[0.8028827308519104, 0.01496089353339489]}], 
               Association[
               "MeanCrossEntropy" -> 
                Around[0.4416370218629186, 0.04179080390466762], "Accuracy" -> 
                Around[0.7965890475831131, 0.03162835462683427], 
                "EvaluationTime" -> 7.669844044494264*^-6, "TestSize" -> 320, 
                "ModelMemory" -> 9088, "ModelUtility" -> 0.1053696789215024, 
                "TrainingSize" -> 1280, "TrainingTime" -> 0.03162277660168379,
                 "TrainingMemory" -> 436568, "ExperimentCount" -> 1, 
                "MeanCrossEntropyHistory" -> {
                  Around[0.4416370218629186, 0.02955056083222772]}, 
                "AccuracyHistory" -> {
                  Around[0.7965890475831131, 0.022364624034407424`]}]}, 
             "PredictedPerformances" -> 
             Association[
              "EvaluationTime" -> 7.669844044494264*^-6, "MeanCrossEntropy" -> 
               Around[0.4416370218629186, 0.04179080390466762], "ModelMemory" -> 
               9088, "TrainingMemory" -> 436568, "TrainingTime" -> 
               0.06464733506720054], "Index" -> 6], 
           Association[
            "Value" -> "LogisticRegression", "Options" -> 
             Association[
              "L1Regularization" -> Association["Value" -> 0], 
               "L2Regularization" -> Association["Value" -> 1.*^6], 
               "OptimizationMethod" -> Association["Value" -> Automatic], 
               MaxIterations -> Association["Value" -> 30]]] -> 
           Association["Experiments" -> {
               Association[
               "MeanCrossEntropy" -> 
                Around[0.6931425977614669, 0.002940624603682168], "Accuracy" -> 
                Around[0.7997581617017743, 0.019871909219225735`], 
                "EvaluationTime" -> 5.498510251971174*^-6, "TestSize" -> 800, 
                "ModelMemory" -> 9088, "ModelUtility" -> -0.3274773189858071, 
                "TrainingSize" -> 10, "TrainingTime" -> 0.01, 
                "TrainingMemory" -> 69432, "ExperimentCount" -> 1, 
                "MeanCrossEntropyHistory" -> {
                  Around[0.6931425977614669, 0.0020793355981876646`]}, 
                "AccuracyHistory" -> {
                  Around[0.7997581617017743, 0.014051561764037986`]}], 
               Association[
               "MeanCrossEntropy" -> 
                Around[0.6931284827724696, 0.0037196288873001656`], 
                "Accuracy" -> 
                Around[0.7917837172678067, 0.025600606530793685`], 
                "EvaluationTime" -> 5.2714125579785625`*^-6, "TestSize" -> 
                500, "ModelMemory" -> 9088, 
                "ModelUtility" -> -0.3276815354616407, "TrainingSize" -> 50, 
                "TrainingTime" -> 0.007943282347242814, "TrainingMemory" -> 
                73968, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                  Around[0.6931284827724696, 0.0026301748097073193`]}, 
                "AccuracyHistory" -> {
                  Around[0.7917837172678067, 0.018102362480412828`]}], 
               Association[
               "MeanCrossEntropy" -> 
                Around[0.6930683898803204, 0.0041586771541656685`], 
                "Accuracy" -> Around[0.8014899376903076, 0.02808969154589605],
                 "EvaluationTime" -> 6.30957344480193*^-6, "TestSize" -> 400, 
                "ModelMemory" -> 9088, 
                "ModelUtility" -> -0.32772148074217733`, "TrainingSize" -> 
                250, "TrainingTime" -> 0.01, "TrainingMemory" -> 108200, 
                "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                  Around[0.6930683898803204, 0.002940628816476117]}, 
                "AccuracyHistory" -> {
                  Around[0.8014899376903076, 0.01986241137354153]}], 
               Association[
               "MeanCrossEntropy" -> 
                Around[0.6927923059458133, 0.004763726012770246], "Accuracy" -> 
                Around[0.7872784432066761, 0.032161429132977266`], 
                "EvaluationTime" -> 7.991969241599812*^-6, "TestSize" -> 320, 
                "ModelMemory" -> 9088, "ModelUtility" -> -0.3274979754848131, 
                "TrainingSize" -> 1280, "TrainingTime" -> 
                0.015848931924611134`, "TrainingMemory" -> 436568, 
                "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                  Around[0.6927923059458133, 0.0033684629673445946`]}, 
                "AccuracyHistory" -> {
                  Around[0.7872784432066761, 0.022741564632578808`]}]}, 
             "PredictedPerformances" -> 
             Association[
              "EvaluationTime" -> 7.991969241599812*^-6, "MeanCrossEntropy" -> 
               Around[0.6927923059458133, 0.004763726012770246], 
               "ModelMemory" -> 9088, "TrainingMemory" -> 436568, 
               "TrainingTime" -> 0.029811164905763916`], "Index" -> 7], 
           Association[
            "Value" -> "LogisticRegression", "Options" -> 
             Association[
              "L1Regularization" -> Association["Value" -> 0], 
               "L2Regularization" -> Association["Value" -> 1.*^-6], 
               "OptimizationMethod" -> Association["Value" -> Automatic], 
               MaxIterations -> Association["Value" -> 30]]] -> 
           Association["Experiments" -> {
               Association[
               "MeanCrossEntropy" -> 
                Around[2.753244474833552, 0.3150714132690062], "Accuracy" -> 
                Around[0.7316078721117997, 0.0219770998982727], 
                "EvaluationTime" -> 5.660722890537325*^-6, "TestSize" -> 800, 
                "ModelMemory" -> 9088, "ModelUtility" -> -1.7285580429669274`,
                 "TrainingSize" -> 10, "TrainingTime" -> 0.03162277660168379, 
                "TrainingMemory" -> 78480, "ExperimentCount" -> 1, 
                "MeanCrossEntropyHistory" -> {
                  Around[2.753244474833552, 0.22278913288054342`]}, 
                "AccuracyHistory" -> {
                  Around[0.7316078721117997, 0.015540156368882807`]}], 
               Association[
               "MeanCrossEntropy" -> 
                Around[0.4416324814821411, 0.041809645089712445`], "Accuracy" -> 
                Around[0.7965890475831131, 0.03162835462683427], 
                "EvaluationTime" -> 7.669844044494264*^-6, "TestSize" -> 320, 
                "ModelMemory" -> 9088, "ModelUtility" -> 0.1053713948163848, 
                "TrainingSize" -> 1280, "TrainingTime" -> 0.03162277660168379,
                 "TrainingMemory" -> 436744, "ExperimentCount" -> 1, 
                "MeanCrossEntropyHistory" -> {
                  Around[0.4416324814821411, 0.029563883561938505`]}, 
                "AccuracyHistory" -> {
                  Around[0.7965890475831131, 0.022364624034407424`]}]}, 
             "PredictedPerformances" -> 
             Association[
              "EvaluationTime" -> 7.669844044494264*^-6, "MeanCrossEntropy" -> 
               Around[0.4416324814821411, 0.041809645089712445`], 
               "ModelMemory" -> 9088, "TrainingMemory" -> 436744, 
               "TrainingTime" -> 0.07115124735378853], "Index" -> 8], 
           Association[
            "Value" -> "LogisticRegression", "Options" -> 
             Association[
              "L1Regularization" -> Association["Value" -> 0], 
               "L2Regularization" -> Association["Value" -> 0.001], 
               "OptimizationMethod" -> Association["Value" -> Automatic], 
               MaxIterations -> Association["Value" -> 30]]] -> 
           Association["Experiments" -> {
               Association[
               "MeanCrossEntropy" -> 
                Around[0.4464994842593304, 0.03410309555819177], "Accuracy" -> 
                Around[0.8028827308519104, 0.02115789854014699], 
                "EvaluationTime" -> 6.5429604308649135`*^-6, "TestSize" -> 
                700, "ModelMemory" -> 9088, "ModelUtility" -> 
                0.09800805162394166, "TrainingSize" -> 250, "TrainingTime" -> 
                0.025118864315095794`, "TrainingMemory" -> 108264, 
                "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                  Around[0.4464994842593304, 0.024114530128650228`]}, 
                "AccuracyHistory" -> {
                  Around[0.8028827308519104, 0.01496089353339489]}], 
               Association[
               "MeanCrossEntropy" -> 
                Around[0.4416325247281478, 0.04180945648448458], "Accuracy" -> 
                Around[0.7965890475831131, 0.03162835462683427], 
                "EvaluationTime" -> 7.991969241599812*^-6, "TestSize" -> 320, 
                "ModelMemory" -> 9088, "ModelUtility" -> 0.10537138221641584`,
                 "TrainingSize" -> 1280, "TrainingTime" -> 
                0.03162277660168379, "TrainingMemory" -> 436568, 
                "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                  Around[0.4416325247281478, 0.029563750197902916`]}, 
                "AccuracyHistory" -> {
                  Around[0.7965890475831131, 0.022364624034407424`]}]}, 
             "PredictedPerformances" -> 
             Association[
              "EvaluationTime" -> 7.991969241599812*^-6, "MeanCrossEntropy" -> 
               Around[0.4416325247281478, 0.04180945648448458], "ModelMemory" -> 
               9088, "TrainingMemory" -> 436568, "TrainingTime" -> 
               0.06464733506720054], "Index" -> 9], 
           Association[
            "Value" -> "LogisticRegression", "Options" -> 
             Association[
              "L1Regularization" -> Association["Value" -> 0], 
               "L2Regularization" -> Association["Value" -> 100.], 
               "OptimizationMethod" -> Association["Value" -> Automatic], 
               MaxIterations -> Association["Value" -> 30]]] -> 
           Association["Experiments" -> {
               Association[
               "MeanCrossEntropy" -> 
                Around[0.6544449418862451, 0.003808444227922736], "Accuracy" -> 
                Around[0.7949620862916116, 0.02006508152169863], 
                "EvaluationTime" -> 5.336297613405022*^-6, "TestSize" -> 800, 
                "ModelMemory" -> 9088, "ModelUtility" -> -0.2703440939259979, 
                "TrainingSize" -> 10, "TrainingTime" -> 0.012589254117941668`,
                 "TrainingMemory" -> 72368, "ExperimentCount" -> 1, 
                "MeanCrossEntropyHistory" -> {
                  Around[0.6544449418862451, 0.002692976739334932]}, 
                "AccuracyHistory" -> {
                  Around[0.7949620862916116, 0.01418815520905399]}], 
               Association[
               "MeanCrossEntropy" -> 
                Around[0.5902043844046205, 0.008895688849121194], "Accuracy" -> 
                Around[0.7917347830362221, 0.023359150842552245`], 
                "EvaluationTime" -> 5.01187233627272*^-6, "TestSize" -> 600, 
                "ModelMemory" -> 9088, 
                "ModelUtility" -> -0.16887224128118483`, "TrainingSize" -> 50,
                 "TrainingTime" -> 0.012589254117941668`, "TrainingMemory" -> 
                77800, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                  Around[0.5902043844046205, 0.006290201908539151]}, 
                "AccuracyHistory" -> {
                  Around[0.7917347830362221, 0.016517413963528148`]}], 
               Association[
               "MeanCrossEntropy" -> 
                Around[0.5009773643864935, 0.018189636640248325`], "Accuracy" -> 
                Around[0.7920722656606137, 0.025539140446203357`], 
                "EvaluationTime" -> 6.3095734448019305`*^-6, "TestSize" -> 
                500, "ModelMemory" -> 9088, 
                "ModelUtility" -> -0.009189782621351061, "TrainingSize" -> 
                250, "TrainingTime" -> 0.01995262314968879, "TrainingMemory" -> 
                108200, "ExperimentCount" -> 1, 
                "MeanCrossEntropyHistory" -> {
                  Around[0.5009773643864935, 0.012862015415638878`]}, 
                "AccuracyHistory" -> {
                  Around[0.7920722656606137, 0.018058899395186023`]}], 
               Association[
               "MeanCrossEntropy" -> 
                Around[0.4646647992776516, 0.01896334686525916], "Accuracy" -> 
                Around[0.7963849454209617, 0.016391258966104237`], 
                "EvaluationTime" -> 7.4996660338233375`*^-6, "TestSize" -> 
                640, "ModelMemory" -> 9088., "ModelUtility" -> 
                0.06516124096752762, "TrainingSize" -> 1280, "TrainingTime" -> 
                0.027286835077291793`, "TrainingMemory" -> 436914.6666666666, 
                "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                  Around[0.45677628638657625`, 0.022669792147140842`], 
                  Around[0.47255331216872687`, 0.026566520862039717`]}, 
                "AccuracyHistory" -> {
                  Around[0.8006700626743283, 0.02217840110840406], 
                  Around[0.7920998281675952, 0.02257607932539765]}]}, 
             "PredictedPerformances" -> 
             Association[
              "EvaluationTime" -> 7.4996660338233375`*^-6, "MeanCrossEntropy" -> 
               Around[0.4646647992776516, 0.01896334686525916], "ModelMemory" -> 
               9088., "TrainingMemory" -> 436914.6666666666, "TrainingTime" -> 
               0.046697797964556406`], "Index" -> 10]], 
          TypeSystem`Assoc[
           TypeSystem`Struct[{"Value", "Options"}, {
             TypeSystem`Atom[
              TypeSystem`Enumeration["LogisticRegression"]], 
             TypeSystem`Assoc[TypeSystem`AnyType, 
              TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 4]}], 
           
           TypeSystem`Struct[{
            "Experiments", "PredictedPerformances", "Index"}, {
             TypeSystem`Vector[
              
              TypeSystem`Struct[{
               "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
                "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime",
                 "TrainingMemory", "ExperimentCount", 
                "MeanCrossEntropyHistory", "AccuracyHistory"}, {
               TypeSystem`AnyType, TypeSystem`AnyType, 
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[Integer], 
                TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
                TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength]}],
               TypeSystem`AnyLength], 
             
             TypeSystem`Struct[{
              "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
               "TrainingMemory", "TrainingTime"}, {
               TypeSystem`Atom[Real], TypeSystem`AnyType, 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Real]}], 
             TypeSystem`Atom[Integer]}], 10], 
          Association[]], "MaxTrainingSize" -> 1600, 
        "PreprocessorEvaluationTime" -> 6.7578125*^-6, "PreprocessorMemory" -> 
        43400, "InputDimension" -> 4, "OutputDimension" -> 1, 
        "BaselineLogProbability" -> -0.6931471805599453, "VariableBudget" -> 
        True, "CheckpointingInfo" -> Association["Checkpointing" -> False], 
        "UserStop" -> False, "NaturalStop" -> True, "AbortStop" -> False, 
        "RoundPartitioning" -> Dataset[{
           Association[
           "TrainingSizes" -> 10, "TimeBudgets" -> 0.1372, "ElapsedTimes" -> 
            0.204095, "ExperimentCounts" -> 6], 
           Association[
           "TrainingSizes" -> 50, "TimeBudgets" -> 0.19600000000000006`, 
            "ElapsedTimes" -> 0.187716, "ExperimentCounts" -> 7], 
           Association[
           "TrainingSizes" -> 250, "TimeBudgets" -> 0.28, "ElapsedTimes" -> 
            0.28921399999999997`, "ExperimentCounts" -> 9], 
           Association[
           "TrainingSizes" -> 1280, "TimeBudgets" -> 0.4, "ElapsedTimes" -> 
            0.39374099999999995`, "ExperimentCounts" -> 11]}, 
          TypeSystem`Vector[
           
           TypeSystem`Struct[{
            "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
             "ExperimentCounts"}, {
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer]}], 4], 
          Association[]]], "AnomalyDetector" -> None, "Log" -> 
      Association["Example" -> MachineLearning`MLDataset[
          Association[
          "f1" -> Association[
            "Type" -> "NumericalVector", "Weight" -> 1, 
             "Values" -> {{1.3611, 0.4158, 1.156, 0.2169}}, "ID" -> 
             101507101494108568]], 
          Association[
          "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 
           0, "RawExample" -> False]], "TrainingTime" -> 1.415268, 
        "MaxTrainingMemory" -> 713976, "DataMemory" -> 231352, 
        "FunctionMemory" -> 221632, "LanguageVersion" -> {12.3, 1}, "Date" -> 
        DateObject[{2021, 7, 21, 6, 44, 22.491177`8.104587166528765}, 
          "Instant", "Gregorian", -4.], "ProcessorCount" -> 8, 
        "ProcessorType" -> "x86-64", "OperatingSystem" -> "MacOSX", 
        "SystemWordLength" -> 64, "Evaluations" -> {}]]],
    Editable->False,
    SelectWithContents->True,
    Selectable->False], ",", 
   InterpretationBox[
    RowBox[{
     TagBox["ClassifierFunction",
      "SummaryHead"], "[", 
     DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
      "Ready"}, 
      TemplateBox[{
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]],
                 ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              GraphicsBox[{{
                 PointSize[0.13], 
                 GrayLevel[0.45], 
                 
                 PointBox[{{0.9821769431797024, -0.440194219686987}, {
                  1.1339776261519132`, 0.8056918676854272}, {
                  0.5279892326667741, 0.6574306661126254}, {
                  0.022147046479890797`, 1.4937877187998898`}}], 
                 GrayLevel[0.7], 
                 
                 PointBox[{{-0.9815166384819979, 
                  0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                 GrayLevel[0.55], 
                 AbsoluteThickness[1.5], 
                 LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
               Axes -> {False, False}, AxesLabel -> {None, None}, 
                AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                  AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                Frame -> {{True, True}, {True, True}}, 
                FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                Directive[
                  Thickness[Tiny], 
                  GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}},
                 GridLines -> {None, None}, 
                LabelStyle -> {FontFamily -> "Arial"}, 
                Method -> {"ScalingFunctions" -> None}, 
                PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
               ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}], Frame -> True, FrameTicks -> None, 
               FrameStyle -> Directive[
                 Opacity[0.5], 
                 Thickness[Tiny], 
                 RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
               GrayLevel[0.94]], 
              GridBox[{{
                 RowBox[{
                   TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    TemplateBox[{"\"NumericalVector\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (length: \"", "4", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    
                    TemplateBox[{",", "\",\"", "0", "1"}, 
                    "RowWithSeparators"], "SummaryItem"]}]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
            AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]],
                 ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              GraphicsBox[{{
                 PointSize[0.13], 
                 GrayLevel[0.45], 
                 
                 PointBox[{{0.9821769431797024, -0.440194219686987}, {
                  1.1339776261519132`, 0.8056918676854272}, {
                  0.5279892326667741, 0.6574306661126254}, {
                  0.022147046479890797`, 1.4937877187998898`}}], 
                 GrayLevel[0.7], 
                 
                 PointBox[{{-0.9815166384819979, 
                  
                  0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                 GrayLevel[0.55], 
                 AbsoluteThickness[1.5], 
                 LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
               Axes -> {False, False}, AxesLabel -> {None, None}, 
                AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                  AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                Frame -> {{True, True}, {True, True}}, 
                FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                Directive[
                  Thickness[Tiny], 
                  GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}},
                 GridLines -> {None, None}, 
                LabelStyle -> {FontFamily -> "Arial"}, 
                Method -> {"ScalingFunctions" -> None}, 
                PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
               ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}], Frame -> True, FrameTicks -> None, 
               FrameStyle -> Directive[
                 Opacity[0.5], 
                 Thickness[Tiny], 
                 RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
               GrayLevel[0.94]], 
              GridBox[{{
                 RowBox[{
                   TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    TemplateBox[{"\"NumericalVector\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (length: \"", "4", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    
                    TemplateBox[{",", "\",\"", "0", "1"}, 
                    "RowWithSeparators"], "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["\"SupportVectorMachine\"", "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                   "\"Number of training examples: \"", 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox["1600", "SummaryItem"]}]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
            AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open$$], ImageSize -> Automatic]},
       "SummaryPanel"],
      DynamicModuleValues:>{}], "]"}],
    ClassifierFunction[
     Association[
     "ExampleNumber" -> 1600, "ClassNumber" -> 2, "Input" -> 
      Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
          Association[
          "Input" -> Association[
            "f1" -> Association["Type" -> "NumericalVector", "Length" -> 4]], 
           "Output" -> 
           Association[
            "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]], 
           "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
             Association["Processors" -> {
                MachineLearning`MLProcessor["List"], 
                MachineLearning`MLProcessor["WrapMLDataset", 
                 Association[
                 "FeatureTypes" -> {"NumericalVector"}, 
                  "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                  "ExampleWeights" -> Automatic, "RawExample" -> 
                  Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                  False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
           "Perfect", "StructurePreserving" -> False, "Missing" -> 
           "Allowed"]], "Processor" -> MachineLearning`MLProcessor["Sequence", 
          Association[
          "Input" -> Association[
            "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]], 
           "Output" -> 
           Association[
            "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]], 
           "Processors" -> {
             MachineLearning`MLProcessor["SynthesizeMissingValues", 
              Association[
              "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
               "StructurePreserving" -> True, "Input" -> 
               Association[
                "f1" -> Association[
                  "Type" -> "NumericalVector", "Weight" -> 1]], 
               "Distribution" -> LearnedDistribution[
                 Association[
                 "ExampleNumber" -> 1600, "Preprocessor" -> 
                  MachineLearning`MLProcessor["ToMLDataset", 
                    Association[
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 4]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Preprocessor" -> MachineLearning`MLProcessor["Identity"],
                     "ScalarFeature" -> True, "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"]], 
                  "Processor" -> MachineLearning`MLProcessor["Identity"], 
                  "PerformanceGoal" -> "DirectTraining", "BatchProcessing" -> 
                  Automatic, "Model" -> 
                  Association[
                   "RotationMatrix" -> {{-0.5376929418717212, \
-0.013188787813755667`, 
                    0.5578525969570258, -0.6320702779008358}, \
{-0.43428652014105895`, 0.8553473542956349, -0.25047686913106315`, 
                    0.13052762141986013`}, {-0.5145376737657744, \
-0.44205181356641765`, -0.7119817672091443, -0.18144734652259914`}, \
{-0.5074766013924279, -0.26980947629411073`, 0.3451721038269844, 
                    0.7419747733452544}}, 
                    "Precisions" -> {0.5539381502759909, 0.9722756307841408, 
                    0.9825287275181901, 1.0699723648232886`}, 
                    "NoisePrecision" -> None, "Processor" -> 
                    MachineLearning`MLProcessor["Center", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {-0.009813500000000001, 
                    0.001553249999999984, -0.007549062500000001, \
-0.02926056250000001}, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Version" -> {12.3, 1}, "ID" -> 2580788735436893886]], 
                    "PostProcessor" -> 
                    MachineLearning`MLProcessor["FirstValues", 
                    Association[
                    "Info" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1], "Key" -> 
                    "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
                    False, "Missing" -> "Allowed"]], "Method" -> 
                    "Multinormal", "Options" -> 
                    Association[
                    "CovarianceType" -> 
                    Association[
                    "Value" -> "Full", "Options" -> Association[]], 
                    "IntrinsicDimension" -> 
                    Association["Value" -> 4, "Options" -> Association[]]]], 
                  "TrainingInformation" -> 
                  Association["Configurations" -> Dataset[
                    Association[
                    Association[
                    "Value" -> "Multinormal", "Options" -> 
                    Association[
                    "CovarianceType" -> Association["Value" -> "Full"], 
                    "IntrinsicDimension" -> 
                    Association["Value" -> "Heuristic"]], "NaiveImputer" -> 
                    MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {-0.00981349999999999, 
                    0.0015532500000000305`, -0.007549062499999906, \
-0.029260562499999986`}, "StandardDeviation" -> {1.1010097346153438`, 
                    1.08293054552309, 1.1070788969057812`, 
                    1.0842377317041376`}, "Method" -> "NaiveSampler", 
                    "VectorLength" -> 4, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector", "Version" -> {12.3, 1}, "ID" -> 
                    4747808072524423015]], "EMIterations" -> 1] -> 
                    Association[]], 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], 
                    Association[]], "BestModelInformation" -> Dataset[
                    Association[
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]], 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], 
                    Association[]]], "NaiveImputer" -> 
                  MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {-0.00981349999999999, 
                    0.0015532500000000305`, -0.007549062499999906, \
-0.029260562499999986`}, 
                    "StandardDeviation" -> {1.1010097346153438`, 
                    1.08293054552309, 1.1070788969057812`, 
                    1.0842377317041376`}, "Method" -> "NaiveSampler", 
                    "VectorLength" -> 4, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector", "Version" -> {12.3, 1}, "ID" -> 
                    4747808072524423015]], "InputDimension" -> 0, 
                  "OutputDimension" -> 4, "Log" -> 
                  Association["Example" -> MachineLearning`MLDataset[
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1, 
                    "Values" -> {{-1.1082, -1.2867, -0.0761, -1.0761}}, "ID" -> 
                    3791095496786132862]], 
                    Association[
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False]], 
                    "TrainingTime" -> 0.061832, "MaxTrainingMemory" -> 369928,
                     "DataMemory" -> 58256, "FunctionMemory" -> 29624, 
                    "LanguageVersion" -> {12.3, 1}, "Date" -> 
                    DateObject[{
                    2021, 7, 21, 6, 44, 22.560608`8.10592578270327}, 
                    "Instant", "Gregorian", -4.], "ProcessorCount" -> 8, 
                    "ProcessorType" -> "x86-64", "OperatingSystem" -> 
                    "MacOSX", "SystemWordLength" -> 64, "Evaluations" -> {}], 
                  "LogPDFDistribution" -> 
                  MachineLearning`TailedQuantileDistribution[
                    Association[
                    "Quantiles" -> {-1.7032033799517083`, \
-1.7032033799517083`, -1.5188293642917632`, -1.5128041038450477`, \
-1.4183822854232833`, -1.353655798322764, -1.3041713487486384`, \
-1.3006513342727772`, -1.295553705414939, -1.139973025649189, \
-1.09935502537274}, "LeftBoundary" -> -1.5188293642917632`, "LeftScale" -> 
                    0.09218700782997258, "LeftTailNorm" -> 0.2]], "Entropy" -> 
                  Around[5.45863174851714, 0.22968047255532748`], 
                  "EntropySampleSize" -> 10]], "Output" -> 
               Association[
                "f1" -> Association[
                  "Type" -> "NumericalVector", "Weight" -> 1]], 
               "EvaluationStrategy" -> "ModeFinding", "Version" -> {12.3, 1}, 
               "ID" -> 895810465636885430]], 
             MachineLearning`MLProcessor["Standardize", 
              Association[
              "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
               "StructurePreserving" -> True, "Input" -> 
               Association[
                "f1" -> Association[
                  "Type" -> "NumericalVector", "Weight" -> 1]], 
               "Mean" -> {-0.00981349999999999, 
                0.0015532500000000305`, -0.007549062499999906, \
-0.029260562499999986`}, 
               "StandardDeviation" -> {1.1010097346153438`, 1.08293054552309, 
                1.1070788969057812`, 1.0842377317041376`}, "Output" -> 
               Association[
                "f1" -> Association[
                  "Type" -> "NumericalVector", "Weight" -> 1]], 
               "Version" -> {12.3, 1}, "ID" -> 497252488789996090]]}, 
           "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
           "Missing" -> "Imputed"]]], "Output" -> 
      Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
          Association[
          "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
           "Output" -> 
           Association[
            "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
           "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
             Association["Processors" -> {
                MachineLearning`MLProcessor["List"], 
                MachineLearning`MLProcessor["WrapMLDataset", 
                 Association[
                 "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                  "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                  Automatic, "RawExample" -> 
                  Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                  False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
           "Perfect", "StructurePreserving" -> False, "Missing" -> 
           "Allowed"]], "Processor" -> MachineLearning`MLProcessor["Sequence", 
          Association[
          "Input" -> Association[
            "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
           "Output" -> 
           Association[
            "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
           "Processors" -> {
             MachineLearning`MLProcessor["ToVector", 
              Association[
              "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
               "StructurePreserving" -> True, "Input" -> 
               Association[
                "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
               "Output" -> 
               Association[
                "f1" -> Association[
                  "Type" -> "NominalVector", "Weight" -> 1]], 
               "Version" -> {12.3, 1}, "ID" -> 7385217781795203165]], 
             MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
              Association[
              "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
               "StructurePreserving" -> True, "Input" -> 
               Association[
                "f1" -> Association[
                  "Type" -> "NominalVector", "Weight" -> 1]], "Index" -> {
                 Association[0 -> 1, 1 -> 2]}, "MissingCode" -> 0, 
               "Version" -> {12.3, 1}, "ID" -> 9072788647140281776, "Output" -> 
               Association[
                "f1" -> Association[
                  "Type" -> "NominalVector", "Weight" -> 1]]]], 
             MachineLearning`MLProcessor["FromVector", 
              Association[
              "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
               "StructurePreserving" -> True, "Input" -> 
               Association[
                "f1" -> Association[
                  "Type" -> "NominalVector", "Weight" -> 1, 
                   "SetSize" -> {2}]], "Output" -> 
               Association[
                "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
               "Version" -> {12.3, 1}, "ID" -> 8667766357427704565]], 
             MachineLearning`MLProcessor["FirstValues", 
              Association[
              "Info" -> Association[
                "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2], "Key" -> 
               "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
               False, "Missing" -> "Allowed"]]}, "Invertibility" -> "Perfect",
            "StructurePreserving" -> False, "Missing" -> "Allowed"]], 
        "ProbabilityPostprocessor" -> Identity, "Name" -> "class", "Marginal" -> 
        Association[0 -> 0.5, 1 -> 0.5]], "LabelSplitter" -> 
      MachineLearning`MLProcessor["FeatureLabelSplit", 
        Association[
        "Processor" -> MachineLearning`MLProcessor["AssociationSplit"], 
         "PreferLabeled" -> True, "KeepLabelsFormat" -> False]], 
      "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
      "Prior" -> Automatic, "Utility" -> 
      SparseArray[
       Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
      "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
      Automatic, "BatchProcessing" -> Automatic, "Model" -> 
      Association[
       "SVMParameters" -> 
        Association[
         "KernelType" -> "RadialBasisFunction", "GammaScalingParameter" -> 
          0.061351437057884595`, "SoftMarginParameter" -> 3, 
          "PolynomialDegree" -> 3, "BiasParameter" -> 1, "MulticlassStrategy" -> 
          Automatic, "Shrinking" -> True, "KernelCacheSize" -> 100], 
        "TrainedModel" -> {
          Association["supportVectors" -> CompressedData["
1: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
3FaNvbKTbgNZzp49l3xgHHJm7jHc2tMO2dHmYVn2/yDykv9ozyEiPrG+TvNG
oQxDewzsWE0K8Ix/tMHzz6n4b/iXiTxxFD7R6iTcMB2EqKpG8cvPpzGOvejM
6h4StKeJpynu3d43zxExjfVmFMzH1M7CCfid+VHDXn8Cw385lwi1FMPjdyqH
8k3GwN1liFj0owH3p4mKbDiPwNkfQtKKxWVYaC4l2SZKQJKNnnLZi3ns2de1
JeVHghj36aPhQISfMlonr4nPY64Gv7/qtmfZeP7UJQaQgCDSfHv0yxC87mE4
f7WnGAer6av+rpVCaIf/rkuOf5DwNjzfKHoCThiRmHu12iB81HwkxakPLgl/
VqjNncPM07XPoz4OwXvri3cp2567v0tg4bgLAS1u7YjiG5mBBTYMvfKajE2X
b72/+r0GJXYQOz6Y9ELhecUDBK5++HrP88Xz2mYA1+g7Xs3hECZZ2iJ+IwK0
qe/0xpX9gvN01xUFLf/gvbyHJoprc5iIQQ3/VMYwNFFdWS/cDscY/PVfPRuH
B11Vp7g/IuynGxk93bIARzLNwzPUBjCU1+VfYHcXfrv5S+2CTCkGS1+w8Qpe
hNuHfzJFMJbBy9Cu/EreJjypJz/VvmcVQhdFWPqukLGqxuJ+yx0KcJCXG8XS
Z/CGb6hx/f5CuNOXodyWNY2ju+fs+MgJyHgSW5WK60FJbcFujjIPLVkbrtF7
CdteIDcbbETGV/2irz6EzkDZYuDLeZpG9JthDm15MgI7uxV3rOoPoi2la18o
eyMoXxzivCFEwbqsjYXHgYvbPG77uX96E0LWHT16svuxIrfxl1v/BqSccT/k
lraEdLTv7kjQd6GX1Gq5b0In3t7PL9ap0YzPyFayrPJzcOKjTVywSw08dTD/
zjywgKeNUgtpuMZBaiXNhydtHsQkQ7zeLUeCsiDxJR3DOL5Luhr7+AoZDFZa
Dg0ItkK18eP5KOUV7D4aw4D9xagizb+r+9AEqrc+vxHjO4jS3wOpowYrkKPT
p2yn8jge78mMtvZcghUdYXY1zQF8y/ZC1GG5GssdA+ZMlsth6qoZRYR7EJ+0
f31uajCARTbvlRboZwEGi09bKg3ALS2lT1JSMZig3jl5ZKkJaljmxuki2iHh
2M/mWYE+/NYoHWS3mAaCt5pCXVl6kIp5kIPTmIKP7rs8YHwxhY+vq4Sq760E
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
r2pN
            "], "supportVectorCoefficients" -> CompressedData["
1:eJxTTMoPSmVkYGDYz8QABRwOMDp+muKElt9v7dHFR+mBoflPa1gb9TM72M+P
NlXfxjTg7hkqtMD2ZxYXsu7iTMe7YgWlavR+Drt0vqfs/mPJz58w/DWr64fh
Hanvw86/o/TQov2iF15QnfCbZukw0HJSXErJ6wFL5//D/Qz0e/+N5rNhShdX
7JsZ8RRRjl7cKfFmotuh0fimEa2bs1ljk+lfaofvAUJ0gdY59iUPmQ6Ez04/
vfn7h/0w8RuGEUuLpH/sJ9YcatMyua/tN8neGTD7yaXfl7mv/6LATLK+HoeQ
SdemXBhy/h2sdE5eie8Fs+cUh2fXntachzbsA+4fYukrSgm7EzsPjaajAaIz
V9rlWiu9g4e/0gpxXl19Jpzqb2/jetIxmXHA3T3c6N8nWZpOH70yaPKB0oSq
o28bSa8XRulRmpr0pZK5u4MeHSWYL1QEjrJl1H2ke/6RcFm1yG7SLqrZCwDS
YOHd
            "], "rho" -> -0.18903600345222377`]}, 
        "ProbabilityCoefficients" -> {{-3.0125622749328613`, 
         0.28724169731140137`}}, "MulticlassStrategy" -> "OneVersusOne", 
        "Processor" -> MachineLearning`MLProcessor["FirstValues", 
          Association[
          "Info" -> Association["Type" -> "NumericalVector", "Weight" -> 1], 
           "Key" -> "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
           False, "Missing" -> "Allowed"]], "Calibrator" -> None, "Method" -> 
        "SupportVectorMachine", "PostProcessor" -> 
        MachineLearning`MLProcessor["Identity"], "Options" -> 
        Association[
         "KernelType" -> 
          Association[
           "Value" -> "RadialBasisFunction", "Options" -> Association[]], 
          "GammaScalingParameter" -> 
          Association[
           "Value" -> 0.061351437057884595`, "Options" -> Association[]], 
          "SoftMarginParameter" -> 
          Association["Value" -> 3, "Options" -> Association[]], 
          "PolynomialDegree" -> 
          Association["Value" -> 3, "Options" -> Association[]], 
          "BiasParameter" -> 
          Association["Value" -> 1, "Options" -> Association[]], 
          "MulticlassStrategy" -> 
          Association["Value" -> "OneVersusOne", "Options" -> Association[]], 
          "Shrinking" -> 
          Association["Value" -> True, "Options" -> Association[]], 
          "KernelCacheSize" -> 
          Association["Value" -> 100, "Options" -> Association[]]]], 
      "TrainingInformation" -> 
      Association[
       "PanelCell" -> None, "TrainingFunction" -> Classify, "EMIterations" -> 
        Missing["KeyAbsent", "EMIterations"], "ProcessorEntropyShift" -> 0, 
        "PreprocessingTime" -> 0.201241`5.75526146023656, "LossName" -> 
        "MeanCrossEntropy", "BestModelInformation" -> Dataset[
          Association[
          "MeanCrossEntropy" -> 
           Around[0.40963634079596256`, 0.029369238426538987`], "Accuracy" -> 
           Around[0.8225829610084902, 0.018841610165408692`], 
           "EvaluationTime" -> 0.000025118864315095795`, "TestSize" -> 800, 
           "ModelMemory" -> 16992, "ModelUtility" -> 0.18509917220291805`, 
           "TrainingSize" -> 50, "TrainingTime" -> 0.07943282347242814, 
           "TrainingMemory" -> 121104, "ExperimentCount" -> 1, 
           "MeanCrossEntropyHistory" -> {
             Around[0.40963634079596256`, 0.020767187649690245`]}, 
           "AccuracyHistory" -> {
             Around[0.8225829610084902, 0.013323030316433873`]}, 
           "Configuration" -> {
            "SupportVectorMachine", "KernelType" -> "RadialBasisFunction", 
             "GammaScalingParameter" -> 0.061351437057884595`, 
             "SoftMarginParameter" -> 3, "PolynomialDegree" -> 3, 
             "BiasParameter" -> 1, "MulticlassStrategy" -> Automatic, 
             "Shrinking" -> True, "KernelCacheSize" -> 100}, 
           "FinalTrainingSize" -> 1600], 
          
          TypeSystem`Struct[{
           "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
            "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
            "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
            "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
           TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Integer], 
            TypeSystem`Atom[Integer], 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Integer], 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Integer], 
            TypeSystem`Atom[Integer], 
            TypeSystem`Vector[TypeSystem`AnyType, 1], 
            TypeSystem`Vector[TypeSystem`AnyType, 1], 
            TypeSystem`Tuple[{
              TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType,
               TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType}], 
            TypeSystem`Atom[Integer]}], 
          Association[]], "Configurations" -> Dataset[
          Association[
          Association[
            "Value" -> "SupportVectorMachine", "Options" -> 
             Association[
              "KernelType" -> Association["Value" -> "RadialBasisFunction"], 
               "GammaScalingParameter" -> 
               Association["Value" -> 0.0576419666744053], 
               "SoftMarginParameter" -> Association["Value" -> 1.], 
               "PolynomialDegree" -> Association["Value" -> 3], 
               "BiasParameter" -> Association["Value" -> 1], 
               "MulticlassStrategy" -> Association["Value" -> Automatic], 
               "Shrinking" -> Association["Value" -> True], "KernelCacheSize" -> 
               Association["Value" -> 100]]] -> 
           Association["Experiments" -> {
               Association[
               "MeanCrossEntropy" -> 
                Around[1.024658596978645, 0.02064326923866096], "Accuracy" -> 
                Around[0.30889793808781285`, 0.023028648946107615`], 
                "EvaluationTime" -> 0.000020598403295364662`, "TestSize" -> 
                800, "ModelMemory" -> 13152, 
                "ModelUtility" -> -0.7215295376396546, "TrainingSize" -> 10, 
                "TrainingTime" -> 0.07943282347242814, "TrainingMemory" -> 
                79928, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                  Around[1.024658596978645, 0.014596995664516823`]}, 
                "AccuracyHistory" -> {
                  Around[0.30889793808781285`, 0.016283713831357134`]}], 
               Association[
               "MeanCrossEntropy" -> 
                Around[0.4478115956421046, 0.02459851155938128], "Accuracy" -> 
                Around[0.8098933116734444, 0.014050999509466266`], 
                "EvaluationTime" -> 0.000015930270117213365`, "TestSize" -> 
                1550, "ModelMemory" -> 18272, "ModelUtility" -> 
                0.09930749090355195, "TrainingSize" -> 50, "TrainingTime" -> 
                0.07943282347242814, "TrainingMemory" -> 123200, 
                "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                  Around[0.4478115956421046, 0.017393774330734177`]}, 
                "AccuracyHistory" -> {
                  Around[0.8098933116734444, 0.009935557035592449]}], 
               Association[
               "MeanCrossEntropy" -> 
                Around[0.4778322289938516, 0.04210026029697969], "Accuracy" -> 
                Around[0.8163630295017271, 0.016348746186601468`], 
                "EvaluationTime" -> 0.000025118864315095795`, "TestSize" -> 
                1100, "ModelMemory" -> 35936, "ModelUtility" -> 
                0.02787816983497937, "TrainingSize" -> 250, "TrainingTime" -> 
                0.07943282347242814, "TrainingMemory" -> 306032, 
                "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                  Around[0.4778322289938516, 0.02976937954571311]}, 
                "AccuracyHistory" -> {
                  Around[0.8163630295017271, 0.011560309292443607`]}], 
               Association[
               "MeanCrossEntropy" -> 
                Around[0.49112970317429133`, 0.07381916179515048], "Accuracy" -> 
                Around[0.8122671607658826, 0.030723736949129703`], 
                "EvaluationTime" -> 0.00002599943011033012, "TestSize" -> 320,
                 "ModelMemory" -> 118248, 
                "ModelUtility" -> -0.011722883671424822`, "TrainingSize" -> 
                1280, "TrainingTime" -> 0.12589254117941673`, 
                "TrainingMemory" -> 4847872, "ExperimentCount" -> 1, 
                "MeanCrossEntropyHistory" -> {
                  Around[0.49112970317429133`, 0.052198029886857816`]}, 
                "AccuracyHistory" -> {
                  Around[0.8122671607658826, 0.0217249627401213]}]}, 
             "PredictedPerformances" -> 
             Association[
              "EvaluationTime" -> 0.00002599943011033012, "MeanCrossEntropy" -> 
               Around[0.49112970317429133`, 0.07381916179515048], 
               "ModelMemory" -> 118248, "TrainingMemory" -> 4847872, 
               "TrainingTime" -> 0.23679849994669905`], "Index" -> 1], 
           Association[
            "Value" -> "SupportVectorMachine", "Options" -> 
             Association[
              "KernelType" -> Association["Value" -> "RadialBasisFunction"], 
               "GammaScalingParameter" -> 
               Association["Value" -> 0.19885407505959596`], 
               "SoftMarginParameter" -> Association["Value" -> 3], 
               "PolynomialDegree" -> Association["Value" -> 3], 
               "BiasParameter" -> Association["Value" -> 1], 
               "MulticlassStrategy" -> Association["Value" -> Automatic], 
               "Shrinking" -> Association["Value" -> True], "KernelCacheSize" -> 
               Association["Value" -> 100]]] -> 
           Association["Experiments" -> {
               Association[
               "MeanCrossEntropy" -> 
                Around[0.5869948222909481, 0.03908100768347315], "Accuracy" -> 
                Around[0.7565896978876181, 0.019082982012671376`], 
                "EvaluationTime" -> 0.000020985871382770187`, "TestSize" -> 
                1000, "ModelMemory" -> 12768, 
                "ModelUtility" -> -0.17363731380622915`, "TrainingSize" -> 10,
                 "TrainingTime" -> 0.07943282347242814, "TrainingMemory" -> 
                110008, "ExperimentCount" -> 1, 
                "MeanCrossEntropyHistory" -> {
                  Around[0.5869948222909481, 0.02763444554858743]}, 
                "AccuracyHistory" -> {
                  Around[0.7565896978876181, 0.013493705986420839`]}], 
               Association[
               "MeanCrossEntropy" -> 
                Around[0.5095630189293914, 0.027517429797907656`], "Accuracy" -> 
                Around[0.7651981577272865, 0.019821359769945247`], 
                "EvaluationTime" -> 0.00002454483751893946, "TestSize" -> 900,
                 "ModelMemory" -> 16992, 
                "ModelUtility" -> -0.02968972024748162, "TrainingSize" -> 50, 
                "TrainingTime" -> 0.07943282347242814, "TrainingMemory" -> 
                121144, "ExperimentCount" -> 1, 
                "MeanCrossEntropyHistory" -> {
                  Around[0.5095630189293914, 0.01945776121092527]}, 
                "AccuracyHistory" -> {
                  Around[0.7651981577272865, 0.014015817905666509`]}], 
               Association[
               "MeanCrossEntropy" -> 
                Around[0.5195338284179709, 0.04229399030567814], "Accuracy" -> 
                Around[0.8104803334193119, 0.01655200788747189], 
                "EvaluationTime" -> 0.000025118864315095795`, "TestSize" -> 
                1100, "ModelMemory" -> 35936, 
                "ModelUtility" -> -0.05447656273834833, "TrainingSize" -> 250,
                 "TrainingTime" -> 0.07943282347242814, "TrainingMemory" -> 
                299704, "ExperimentCount" -> 1, 
                "MeanCrossEntropyHistory" -> {
                  Around[0.5195338284179709, 0.029906367348583113`]}, 
                "AccuracyHistory" -> {
                  Around[0.8104803334193119, 0.011704037019484595`]}], 
               Association[
               "MeanCrossEntropy" -> 
                Around[0.5381852763250499, 0.08299880738689117], "Accuracy" -> 
                Around[0.8158760972307759, 0.030482165506694657`], 
                "EvaluationTime" -> 0.000029646353064078557`, "TestSize" -> 
                320, "ModelMemory" -> 117576, 
                "ModelUtility" -> -0.10397734413954396`, "TrainingSize" -> 
                1280, "TrainingTime" -> 0.12589254117941673`, 
                "TrainingMemory" -> 4754440, "ExperimentCount" -> 1, 
                "MeanCrossEntropyHistory" -> {
                  Around[0.5381852763250499, 0.05868901953366685]}, 
                "AccuracyHistory" -> {
                  Around[0.8158760972307759, 0.021554145935034463`]}]}, 
             "PredictedPerformances" -> 
             Association[
              "EvaluationTime" -> 0.000029646353064078557`, 
               "MeanCrossEntropy" -> 
               Around[0.5381852763250499, 0.08299880738689117], "ModelMemory" -> 
               117576, "TrainingMemory" -> 4754440, "TrainingTime" -> 
               0.23679849994669905`], "Index" -> 2], 
           Association[
            "Value" -> "SupportVectorMachine", "Options" -> 
             Association[
              "KernelType" -> Association["Value" -> "RadialBasisFunction"], 
               "GammaScalingParameter" -> 
               Association["Value" -> 0.2766535902762023], 
               "SoftMarginParameter" -> Association["Value" -> 0.4], 
               "PolynomialDegree" -> Association["Value" -> 3], 
               "BiasParameter" -> Association["Value" -> 1], 
               "MulticlassStrategy" -> Association["Value" -> Automatic], 
               "Shrinking" -> Association["Value" -> True], "KernelCacheSize" -> 
               Association["Value" -> 100]]] -> 
           Association["Experiments" -> {
               Association[
               "MeanCrossEntropy" -> 
                Around[1.4038541303835352`, 0.026485504909239538`], 
                "Accuracy" -> 
                Around[0.2282968929251345, 0.014830851802520547`], 
                "EvaluationTime" -> 0.00001430235534321026, "TestSize" -> 
                1590, "ModelMemory" -> 13152, 
                "ModelUtility" -> -1.0361364087618603`, "TrainingSize" -> 10, 
                "TrainingTime" -> 0.07943282347242814, "TrainingMemory" -> 
                109448, "ExperimentCount" -> 1, 
                "MeanCrossEntropyHistory" -> {
                  Around[1.4038541303835352`, 0.01872808012447287]}, 
                "AccuracyHistory" -> {
                  Around[0.2282968929251345, 0.01048699588033501]}], 
               Association[
               "MeanCrossEntropy" -> 
                Around[0.49085683092348603`, 0.024427212823289895`], 
                "Accuracy" -> 
                Around[0.8060853169536119, 0.014164687915762838`], 
                "EvaluationTime" -> 0.000016263575998852527`, "TestSize" -> 
                1550, "ModelMemory" -> 18528, "ModelUtility" -> 
                0.00855008958549397, "TrainingSize" -> 50, "TrainingTime" -> 
                0.1, "TrainingMemory" -> 124312, "ExperimentCount" -> 1, 
                "MeanCrossEntropyHistory" -> {
                  Around[0.49085683092348603`, 0.017272647832835275`]}, 
                "AccuracyHistory" -> {
                  Around[0.8060853169536119, 0.010015946878627046`]}], 
               Association[
               "MeanCrossEntropy" -> 
                Around[0.5277315918018091, 0.04678347944997499], "Accuracy" -> 
                Around[0.820003128545365, 0.01623425323588741], 
                "EvaluationTime" -> 0.000025118864315095795`, "TestSize" -> 
                1100, "ModelMemory" -> 39008, 
                "ModelUtility" -> -0.07155682364293081, "TrainingSize" -> 250,
                 "TrainingTime" -> 0.07943282347242814, "TrainingMemory" -> 
                350640, "ExperimentCount" -> 1, 
                "MeanCrossEntropyHistory" -> {
                  Around[0.5277315918018091, 0.03308091556657881]}, 
                "AccuracyHistory" -> {
                  Around[0.820003128545365, 0.01147935055059564]}], 
               Association[
               "MeanCrossEntropy" -> 
                Around[0.5529228982563528, 0.0869073679559799], "Accuracy" -> 
                Around[0.8091737936917152, 0.030916933620253242`], 
                "EvaluationTime" -> 0.00002599943011033012, "TestSize" -> 320,
                 "ModelMemory" -> 122960, 
                "ModelUtility" -> -0.1315669817500188, "TrainingSize" -> 1280,
                 "TrainingTime" -> 0.12589254117941673`, "TrainingMemory" -> 
                5236376, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                  Around[0.5529228982563528, 0.06145278921674785]}, 
                "AccuracyHistory" -> {
                  Around[0.8091737936917152, 0.021861573416375422`]}]}, 
             "PredictedPerformances" -> 
             Association[
              "EvaluationTime" -> 0.00002599943011033012, "MeanCrossEntropy" -> 
               Around[0.5529228982563528, 0.0869073679559799], "ModelMemory" -> 
               122960, "TrainingMemory" -> 5236376, "TrainingTime" -> 
               0.23679849994669905`], "Index" -> 3], 
           Association[
            "Value" -> "SupportVectorMachine", "Options" -> 
             Association[
              "KernelType" -> Association["Value" -> "RadialBasisFunction"], 
               "GammaScalingParameter" -> 
               Association["Value" -> 0.061351437057884595`], 
               "SoftMarginParameter" -> Association["Value" -> 3], 
               "PolynomialDegree" -> Association["Value" -> 3], 
               "BiasParameter" -> Association["Value" -> 1], 
               "MulticlassStrategy" -> Association["Value" -> Automatic], 
               "Shrinking" -> Association["Value" -> True], "KernelCacheSize" -> 
               Association["Value" -> 100]]] -> 
           Association["Experiments" -> {
               Association[
               "MeanCrossEntropy" -> 
                Around[0.5146242189145777, 0.026004129230443217`], "Accuracy" -> 
                Around[0.7595857104487926, 0.019003407124501225`], 
                "EvaluationTime" -> 0.00002253574373239229, "TestSize" -> 
                1000, "ModelMemory" -> 12768, 
                "ModelUtility" -> -0.03888586984996312, "TrainingSize" -> 10, 
                "TrainingTime" -> 0.07943282347242814, "TrainingMemory" -> 
                108808, "ExperimentCount" -> 1, 
                "MeanCrossEntropyHistory" -> {
                  Around[0.5146242189145777, 0.018387696117697715`]}, 
                "AccuracyHistory" -> {
                  Around[0.7595857104487926, 0.013437438043383565`]}], 
               Association[
               "MeanCrossEntropy" -> 
                Around[0.40963634079596256`, 0.029369238426538987`], 
                "Accuracy" -> 
                Around[0.8225829610084902, 0.018841610165408692`], 
                "EvaluationTime" -> 0.000025118864315095795`, "TestSize" -> 
                800, "ModelMemory" -> 16992, "ModelUtility" -> 
                0.18509917220291805`, "TrainingSize" -> 50, "TrainingTime" -> 
                0.07943282347242814, "TrainingMemory" -> 121104, 
                "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                  Around[0.40963634079596256`, 0.020767187649690245`]}, 
                "AccuracyHistory" -> {
                  Around[0.8225829610084902, 0.013323030316433873`]}], 
               Association[
               "MeanCrossEntropy" -> 
                Around[0.44919683032285807`, 0.043322398827395435`], 
                "Accuracy" -> 
                Around[0.8220174214422667, 0.018907942365735297`], 
                "EvaluationTime" -> 0.000025118864315095795`, "TestSize" -> 
                800, "ModelMemory" -> 34912, "ModelUtility" -> 
                0.0880394638160017, "TrainingSize" -> 250, "TrainingTime" -> 
                0.07943282347242814, "TrainingMemory" -> 275312, 
                "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                  Around[0.44919683032285807`, 0.030633561988119444`]}, 
                "AccuracyHistory" -> {
                  Around[0.8220174214422667, 0.01336993426509584]}], 
               Association[
               "MeanCrossEntropy" -> 
                Around[0.40376668538469834`, 0.06102162940216417], "Accuracy" -> 
                Around[0.8402925305030446, 0.028220411438943604`], 
                "EvaluationTime" -> 0.000037495998162546, "TestSize" -> 320, 
                "ModelMemory" -> 115216, "ModelUtility" -> 
                0.18398786276552748`, "TrainingSize" -> 1280, "TrainingTime" -> 
                0.12589254117941673`, "TrainingMemory" -> 4599160, 
                "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                  Around[0.40376668538469834`, 0.043148807949322694`]}, 
                "AccuracyHistory" -> {
                  Around[0.8402925305030446, 0.019954844296351436`]}]}, 
             "PredictedPerformances" -> 
             Association[
              "EvaluationTime" -> 0.000037495998162546, "MeanCrossEntropy" -> 
               Around[0.40376668538469834`, 0.06102162940216417], 
               "ModelMemory" -> 115216, "TrainingMemory" -> 4599160, 
               "TrainingTime" -> 0.23679849994669905`], "Index" -> 4], 
           Association[
            "Value" -> "SupportVectorMachine", "Options" -> 
             Association[
              "KernelType" -> Association["Value" -> "RadialBasisFunction"], 
               "GammaScalingParameter" -> 
               Association["Value" -> 0.10988858176642724`], 
               "SoftMarginParameter" -> Association["Value" -> 0.4], 
               "PolynomialDegree" -> Association["Value" -> 3], 
               "BiasParameter" -> Association["Value" -> 1], 
               "MulticlassStrategy" -> Association["Value" -> Automatic], 
               "Shrinking" -> Association["Value" -> True], "KernelCacheSize" -> 
               Association["Value" -> 100]]] -> 
           Association["Experiments" -> {
               Association[
               "MeanCrossEntropy" -> 
                Around[1.606026797821966, 0.04304278902083176], "Accuracy" -> 
                Around[0.2634518348647428, 0.019610130688752888`], 
                "EvaluationTime" -> 0.000020985871382770187`, "TestSize" -> 
                1000, "ModelMemory" -> 13152, 
                "ModelUtility" -> -1.1722580010698764`, "TrainingSize" -> 10, 
                "TrainingTime" -> 0.07943282347242814, "TrainingMemory" -> 
                109960, "ExperimentCount" -> 1, 
                "MeanCrossEntropyHistory" -> {
                  Around[1.606026797821966, 0.030435847997812012`]}, 
                "AccuracyHistory" -> {
                  Around[0.2634518348647428, 0.013866456389971587`]}]}, 
             "PredictedPerformances" -> 
             Association[
              "EvaluationTime" -> 0.000020985871382770187`, 
               "MeanCrossEntropy" -> 
               Around[1.606026797821966, 0.04304278902083176], "ModelMemory" -> 
               13152, "TrainingMemory" -> 109960, "TrainingTime" -> 
               1.3503579990312784`], "Index" -> 5], 
           Association[
            "Value" -> "SupportVectorMachine", "Options" -> 
             Association[
              "KernelType" -> Association["Value" -> "RadialBasisFunction"], 
               "GammaScalingParameter" -> 
               Association["Value" -> 0.28729078183696777`], 
               "SoftMarginParameter" -> Association["Value" -> 0.1], 
               "PolynomialDegree" -> Association["Value" -> 3], 
               "BiasParameter" -> Association["Value" -> 1], 
               "MulticlassStrategy" -> Association["Value" -> Automatic], 
               "Shrinking" -> Association["Value" -> True], "KernelCacheSize" -> 
               Association["Value" -> 100]]] -> 
           Association["Experiments" -> {
               Association[
               "MeanCrossEntropy" -> 
                Around[0.8308176886190044, 0.007145745963985013], "Accuracy" -> 
                Around[0.22224635352378214`, 0.018501412858005405`], 
                "EvaluationTime" -> 0.000020985871382770187`, "TestSize" -> 
                1000, "ModelMemory" -> 13152, 
                "ModelUtility" -> -0.5095226537792673, "TrainingSize" -> 10, 
                "TrainingTime" -> 0.07943282347242814, "TrainingMemory" -> 
                109952, "ExperimentCount" -> 1, 
                "MeanCrossEntropyHistory" -> {
                  Around[0.8308176886190044, 0.005052805427770205]}, 
                "AccuracyHistory" -> {
                  Around[0.22224635352378214`, 0.013082474493427605`]}], 
               Association[
               "MeanCrossEntropy" -> 
                Around[0.45648678243971696`, 0.02687146823603476], "Accuracy" -> 
                Around[0.820561105879197, 0.017810622523562344`], 
                "EvaluationTime" -> 0.000025118864315095795`, "TestSize" -> 
                900, "ModelMemory" -> 21088, "ModelUtility" -> 
                0.07934204325084371, "TrainingSize" -> 50, "TrainingTime" -> 
                0.07943282347242814, "TrainingMemory" -> 123832, 
                "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                  Around[0.45648678243971696`, 0.01900099741013909]}, 
                "AccuracyHistory" -> {
                  Around[0.820561105879197, 0.012594011963564793`]}], 
               Association[
               "MeanCrossEntropy" -> 
                Around[0.5286309363715046, 0.05442962716884155], "Accuracy" -> 
                Around[0.8278854329807372, 0.01760200638670766], 
                "EvaluationTime" -> 0.000025118864315095795`, "TestSize" -> 
                900, "ModelMemory" -> 49248, 
                "ModelUtility" -> -0.07606867027593556, "TrainingSize" -> 250,
                 "TrainingTime" -> 0.07943282347242814, "TrainingMemory" -> 
                430288, "ExperimentCount" -> 1, 
                "MeanCrossEntropyHistory" -> {
                  Around[0.5286309363715046, 0.038487558468543404`]}, 
                "AccuracyHistory" -> {
                  Around[0.8278854329807372, 0.012446498078529903`]}], 
               Association[
               "MeanCrossEntropy" -> 
                Around[0.5696313216696944, 0.09369659910977975], "Accuracy" -> 
                Around[0.8106355153102272, 0.030771960152040284`], 
                "EvaluationTime" -> 0.0000301726118662904, "TestSize" -> 320, 
                "ModelMemory" -> 139864, 
                "ModelUtility" -> -0.1627543658769347, "TrainingSize" -> 1280,
                 "TrainingTime" -> 0.12589254117941673`, "TrainingMemory" -> 
                6355744, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                  Around[0.5696313216696944, 0.06625350060464269]}, 
                "AccuracyHistory" -> {
                  Around[0.8106355153102272, 0.02175906169390991]}]}, 
             "PredictedPerformances" -> 
             Association[
              "EvaluationTime" -> 0.0000301726118662904, "MeanCrossEntropy" -> 
               Around[0.5696313216696944, 0.09369659910977975], "ModelMemory" -> 
               139864, "TrainingMemory" -> 6355744, "TrainingTime" -> 
               0.23679849994669905`], "Index" -> 6], 
           Association[
            "Value" -> "SupportVectorMachine", "Options" -> 
             Association[
              "KernelType" -> Association["Value" -> "RadialBasisFunction"], 
               "GammaScalingParameter" -> 
               Association["Value" -> 0.08922647797601652], 
               "SoftMarginParameter" -> Association["Value" -> 1.], 
               "PolynomialDegree" -> Association["Value" -> 3], 
               "BiasParameter" -> Association["Value" -> 1], 
               "MulticlassStrategy" -> Association["Value" -> Automatic], 
               "Shrinking" -> Association["Value" -> True], "KernelCacheSize" -> 
               Association["Value" -> 100]]] -> 
           Association[
            "Experiments" -> {}, "PredictedPerformances" -> 
             Association[
              "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
               1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 7], 
           Association[
            "Value" -> "SupportVectorMachine", "Options" -> 
             Association[
              "KernelType" -> Association["Value" -> "RadialBasisFunction"], 
               "GammaScalingParameter" -> 
               Association["Value" -> 0.30141529053840677`], 
               "SoftMarginParameter" -> Association["Value" -> 3], 
               "PolynomialDegree" -> Association["Value" -> 3], 
               "BiasParameter" -> Association["Value" -> 1], 
               "MulticlassStrategy" -> Association["Value" -> Automatic], 
               "Shrinking" -> Association["Value" -> True], "KernelCacheSize" -> 
               Association["Value" -> 100]]] -> 
           Association["Experiments" -> {
               Association[
               "MeanCrossEntropy" -> 
                Around[0.5874427931797691, 0.029666664806107735`], "Accuracy" -> 
                Around[0.7532507272465435, 0.015221919134389155`], 
                "EvaluationTime" -> 0.00001430235534321026, "TestSize" -> 
                1590, "ModelMemory" -> 13024, 
                "ModelUtility" -> -0.17122204121465667`, "TrainingSize" -> 10,
                 "TrainingTime" -> 0.07943282347242814, "TrainingMemory" -> 
                109784, "ExperimentCount" -> 1, 
                "MeanCrossEntropyHistory" -> {
                  Around[0.5874427931797691, 0.020977499859587072`]}, 
                "AccuracyHistory" -> {
                  Around[0.7532507272465435, 0.010763522242599832`]}], 
               Association[
               "MeanCrossEntropy" -> 
                Around[0.5533875524719509, 0.02576021264792702], "Accuracy" -> 
                Around[0.7353170036779922, 0.020620404762985288`], 
                "EvaluationTime" -> 0.000025118864315095795`, "TestSize" -> 
                900, "ModelMemory" -> 18016, 
                "ModelUtility" -> -0.11071923384485283`, "TrainingSize" -> 50,
                 "TrainingTime" -> 0.07943282347242814, "TrainingMemory" -> 
                124384, "ExperimentCount" -> 1, 
                "MeanCrossEntropyHistory" -> {
                  Around[0.5533875524719509, 0.018215221048156663`]}, 
                "AccuracyHistory" -> {
                  Around[0.7353170036779922, 0.014580828038718279`]}], 
               Association[
               "MeanCrossEntropy" -> 
                Around[0.5704747426913186, 0.09020792055942219], "Accuracy" -> 
                Around[0.8070113116882104, 0.031027506895290984`], 
                "EvaluationTime" -> 0.00002396695752077137, "TestSize" -> 320,
                 "ModelMemory" -> 119928, 
                "ModelUtility" -> -0.16300135686486938`, "TrainingSize" -> 
                1280, "TrainingTime" -> 0.12589254117941673`, 
                "TrainingMemory" -> 5112096, "ExperimentCount" -> 1, 
                "MeanCrossEntropyHistory" -> {
                  Around[0.5704747426913186, 0.0637866323443048]}, 
                "AccuracyHistory" -> {
                  Around[0.8070113116882104, 0.021939760528972615`]}]}, 
             "PredictedPerformances" -> 
             Association[
              "EvaluationTime" -> 0.00002396695752077137, "MeanCrossEntropy" -> 
               Around[0.5704747426913186, 0.09020792055942219], "ModelMemory" -> 
               119928, "TrainingMemory" -> 5112096, "TrainingTime" -> 
               0.23679849994669905`], "Index" -> 8], 
           Association[
            "Value" -> "SupportVectorMachine", "Options" -> 
             Association[
              "KernelType" -> Association["Value" -> "RadialBasisFunction"], 
               "GammaScalingParameter" -> 
               Association["Value" -> 0.115423896204778], 
               "SoftMarginParameter" -> Association["Value" -> 1.], 
               "PolynomialDegree" -> Association["Value" -> 3], 
               "BiasParameter" -> Association["Value" -> 1], 
               "MulticlassStrategy" -> Association["Value" -> Automatic], 
               "Shrinking" -> Association["Value" -> True], "KernelCacheSize" -> 
               Association["Value" -> 100]]] -> 
           Association["Experiments" -> {
               Association[
               "MeanCrossEntropy" -> 
                Around[0.5493296493179995, 0.016636386078943233`], "Accuracy" -> 
                Around[0.7319645764749834, 0.015642395372130035`], 
                "EvaluationTime" -> 0.000015036327258430072`, "TestSize" -> 
                1590, "ModelMemory" -> 13152, 
                "ModelUtility" -> -0.10013099393553382`, "TrainingSize" -> 10,
                 "TrainingTime" -> 0.07943282347242814, "TrainingMemory" -> 
                110200, "ExperimentCount" -> 1, 
                "MeanCrossEntropyHistory" -> {
                  Around[0.5493296493179995, 0.011763701410858238`]}, 
                "AccuracyHistory" -> {
                  Around[0.7319645764749834, 0.011060843841634214`]}], 
               Association[
               "MeanCrossEntropy" -> 
                Around[0.425109424902502, 0.028787760371033914`], "Accuracy" -> 
                Around[0.8256747939370346, 0.017655806196376553`], 
                "EvaluationTime" -> 0.000025118864315095795`, "TestSize" -> 
                900, "ModelMemory" -> 17248, "ModelUtility" -> 
                0.14880689540097147`, "TrainingSize" -> 50, "TrainingTime" -> 
                0.07943282347242814, "TrainingMemory" -> 121752, 
                "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                  Around[0.425109424902502, 0.02035602057353144]}, 
                "AccuracyHistory" -> {
                  Around[0.8256747939370346, 0.012484540288773325`]}], 
               Association[
               "MeanCrossEntropy" -> 
                Around[0.4577319064628596, 0.04324080170451065], "Accuracy" -> 
                Around[0.8294501286695424, 0.017542642697151032`], 
                "EvaluationTime" -> 0.000025118864315095795`, "TestSize" -> 
                900, "ModelMemory" -> 35936, "ModelUtility" -> 
                0.06960486015962863, "TrainingSize" -> 250, "TrainingTime" -> 
                0.07943282347242814, "TrainingMemory" -> 299696, 
                "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                  Around[0.4577319064628596, 0.030575864109202298`]}, 
                "AccuracyHistory" -> {
                  Around[0.8294501286695424, 0.012404521611088161`]}], 
               Association[
               "MeanCrossEntropy" -> 
                Around[0.5066418550943161, 0.07619480744907586], "Accuracy" -> 
                Around[0.8072104794164352, 0.03099196199357089], 
                "EvaluationTime" -> 0.0000301726118662904, "TestSize" -> 320, 
                "ModelMemory" -> 117240, 
                "ModelUtility" -> -0.04283585653630961, "TrainingSize" -> 
                1280, "TrainingTime" -> 0.12589254117941673`, 
                "TrainingMemory" -> 4738840, "ExperimentCount" -> 1, 
                "MeanCrossEntropyHistory" -> {
                  Around[0.5066418550943161, 0.05387786503844481]}, 
                "AccuracyHistory" -> {
                  Around[0.8072104794164352, 0.021914626487929727`]}]}, 
             "PredictedPerformances" -> 
             Association[
              "EvaluationTime" -> 0.0000301726118662904, "MeanCrossEntropy" -> 
               Around[0.5066418550943161, 0.07619480744907586], "ModelMemory" -> 
               117240, "TrainingMemory" -> 4738840, "TrainingTime" -> 
               0.23679849994669905`], "Index" -> 9], 
           Association[
            "Value" -> "SupportVectorMachine", "Options" -> 
             Association[
              "KernelType" -> Association["Value" -> "RadialBasisFunction"], 
               "GammaScalingParameter" -> 
               Association["Value" -> 0.2141323556039214], 
               "SoftMarginParameter" -> Association["Value" -> 0.1], 
               "PolynomialDegree" -> Association["Value" -> 3], 
               "BiasParameter" -> Association["Value" -> 1], 
               "MulticlassStrategy" -> Association["Value" -> Automatic], 
               "Shrinking" -> Association["Value" -> True], "KernelCacheSize" -> 
               Association["Value" -> 100]]] -> 
           Association[
            "Experiments" -> {}, "PredictedPerformances" -> 
             Association[
              "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
               1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 
             10]], 
          TypeSystem`Assoc[
           TypeSystem`Struct[{"Value", "Options"}, {
             TypeSystem`Atom[
              TypeSystem`Enumeration["SupportVectorMachine"]], 
             
             TypeSystem`Struct[{
              "KernelType", "GammaScalingParameter", "SoftMarginParameter", 
               "PolynomialDegree", "BiasParameter", "MulticlassStrategy", 
               "Shrinking", "KernelCacheSize"}, {
               TypeSystem`Struct[{"Value"}, {
                 TypeSystem`Atom[
                  TypeSystem`Enumeration["RadialBasisFunction"]]}], 
               TypeSystem`Struct[{"Value"}, {
                 TypeSystem`Atom[Real]}], 
               TypeSystem`Struct[{"Value"}, {
                 TypeSystem`Atom[Real]}], 
               TypeSystem`Struct[{"Value"}, {
                 TypeSystem`Atom[Integer]}], 
               TypeSystem`Struct[{"Value"}, {
                 TypeSystem`Atom[Integer]}], 
               TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 
               TypeSystem`Struct[{"Value"}, {
                 TypeSystem`Atom[TypeSystem`Boolean]}], 
               TypeSystem`Struct[{"Value"}, {
                 TypeSystem`Atom[Integer]}]}]}], 
           
           TypeSystem`Struct[{
            "Experiments", "PredictedPerformances", "Index"}, {
             TypeSystem`Vector[
              
              TypeSystem`Struct[{
               "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
                "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime",
                 "TrainingMemory", "ExperimentCount", 
                "MeanCrossEntropyHistory", "AccuracyHistory"}, {
               TypeSystem`AnyType, TypeSystem`AnyType, 
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Integer], 
                TypeSystem`Vector[TypeSystem`AnyType, 1], 
                TypeSystem`Vector[TypeSystem`AnyType, 1]}], 
              TypeSystem`AnyLength], 
             
             TypeSystem`Struct[{
              "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
               "TrainingMemory", "TrainingTime"}, {
               TypeSystem`Atom[Real], TypeSystem`AnyType, 
               TypeSystem`Atom[Integer], 
               TypeSystem`Atom[Integer], 
               TypeSystem`Atom[Real]}], 
             TypeSystem`Atom[Integer]}], 10], 
          Association[]], "MaxTrainingSize" -> 1600, 
        "PreprocessorEvaluationTime" -> 8.453125*^-6, "PreprocessorMemory" -> 
        43400, "InputDimension" -> 4, "OutputDimension" -> 1, 
        "BaselineLogProbability" -> -0.6931471805599453, "VariableBudget" -> 
        True, "CheckpointingInfo" -> Association["Checkpointing" -> False], 
        "UserStop" -> False, "NaturalStop" -> True, "AbortStop" -> False, 
        "RoundPartitioning" -> Dataset[{
           Association[
           "TrainingSizes" -> 10, "TimeBudgets" -> 0.3579065239474949, 
            "ElapsedTimes" -> 0.9167730000000001, "ExperimentCounts" -> 8], 
           Association[
           "TrainingSizes" -> 50, "TimeBudgets" -> 0.5112950342107067, 
            "ElapsedTimes" -> 0.8127949999999999, "ExperimentCounts" -> 7], 
           Association[
           "TrainingSizes" -> 250, "TimeBudgets" -> 0.7304214774438668, 
            "ElapsedTimes" -> 0.723664, "ExperimentCounts" -> 6], 
           Association[
           "TrainingSizes" -> 1280, "TimeBudgets" -> 1.0434592534912381`, 
            "ElapsedTimes" -> 1.007067, "ExperimentCounts" -> 7]}, 
          TypeSystem`Vector[
           TypeSystem`Struct[{
            "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
             "ExperimentCounts"}, {
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer]}], 4], 
          Association[]]], "AnomalyDetector" -> None, "Log" -> 
      Association["Example" -> MachineLearning`MLDataset[
          Association[
          "f1" -> Association[
            "Type" -> "NumericalVector", "Weight" -> 1, 
             "Values" -> {{-1.1082, -1.2867, -0.0761, -1.0761}}, "ID" -> 
             6690500730958885808]], 
          Association[
          "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 
           0, "RawExample" -> False]], "TrainingTime" -> 3.922346, 
        "MaxTrainingMemory" -> 7011184, "DataMemory" -> 231352, 
        "FunctionMemory" -> 364232, "LanguageVersion" -> {12.3, 1}, "Date" -> 
        DateObject[{2021, 7, 21, 6, 44, 26.41524`8.174429542963079}, 
          "Instant", "Gregorian", -4.], "ProcessorCount" -> 8, 
        "ProcessorType" -> "x86-64", "OperatingSystem" -> "MacOSX", 
        "SystemWordLength" -> 64, "Evaluations" -> {}]]],
    Editable->False,
    SelectWithContents->True,
    Selectable->False]}], "}"}]], "Output",
 CellChangeTimes->{
  3.8355319211471977`*^9, 3.835532766404244*^9, 3.8355344665799093`*^9, 
   3.835615920115744*^9, 3.835615985414844*^9, 3.83561727021421*^9, 
   3.835617466557085*^9, 3.835620124286386*^9, 3.835620285416259*^9, 
   3.8356205718633633`*^9, 3.835620732679596*^9, 3.8356209254137907`*^9, 
   3.8356222391582212`*^9, 3.8356237631850557`*^9, 3.835623829951507*^9, 
   3.835624032183255*^9, {3.8356841134726467`*^9, 3.8356841324644423`*^9}, 
   3.835684302493442*^9, 3.835684391273096*^9, 3.835684492507579*^9, 
   3.8356847729257383`*^9, 3.835684902270586*^9, 3.835684964674376*^9, 
   3.83568505663282*^9, 3.835685517118432*^9, 3.835686104098469*^9, 
   3.835851635191372*^9, 3.835851679794566*^9, 3.835851984200872*^9, 
   3.835852119185182*^9, 3.835853066560699*^9},
 CellLabel->"Out[67]=",ExpressionUUID->"e045f543-bdc4-418b-9a95-f9d83bfbbddf"]
}, Open  ]],

Cell["\<\
How good was the purely algebraic evaluation of the binary classifiers?\
\>", "Text",
 CellChangeTimes->{{3.835852413836782*^9, 
  3.835852439787302*^9}},ExpressionUUID->"92440e24-d35c-4985-958d-\
69be3f551f98"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Grid", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "\"\<\!\(\*SubscriptBox[\(P\), \(\[Alpha]\)]\) estimation error\>\"", 
       ",", "\"\<\[Alpha] accuracies RMSE\>\"", ",", 
       "\"\<\[Beta] accuracies RMSE\>\""}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"prevError", ",", "alphaRMSE", ",", "betaRMSE"}], "}"}]}], 
    "}"}], ",", 
   RowBox[{"Dividers", "\[Rule]", "All"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8358522724367847`*^9, 3.8358523668135233`*^9}},
 CellLabel->"In[69]:=",ExpressionUUID->"1bdbe186-2030-425b-ad46-b741ee56f401"],

Cell[BoxData[
 TagBox[GridBox[{
    {"\<\"\\!\\(\\*SubscriptBox[\\(P\\), \\(\[Alpha]\\)]\\) estimation \
error\"\>", "\<\"\[Alpha] accuracies RMSE\"\>", "\<\"\[Beta] accuracies \
RMSE\"\>"},
    {"0.007646347906458906`", "0.006074689871348526`", 
     "0.0075792057411117105`"}
   },
   AutoDelete->False,
   GridBoxDividers->{"Columns" -> {{True}}, "Rows" -> {{True}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Output",
 CellChangeTimes->{3.8358523695595293`*^9, 3.835853079545226*^9},
 CellLabel->"Out[69]=",ExpressionUUID->"176ac97f-cfb4-45ed-8be1-3601bc8ae8ff"]
}, Open  ]],

Cell["\<\
Impressive results, but keep in mind that this is a synthetic dataset so we \
should expect these very clean results. Nonetheless, how well did it estimate \
each performance ground truth statistic?\
\>", "Text",
 CellChangeTimes->{{3.8358524506489487`*^9, 3.835852502117127*^9}, {
  3.8358526031035233`*^9, 
  3.835852612997469*^9}},ExpressionUUID->"104c1bc4-4509-4a33-8210-\
906bcdd3e723"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"The", " ", "prevalence", " ", "error", " ", "estimate"}], " ", 
   "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Grid", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "\"\<\!\(\*SubscriptBox[\(P\), \(\[Alpha]\)]\) ground truth \
value\>\"", ",", 
         RowBox[{
          RowBox[{"gt", "//", 
           RowBox[{
            RowBox[{"#", "[", 
             SubscriptBox["P", "\[Alpha]"], "]"}], "&"}]}], "//", "N"}]}], 
        "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
        "\"\<\!\(\*SubscriptBox[\(P\), \(\[Alpha]\)]\) algebraic GTI\>\"", 
         ",", 
         RowBox[{
          RowBox[{"avgSol", "[", 
           SubscriptBox["P", "\[Alpha]"], "]"}], "//", "N"}]}], "}"}]}], 
      "}"}], ",", 
     RowBox[{"Dividers", "\[Rule]", "All"}], ",", "\[IndentingNewLine]", 
     RowBox[{"Background", "->", 
      RowBox[{"{", 
       RowBox[{"None", ",", 
        RowBox[{"{", 
         RowBox[{"Green", ",", "LightGreen"}], "}"}]}], "}"}]}]}], "]"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
    "The", " ", "alpha", " ", "label", " ", "accuracy", " ", "estimates"}], 
    " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"alphaAccuracies", "=", 
     RowBox[{"Table", "[", 
      RowBox[{
       SubscriptBox["P", 
        RowBox[{"i", ",", "\[Alpha]"}]], ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", "5"}], "}"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"Join", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"{", 
         RowBox[{
         "\"\<\[Alpha] label accuracies\>\"", ",", "\"\<ground truth\>\"", 
          ",", "\"\<algebraic estimate\>\""}], "}"}], "}"}], ",", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"accuracy", ",", 
           RowBox[{
            RowBox[{"gt", "[", "accuracy", "]"}], "//", "N"}], ",", 
           RowBox[{"avgSol", "[", "accuracy", "]"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"accuracy", ",", "alphaAccuracies"}], "}"}]}], "]"}]}], 
      "]"}], "//", "\[IndentingNewLine]", "Transpose"}], "//", 
    RowBox[{
     RowBox[{"Grid", "[", 
      RowBox[{"#", ",", 
       RowBox[{"Dividers", "\[Rule]", "All"}], ",", 
       RowBox[{"Background", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"None", ",", 
          RowBox[{"{", 
           RowBox[{"LightBlue", ",", "Green", ",", "LightGreen"}], "}"}]}], 
         "}"}]}]}], "]"}], "&"}]}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"betaAccuracies", "=", 
     RowBox[{"Table", "[", 
      RowBox[{
       SubscriptBox["P", 
        RowBox[{"i", ",", "\[Beta]"}]], ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", "5"}], "}"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"Join", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"{", 
         RowBox[{
         "\"\<\[Beta] label accuracies\>\"", ",", "\"\<ground truth\>\"", 
          ",", "\"\<algebraic estimate\>\""}], "}"}], "}"}], ",", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"accuracy", ",", 
           RowBox[{
            RowBox[{"gt", "[", "accuracy", "]"}], "//", "N"}], ",", 
           RowBox[{"avgSol", "[", "accuracy", "]"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"accuracy", ",", "betaAccuracies"}], "}"}]}], "]"}]}], 
      "]"}], "//", "\[IndentingNewLine]", "Transpose"}], "//", 
    RowBox[{
     RowBox[{"Grid", "[", 
      RowBox[{"#", ",", 
       RowBox[{"Dividers", "\[Rule]", "All"}], ",", 
       RowBox[{"Background", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"None", ",", 
          RowBox[{"{", 
           RowBox[{"LightBlue", ",", "Green", ",", "LightGreen"}], "}"}]}], 
         "}"}]}]}], "]"}], "&"}]}]}]}]], "Input",
 CellChangeTimes->{{3.835852637113092*^9, 3.835852763693218*^9}, 
   3.835853089117148*^9, {3.835853815887661*^9, 3.8358538315256767`*^9}, {
   3.835853878026116*^9, 3.835853927521418*^9}},
 CellLabel->"In[99]:=",ExpressionUUID->"f1af4b6c-e203-4bf0-b534-d4771b6ee208"],

Cell[BoxData[
 TagBox[GridBox[{
    {"\<\"\\!\\(\\*SubscriptBox[\\(P\\), \\(\[Alpha]\\)]\\) ground truth \
value\"\>", "0.5005555555555555`"},
    {"\<\"\\!\\(\\*SubscriptBox[\\(P\\), \\(\[Alpha]\\)]\\) algebraic \
GTI\"\>", "0.4929092076490966`"}
   },
   AutoDelete->False,
   GridBoxBackground->{"Columns" -> {{None}}, "Rows" -> {
       RGBColor[0, 1, 0], 
       RGBColor[0.88, 1, 0.88]}},
   GridBoxDividers->{"Columns" -> {{True}}, "Rows" -> {{True}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Output",
 CellChangeTimes->{{3.8358527394189796`*^9, 3.835852764427123*^9}, 
   3.835853090681777*^9, 3.835853832371316*^9, 3.835853898973268*^9, 
   3.8358539293858356`*^9},
 CellLabel->"Out[99]=",ExpressionUUID->"ef805479-6a45-41a2-b6d2-c8c3b86709b9"],

Cell[BoxData[
 TagBox[GridBox[{
    {"\<\"\[Alpha] label accuracies\"\>", 
     SubscriptBox["P", 
      RowBox[{"1", ",", "\[Alpha]"}]], 
     SubscriptBox["P", 
      RowBox[{"2", ",", "\[Alpha]"}]], 
     SubscriptBox["P", 
      RowBox[{"3", ",", "\[Alpha]"}]], 
     SubscriptBox["P", 
      RowBox[{"4", ",", "\[Alpha]"}]], 
     SubscriptBox["P", 
      RowBox[{"5", ",", "\[Alpha]"}]]},
    {"\<\"ground truth\"\>", "0.8172401035886052`", "0.803921568627451`", 
     "0.805401405845357`", "0.7961524232334444`", "0.780614132445431`"},
    {"\<\"algebraic estimate\"\>", "0.8141254065738989`", 
     "0.8054160775159415`", "0.8159640426157632`", "0.7994771494312941`", 
     "0.7876817551730474`"}
   },
   AutoDelete->False,
   GridBoxBackground->{"Columns" -> {{None}}, "Rows" -> {
       RGBColor[0.87, 0.94, 1], 
       RGBColor[0, 1, 0], 
       RGBColor[0.88, 1, 0.88]}},
   GridBoxDividers->{"Columns" -> {{True}}, "Rows" -> {{True}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Output",
 CellChangeTimes->{{3.8358527394189796`*^9, 3.835852764427123*^9}, 
   3.835853090681777*^9, 3.835853832371316*^9, 3.835853898973268*^9, 
   3.835853929396267*^9},
 CellLabel->
  "Out[101]=",ExpressionUUID->"78691944-0352-45c2-af48-38849c52e9a3"],

Cell[BoxData[
 TagBox[GridBox[{
    {"\<\"\[Beta] label accuracies\"\>", 
     SubscriptBox["P", 
      RowBox[{"1", ",", "\[Beta]"}]], 
     SubscriptBox["P", 
      RowBox[{"2", ",", "\[Beta]"}]], 
     SubscriptBox["P", 
      RowBox[{"3", ",", "\[Beta]"}]], 
     SubscriptBox["P", 
      RowBox[{"4", ",", "\[Beta]"}]], 
     SubscriptBox["P", 
      RowBox[{"5", ",", "\[Beta]"}]]},
    {"\<\"ground truth\"\>", "0.7982944011865035`", "0.8112717834631071`", 
     "0.8120133481646273`", "0.8223952539859103`", "0.8261030774935113`"},
    {"\<\"algebraic estimate\"\>", "0.7848401660106731`", 
     "0.8029670674511635`", "0.8080548041719933`", "0.8246866298454075`", 
     "0.8220636997872536`"}
   },
   AutoDelete->False,
   GridBoxBackground->{"Columns" -> {{None}}, "Rows" -> {
       RGBColor[0.87, 0.94, 1], 
       RGBColor[0, 1, 0], 
       RGBColor[0.88, 1, 0.88]}},
   GridBoxDividers->{"Columns" -> {{True}}, "Rows" -> {{True}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Output",
 CellChangeTimes->{{3.8358527394189796`*^9, 3.835852764427123*^9}, 
   3.835853090681777*^9, 3.835853832371316*^9, 3.835853898973268*^9, 
   3.835853929406746*^9},
 CellLabel->
  "Out[103]=",ExpressionUUID->"e4301a36-db48-49c7-a44d-fc3a5a0371e0"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
RMSE histogram for algebraic evaluation under random train/test splits of \
twonorm\
\>", "Section",
 CellChangeTimes->{{3.835616603803116*^9, 3.835616649435914*^9}, {
  3.835616736586205*^9, 
  3.835616738987506*^9}},ExpressionUUID->"784077af-c1a1-4fb7-ab8a-\
b673bee248d3"],

Cell["\<\
The one-shot evaluation above is impressive. But maybe it is an exception. \
What happens when we do repeated random train/test splits with the twonorm \
dataset?\
\>", "Text",
 CellChangeTimes->{{3.835853968712446*^9, 
  3.835854008899098*^9}},ExpressionUUID->"86fde940-2721-4f8d-a8a1-\
87ca7ccb69ca"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"classifierTypes", " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\"\<NeuralNetwork\>\"", ",", 
       RowBox[{"\"\<NetworkDepth\>\"", "\[Rule]", "5"}]}], "}"}], ",", 
     "\"\<GradientBoostedTrees\>\"", ",", "\"\<NaiveBayes\>\"", ",", 
     "\"\<LogisticRegression\>\"", ",", "\"\<SupportVectorMachine\>\""}], 
    "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Monitor", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"runs", "=", 
     RowBox[{"Table", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"trainTestSplit", "=", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"TakeDrop", "[", 
             RowBox[{
              RowBox[{"RandomSample", "@", "#"}], ",", "1000"}], "]"}], "&"}],
            ",", "benchmarkData"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
         "Each", " ", "classifier", " ", "is", " ", "now", " ", "trained", 
          " ", "and", " ", "tested", " ", "only", " ", "using", " ", "its", 
          " ", "specific", " ", "features"}], " ", "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"classifiersData", "=", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"Map", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"#", "[", 
               RowBox[{"[", "features", "]"}], "]"}], "&"}], ",", 
             "trainTestSplit", ",", 
             RowBox[{"{", "3", "}"}]}], "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"features", ",", "classifiersFeatures"}], "}"}]}], 
          "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"classifiers", " ", "=", " ", 
         RowBox[{"TrainClassifiers", "[", 
          RowBox[{
          "classifiersData", ",", "classifierTypes", ",", "1000", ",", 
           "800"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"AlgebraicallyEvaluateClassifiers", "[", 
         RowBox[{"classifiers", ",", "classifiersData"}], "]"}]}], ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", "100"}], "}"}]}], "]"}]}], ";"}], ",", "i"}], 
  "]"}]}], "Input",
 CellChangeTimes->{{3.835624059607897*^9, 3.835624098485914*^9}, {
   3.8358516956697283`*^9, 3.8358517015900307`*^9}, {3.835854449877903*^9, 
   3.835854518936871*^9}, 
   3.8358593769823217`*^9},ExpressionUUID->"0a8e951c-8a45-4e4f-ba25-\
2802ebebcd72"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"runs", "//", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"Take", "[", 
         RowBox[{"#", ",", "3"}], "]"}], "&"}], "/@", "#"}], "&"}]}], "//", 
    "Transpose"}], "//", "First"}], "//", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Histogram", "[", 
    RowBox[{"#", ",", 
     RowBox[{
     "PlotLabel", "->", 
      "\"\<Histogram of \!\(\*SubscriptBox[\(P\), \(\[Alpha]\)]\) estimate \
error over 100 train/test splits\\nfor the Penn ML Benchmark twonorm\>\""}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{"AxesLabel", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"\"\<\[Alpha] prevalence error\>\"", ",", "None"}], "}"}]}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{"BaseStyle", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"FontSize", "->", "14"}], "}"}]}], ",", 
     RowBox[{"ImageSize", "->", "800"}]}], "]"}], "&"}]}]], "Input",
 CellChangeTimes->{{3.83562778579283*^9, 3.835627832916163*^9}, {
  3.8356826782265587`*^9, 3.835682698888495*^9}, {3.835682745343376*^9, 
  3.835682823834105*^9}, {3.835682860986039*^9, 3.835682887540029*^9}, {
  3.835859388731411*^9, 3.835859478871963*^9}},
 CellLabel->
  "In[109]:=",ExpressionUUID->"5e5fe597-869f-4e5a-8c22-cbb949353417"],

Cell[BoxData[
 GraphicsBox[{
   {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], EdgeForm[{
    Opacity[0.602], Thickness[Small]}], {}, 
    {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], EdgeForm[{
     Opacity[0.602], Thickness[Small]}], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{-0.008, 0}, {-0.006, 1.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{38.218124499599696`, 104.59572658126501`}, {
           237.49949537530466`, 261.7449509563991}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 1]& ,
        TagBoxNote->"1"],
       StyleBox["1", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[1, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{-0.006, 0}, {-0.004, 5.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{103.97072658126501`, 170.34832866293033`}, {
           143.01767305092687`, 261.7449509563991}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 5]& ,
        TagBoxNote->"5"],
       StyleBox["5", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[5, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{-0.004, 0}, {-0.002, 6.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{169.72332866293033`, 236.10093074459564`}, {
           119.39721746983241`, 261.7449509563991}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 6]& ,
        TagBoxNote->"6"],
       StyleBox["6", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[6, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{-0.002, 0}, {0., 12.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{234.85093074459564`, 
           302.47853282626096`}, {-22.950516016734298`, 262.3699509563991}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 12]& ,
        TagBoxNote->"12"],
       StyleBox["12", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[12, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0., 0}, {0.002, 12.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{301.22853282626096`, 
           367.6061349079263}, {-22.325516016734298`, 261.7449509563991}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 12]& ,
        TagBoxNote->"12"],
       StyleBox["12", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[12, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.002, 0}, {0.004, 17.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{366.9811349079263, 
           433.3587369895916}, {-140.42779392220655`, 261.7449509563991}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 17]& ,
        TagBoxNote->"17"],
       StyleBox["17", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[17, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.004, 0}, {0.006, 20.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{432.7337369895916, 
           499.1113390712569}, {-211.28916066548987`, 261.7449509563991}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 20]& ,
        TagBoxNote->"20"],
       StyleBox["20", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[20, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.006, 0}, {0.008, 14.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{498.4863390712569, 
           564.8639411529223}, {-69.56642717892316, 261.7449509563991}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 14]& ,
        TagBoxNote->"14"],
       StyleBox["14", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[14, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.008, 0}, {0.01, 9.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{564.2389411529223, 630.6165432345875}, {
           48.53585072654906, 261.7449509563991}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 9]& ,
        TagBoxNote->"9"],
       StyleBox["9", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[9, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.01, 0}, {0.012, 2.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{629.9915432345875, 696.3691453162528}, {
           213.87903979421023`, 261.7449509563991}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 2]& ,
        TagBoxNote->"2"],
       StyleBox["2", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[2, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.012, 0}, {0.014, 1.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{695.7441453162528, 762.1217473979182}, {
           237.49949537530466`, 261.7449509563991}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 1]& ,
        TagBoxNote->"1"],
       StyleBox["1", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[1, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.014, 0}, {0.016, 1.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{761.4967473979182, 827.8743494795835}, {
           237.49949537530466`, 261.7449509563991}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 1]& ,
        TagBoxNote->"1"],
       StyleBox["1", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[1, {}], 
       "Tooltip"]& ]}, {}, {}}, {{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{
    FormBox["\"\[Alpha] prevalence error\"", TraditionalForm], None},
  AxesOrigin->{-0.00848, 0},
  BaseStyle->{FontSize -> 14},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->800,
  PlotLabel->FormBox[
   "\"Histogram of \\!\\(\\*SubscriptBox[\\(P\\), \\(\[Alpha]\\)]\\) estimate \
error over 100 train/test splits\\nfor the Penn ML Benchmark twonorm\"", 
    TraditionalForm],
  PlotRange->{{-0.008, 0.016}, {All, All}},
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{
  3.835627834542123*^9, 3.835682767804943*^9, {3.8356828017663193`*^9, 
   3.835682824805847*^9}, 3.8356828963881598`*^9, 3.83585940666115*^9, {
   3.835859469813936*^9, 3.835859479870119*^9}},
 CellLabel->
  "Out[109]=",ExpressionUUID->"36fa16ac-f67f-4788-ba86-e0b0283965c5"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"runs", "//", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"Take", "[", 
         RowBox[{"#", ",", "3"}], "]"}], "&"}], "/@", "#"}], "&"}]}], "//", 
    "Transpose"}], "//", 
   RowBox[{
    RowBox[{"#", "[", 
     RowBox[{"[", "2", "]"}], "]"}], "&"}]}], "//", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Histogram", "[", 
    RowBox[{"#", ",", 
     RowBox[{
     "PlotLabel", "->", 
      "\"\<Histogram of \!\(\*SubscriptBox[\(P\), \(i, \[Alpha]\)]\) \
estimates one-shot evaluation RMSE error over \\n100 train/test splits of the \
Penn ML Benchmark twonorm\>\""}], ",", "\[IndentingNewLine]", 
     RowBox[{"AxesLabel", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"\"\<Ensemble \[Alpha] accuracies RMSE\>\"", ",", "None"}], 
       "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"BaseStyle", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"FontSize", "->", "14"}], "}"}]}], ",", 
     RowBox[{"ImageSize", "->", "800"}]}], "]"}], "&"}]}]], "Input",
 CellChangeTimes->{{3.8356278939498663`*^9, 3.8356279110807037`*^9}, {
   3.8356829276393433`*^9, 3.835683022317842*^9}, 3.835859496981318*^9, {
   3.835859531429274*^9, 3.835859590390233*^9}},
 CellLabel->
  "In[111]:=",ExpressionUUID->"ce4d925a-2544-4800-b0dc-f743b3f13b43"],

Cell[BoxData[
 GraphicsBox[{
   {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], EdgeForm[{
    Opacity[0.616], Thickness[Small]}], {}, 
    {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], EdgeForm[{
     Opacity[0.616], Thickness[Small]}], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.001, 0}, {0.002, 4.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{36.392664131305054`, 106.7934847878303}, {
           169.2638276395092, 234.15991857788117`}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 4]& ,
        TagBoxNote->"4"],
       StyleBox["4", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[4, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.002, 0}, {0.003, 13.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{106.1684847878303, 176.5693054443555}, {
           24.653873028172228`, 234.15991857788117`}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 13]& ,
        TagBoxNote->"13"],
       StyleBox["13", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[13, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.003, 0}, {0.004, 22.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{175.9443054443555, 
           246.34512610088078`}, {-119.95608158316475`, 234.15991857788117`}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 22]& ,
        TagBoxNote->"22"],
       StyleBox["22", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[22, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.004, 0}, {0.005, 26.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{245.72012610088078`, 
           316.12094675740593`}, {-184.22717252153672`, 234.15991857788117`}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 26]& ,
        TagBoxNote->"26"],
       StyleBox["26", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[26, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.005, 0}, {0.006, 16.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{315.49594675740593`, 
           385.89676741393123`}, {-23.549445175606763`, 234.15991857788117`}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 16]& ,
        TagBoxNote->"16"],
       StyleBox["16", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[16, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.006, 0}, {0.007, 12.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{385.27176741393123`, 455.6725880704564}, {
           40.721645762765206`, 234.15991857788117`}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 12]& ,
        TagBoxNote->"12"],
       StyleBox["12", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[12, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.007, 0}, {0.008, 3.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{455.0475880704564, 525.4484087269817}, {
           185.33160037410218`, 234.15991857788117`}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 3]& ,
        TagBoxNote->"3"],
       StyleBox["3", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[3, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.008, 0}, {0.009, 3.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{524.8234087269817, 595.2242293835068}, {
           185.33160037410218`, 234.15991857788117`}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 3]& ,
        TagBoxNote->"3"],
       StyleBox["3", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[3, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.01, 0}, {0.011, 1.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{664.3750500400321, 734.7758706965573}, {
           217.46714584328816`, 234.15991857788117`}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 1]& ,
        TagBoxNote->"1"],
       StyleBox["1", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[1, {}], 
       "Tooltip"]& ]}, {}, {}}, {{}, {}, {}, {}, {}, {}, {}, {}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{
    FormBox["\"Ensemble \[Alpha] accuracies RMSE\"", TraditionalForm], None},
  AxesOrigin->{0.0008, 0},
  BaseStyle->{FontSize -> 14},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->800,
  PlotLabel->FormBox[
   "\"Histogram of \\!\\(\\*SubscriptBox[\\(P\\), \\(i, \[Alpha]\\)]\\) \
estimates one-shot evaluation RMSE error over \\n100 train/test splits of the \
Penn ML Benchmark twonorm\"", TraditionalForm],
  PlotRange->{{0.001, 0.011}, {All, All}},
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{
  3.835627912903998*^9, {3.8356830057221327`*^9, 3.835683026108694*^9}, 
   3.83585953883442*^9, 3.835859595436817*^9},
 CellLabel->
  "Out[111]=",ExpressionUUID->"5da48171-f177-4286-a34a-75972fb554a2"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"runs", "//", "Transpose"}], "//", 
   RowBox[{
    RowBox[{"#", "[", 
     RowBox[{"[", "3", "]"}], "]"}], "&"}]}], "//", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Histogram", "[", 
    RowBox[{"#", ",", 
     RowBox[{
     "PlotLabel", "->", 
      "\"\<Histogram of \!\(\*SubscriptBox[\(P\), \(i, \[Beta]\)]\) estimates \
one-shot evaluation RMSE error over \\n100 train/test splits of the Penn ML \
Benchmark twonorm\>\""}], ",", "\[IndentingNewLine]", 
     RowBox[{"AxesLabel", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"\"\<Ensemble \[Beta] accuracies RMSE\>\"", ",", "None"}], 
       "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"BaseStyle", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"FontSize", "->", "14"}], "}"}]}], ",", 
     RowBox[{"ImageSize", "->", "800"}]}], "]"}], "&"}]}]], "Input",
 CellChangeTimes->{{3.8356281479233713`*^9, 3.8356281509858627`*^9}, {
  3.835682933248343*^9, 3.8356829373166428`*^9}, {3.835683047033846*^9, 
  3.835683054831506*^9}, {3.83585961665578*^9, 3.835859625233925*^9}},
 CellLabel->
  "In[112]:=",ExpressionUUID->"44543aa6-4b3a-412d-8853-e7b32121a596"],

Cell[BoxData[
 GraphicsBox[{
   {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], EdgeForm[{
    Opacity[0.616], Thickness[Small]}], {}, 
    {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], EdgeForm[{
     Opacity[0.616], Thickness[Small]}], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.001, 0}, {0.002, 1.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{36.411879503602876`, 106.9087770216173}, {
           218.05117977904484`, 234.7660768134445}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 1]& ,
        TagBoxNote->"1"],
       StyleBox["1", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[1, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.002, 0}, {0.003, 3.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{106.2837770216173, 176.78067453963172`}, {
           185.8713857102455, 234.7660768134445}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 3]& ,
        TagBoxNote->"3"],
       StyleBox["3", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[3, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.003, 0}, {0.004, 12.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{176.15567453963172`, 246.65257205764613`}, {
           41.06231240064852, 234.7660768134445}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 12]& ,
        TagBoxNote->"12"],
       StyleBox["12", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[12, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.004, 0}, {0.005, 26.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{246.02757205764613`, 
           316.52446957566053`}, {-184.19624608094682`, 234.7660768134445}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 26]& ,
        TagBoxNote->"26"],
       StyleBox["26", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[26, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.005, 0}, {0.006, 22.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{315.89946957566053`, 
           386.39636709367494`}, {-119.83665794334814`, 234.7660768134445}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 22]& ,
        TagBoxNote->"22"],
       StyleBox["22", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[22, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.006, 0}, {0.007, 17.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{385.77136709367494`, 
           456.2682646116894}, {-39.38717277134981, 234.7660768134445}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 17]& ,
        TagBoxNote->"17"],
       StyleBox["17", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[17, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.007, 0}, {0.008, 13.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{455.6432646116894, 526.1401621297039}, {
           24.97241536624884, 234.7660768134445}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 13]& ,
        TagBoxNote->"13"],
       StyleBox["13", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[13, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.008, 0}, {0.009, 4.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{525.5151621297039, 596.0120596477183}, {
           169.78148867584582`, 234.7660768134445}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 4]& ,
        TagBoxNote->"4"],
       StyleBox["4", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[4, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.009, 0}, {0.01, 1.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{595.3870596477183, 665.8839571657327}, {
           218.05117977904484`, 234.7660768134445}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 1]& ,
        TagBoxNote->"1"],
       StyleBox["1", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[1, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.01, 0}, {0.011, 1.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{665.2589571657327, 735.7558546837471}, {
           218.05117977904484`, 234.7660768134445}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 1]& ,
        TagBoxNote->"1"],
       StyleBox["1", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[1, {}], 
       "Tooltip"]& ]}, {}, {}}, {{}, {}, {}, {}, {}, {}, {}, {}, {}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{
    FormBox["\"Ensemble \[Beta] accuracies RMSE\"", TraditionalForm], None},
  AxesOrigin->{0.0008, 0},
  BaseStyle->{FontSize -> 14},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->800,
  PlotLabel->FormBox[
   "\"Histogram of \\!\\(\\*SubscriptBox[\\(P\\), \\(i, \[Beta]\\)]\\) \
estimates one-shot evaluation RMSE error over \\n100 train/test splits of the \
Penn ML Benchmark twonorm\"", TraditionalForm],
  PlotRange->{{0.001, 0.011}, {All, All}},
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.8356281558838167`*^9, 3.835683056880946*^9, 
  3.8358596270834217`*^9},
 CellLabel->
  "Out[112]=",ExpressionUUID->"06dc7c4e-156f-416f-9c96-7a9026d8d941"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
Evaluator->"K2",
WindowSize->{1276, 895},
WindowMargins->{{Automatic, 174}, {Automatic, 43}},
Magnification->1.25,
FrontEndVersion->"12.3 for Mac OS X x86 (64-bit) (June 19, 2021)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"70610804-7537-4eca-bc92-cddf7b72aea9"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 626, 13, 201, "Title",ExpressionUUID->"8f25e2ae-8046-4cc1-9a60-f05d9b47ba1c"],
Cell[1209, 37, 1083, 17, 102, "Text",ExpressionUUID->"93553b76-fab8-4060-ac5b-d39c38786d95"],
Cell[CellGroupData[{
Cell[2317, 58, 151, 3, 84, "Section",ExpressionUUID->"e1ff1cee-7ca3-408a-a320-a5798c722a49"],
Cell[CellGroupData[{
Cell[2493, 65, 372, 7, 67, "Subsection",ExpressionUUID->"c1bcff9c-8b5f-47f9-92a5-43a5e009c8e0"],
Cell[CellGroupData[{
Cell[2890, 76, 1577, 36, 142, "Input",ExpressionUUID->"a9191f5f-35f3-44bd-ad9e-8d889ac4a103"],
Cell[4470, 114, 346, 5, 42, "Output",ExpressionUUID->"7ee822fd-c9b0-4d5b-86e9-199194689d70"]
}, Open  ]],
Cell[CellGroupData[{
Cell[4853, 124, 307, 5, 64, "Input",ExpressionUUID->"a794bd5d-67a5-413b-a67b-62f5bef91d93"],
Cell[5163, 131, 680, 11, 42, "Output",ExpressionUUID->"45242947-27de-404a-8633-48b9e4c7c6fe"],
Cell[5846, 144, 218, 3, 42, "Output",ExpressionUUID->"d4748886-bc2b-4206-b20c-90bb18f7d45f"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[6113, 153, 171, 3, 67, "Subsection",ExpressionUUID->"5d62c9ad-f7ae-4dc6-aaf3-526e28ba9463"],
Cell[6287, 158, 4361, 93, 350, "Input",ExpressionUUID->"c2fc95d8-0944-46b2-9e82-72dbd9e0bf73"],
Cell[10651, 253, 11648, 299, 991, "Input",ExpressionUUID->"bf8298b0-e4ac-4a9f-864a-34ea26614016"]
}, Open  ]],
Cell[CellGroupData[{
Cell[22336, 557, 207, 4, 67, "Subsection",ExpressionUUID->"d4b58778-bafa-4fc0-8da8-c5f0cdc86690"],
Cell[22546, 563, 7510, 228, 266, "Input",ExpressionUUID->"49bf1480-9166-4295-8b22-148e76e9e606"],
Cell[30059, 793, 4080, 107, 402, "Input",ExpressionUUID->"3c6360e4-e986-4316-8e38-9da08ebf810d"],
Cell[34142, 902, 4865, 129, 454, "Input",ExpressionUUID->"3673bd68-42ff-44fd-9bad-a0ef88607cf7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[39044, 1036, 155, 3, 67, "Subsection",ExpressionUUID->"4d616c51-7942-4f54-b1e7-a4ae50e28988"],
Cell[39202, 1041, 2029, 58, 194, "Input",ExpressionUUID->"6bda0d5d-444e-4399-884d-14a13bd80a10"],
Cell[41234, 1101, 2496, 74, 197, "Input",ExpressionUUID->"e228aa3d-e6a4-4188-8805-cd74bdf4ca8a"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[43779, 1181, 164, 3, 84, "Section",ExpressionUUID->"b0b902fe-3f39-4ef8-94b3-f0c957dc9037"],
Cell[43946, 1186, 483, 9, 102, "Text",ExpressionUUID->"acb67ab6-9a49-4b13-9a32-a83e9ccc5c60"],
Cell[CellGroupData[{
Cell[44454, 1199, 272, 6, 67, "Subsection",ExpressionUUID->"212f373d-9049-4fae-b13d-fd2fe9fe68d8"],
Cell[44729, 1207, 1103, 19, 274, "Text",ExpressionUUID->"170e6e25-1934-4b8f-8727-c0006ec1feaa"],
Cell[45835, 1228, 780, 12, 131, "Text",ExpressionUUID->"554d3299-e381-457f-9b81-5f6646dc94fd"],
Cell[CellGroupData[{
Cell[46640, 1244, 686, 17, 37, "Input",ExpressionUUID->"a087c21c-55da-45fd-800b-7497dec11eeb"],
Cell[47329, 1263, 674, 16, 42, "Output",ExpressionUUID->"94cce595-3989-4491-ad46-72dffd8e29bb"]
}, Open  ]],
Cell[CellGroupData[{
Cell[48040, 1284, 2756, 64, 194, "Input",ExpressionUUID->"a3c50d19-6fb8-40ee-8910-1e78aa507d9f"],
Cell[50799, 1350, 1194, 21, 42, "Output",ExpressionUUID->"9b7d09af-e7f5-443b-9603-0c8096db15ba"],
Cell[51996, 1373, 441112, 7895, 216, "Output",ExpressionUUID->"e045f543-bdc4-418b-9a95-f9d83bfbbddf"]
}, Open  ]],
Cell[493123, 9271, 221, 5, 44, "Text",ExpressionUUID->"92440e24-d35c-4985-958d-69be3f551f98"],
Cell[CellGroupData[{
Cell[493369, 9280, 620, 15, 64, "Input",ExpressionUUID->"1bdbe186-2030-425b-ad46-b741ee56f401"],
Cell[493992, 9297, 613, 13, 71, "Output",ExpressionUUID->"176ac97f-cfb4-45ed-8be1-3601bc8ae8ff"]
}, Open  ]],
Cell[494620, 9313, 401, 8, 73, "Text",ExpressionUUID->"104c1bc4-4509-4a33-8210-906bcdd3e723"],
Cell[CellGroupData[{
Cell[495046, 9325, 4208, 118, 330, "Input",ExpressionUUID->"f1af4b6c-e203-4bf0-b534-d4771b6ee208"],
Cell[499257, 9445, 802, 17, 73, "Output",ExpressionUUID->"ef805479-6a45-41a2-b6d2-c8c3b86709b9"],
Cell[500062, 9464, 1294, 31, 99, "Output",ExpressionUUID->"78691944-0352-45c2-af48-38849c52e9a3"],
Cell[501359, 9497, 1291, 31, 99, "Output",ExpressionUUID->"e4301a36-db48-49c7-a44d-fc3a5a0371e0"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[502711, 9535, 285, 7, 132, "Section",ExpressionUUID->"784077af-c1a1-4fb7-ab8a-b673bee248d3"],
Cell[502999, 9544, 312, 7, 73, "Text",ExpressionUUID->"86fde940-2721-4f8d-a8a1-87ca7ccb69ca"],
Cell[503314, 9553, 2435, 59, 220, "Input",ExpressionUUID->"0a8e951c-8a45-4e4f-ba25-2802ebebcd72"],
Cell[CellGroupData[{
Cell[505774, 9616, 1278, 32, 142, "Input",ExpressionUUID->"5e5fe597-869f-4e5a-8c22-cbb949353417"],
Cell[507055, 9650, 9789, 288, 600, "Output",ExpressionUUID->"36fa16ac-f67f-4788-ba86-e0b0283965c5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[516881, 9943, 1318, 34, 201, "Input",ExpressionUUID->"ce4d925a-2544-4800-b0dc-f743b3f13b43"],
Cell[518202, 9979, 7676, 223, 545, "Output",ExpressionUUID->"5da48171-f177-4286-a34a-75972fb554a2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[525915, 10207, 1167, 27, 201, "Input",ExpressionUUID->"44543aa6-4b3a-412d-8853-e7b32121a596"],
Cell[527085, 10236, 8300, 243, 566, "Output",ExpressionUUID->"06dc7c4e-156f-416f-9c96-7a9026d8d941"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

